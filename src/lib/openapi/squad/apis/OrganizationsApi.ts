/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 0.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  OnboardPost200Response,
  OnboardPostRequest,
  OrganisationsGet200ResponseInner,
  OrganisationsOrgIdDelete200Response,
  OrganisationsOrgIdPutRequest,
  OrganisationsOrgIdStatusGet200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400Response,
  OrganisationsPostRequest,
} from '../models/index.js';
import {
    OnboardPost200ResponseFromJSON,
    OnboardPost200ResponseToJSON,
    OnboardPostRequestFromJSON,
    OnboardPostRequestToJSON,
    OrganisationsGet200ResponseInnerFromJSON,
    OrganisationsGet200ResponseInnerToJSON,
    OrganisationsOrgIdDelete200ResponseFromJSON,
    OrganisationsOrgIdDelete200ResponseToJSON,
    OrganisationsOrgIdPutRequestFromJSON,
    OrganisationsOrgIdPutRequestToJSON,
    OrganisationsOrgIdStatusGet200ResponseFromJSON,
    OrganisationsOrgIdStatusGet200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400ResponseToJSON,
    OrganisationsPostRequestFromJSON,
    OrganisationsPostRequestToJSON,
} from '../models/index.js';

export interface OnboardPostOperationRequest {
    onboardPostRequest?: OnboardPostRequest;
}

export interface OrganisationsOrgIdDeleteRequest {
    orgId: string;
}

export interface OrganisationsOrgIdGetRequest {
    orgId: string;
}

export interface OrganisationsOrgIdOnboardPutRequest {
    orgId: string;
    onboardPostRequest?: OnboardPostRequest;
}

export interface OrganisationsOrgIdPutOperationRequest {
    orgId: string;
    organisationsOrgIdPutRequest: OrganisationsOrgIdPutRequest;
}

export interface OrganisationsOrgIdStatusGetRequest {
    orgId: string;
}

export interface OrganisationsPostOperationRequest {
    organisationsPostRequest: OrganisationsPostRequest;
}

/**
 * OrganizationsApi - interface
 * 
 * @export
 * @interface OrganizationsApiInterface
 */
export interface OrganizationsApiInterface {
    /**
     * 
     * @summary Create a new organization with workspace and outcomes
     * @param {OnboardPostRequest} [onboardPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    onboardPostRaw(requestParameters: OnboardPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OnboardPost200Response>>;

    /**
     * Create a new organization with workspace and outcomes
     */
    onboardPost(requestParameters: OnboardPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OnboardPost200Response>;

    /**
     * Lists all organisations accessible to the authenticated user
     * @summary List organisations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    organisationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsGet200ResponseInner>>>;

    /**
     * Lists all organisations accessible to the authenticated user
     * List organisations
     */
    organisationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsGet200ResponseInner>>;

    /**
     * Deletes a specific organisation by ID
     * @summary Delete organisation
     * @param {string} orgId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    organisationsOrgIdDeleteRaw(requestParameters: OrganisationsOrgIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdDelete200Response>>;

    /**
     * Deletes a specific organisation by ID
     * Delete organisation
     */
    organisationsOrgIdDelete(requestParameters: OrganisationsOrgIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdDelete200Response>;

    /**
     * Retrieves a specific organisation by ID
     * @summary Get organisation by ID
     * @param {string} orgId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    organisationsOrgIdGetRaw(requestParameters: OrganisationsOrgIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsGet200ResponseInner>>;

    /**
     * Retrieves a specific organisation by ID
     * Get organisation by ID
     */
    organisationsOrgIdGet(requestParameters: OrganisationsOrgIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsGet200ResponseInner>;

    /**
     * 
     * @summary Update an existing organization, recreate workspace and outcomes
     * @param {string} orgId Organization ID
     * @param {OnboardPostRequest} [onboardPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    organisationsOrgIdOnboardPutRaw(requestParameters: OrganisationsOrgIdOnboardPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OnboardPost200Response>>;

    /**
     * Update an existing organization, recreate workspace and outcomes
     */
    organisationsOrgIdOnboardPut(requestParameters: OrganisationsOrgIdOnboardPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OnboardPost200Response>;

    /**
     * Updates a specific organisation by ID
     * @summary Update organisation
     * @param {string} orgId Organization ID
     * @param {OrganisationsOrgIdPutRequest} organisationsOrgIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    organisationsOrgIdPutRaw(requestParameters: OrganisationsOrgIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsGet200ResponseInner>>;

    /**
     * Updates a specific organisation by ID
     * Update organisation
     */
    organisationsOrgIdPut(requestParameters: OrganisationsOrgIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsGet200ResponseInner>;

    /**
     * Retrieves the current status and statistics of an organization
     * @summary Get organization status
     * @param {string} orgId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    organisationsOrgIdStatusGetRaw(requestParameters: OrganisationsOrgIdStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdStatusGet200Response>>;

    /**
     * Retrieves the current status and statistics of an organization
     * Get organization status
     */
    organisationsOrgIdStatusGet(requestParameters: OrganisationsOrgIdStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdStatusGet200Response>;

    /**
     * Creates a new organisation
     * @summary Create new organisation
     * @param {OrganisationsPostRequest} organisationsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    organisationsPostRaw(requestParameters: OrganisationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsGet200ResponseInner>>;

    /**
     * Creates a new organisation
     * Create new organisation
     */
    organisationsPost(requestParameters: OrganisationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsGet200ResponseInner>;

}

/**
 * 
 */
export class OrganizationsApi extends runtime.BaseAPI implements OrganizationsApiInterface {

    /**
     * Create a new organization with workspace and outcomes
     */
    async onboardPostRaw(requestParameters: OnboardPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OnboardPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/onboard`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OnboardPostRequestToJSON(requestParameters['onboardPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OnboardPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new organization with workspace and outcomes
     */
    async onboardPost(requestParameters: OnboardPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OnboardPost200Response> {
        const response = await this.onboardPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all organisations accessible to the authenticated user
     * List organisations
     */
    async organisationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsGet200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationsGet200ResponseInnerFromJSON));
    }

    /**
     * Lists all organisations accessible to the authenticated user
     * List organisations
     */
    async organisationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsGet200ResponseInner>> {
        const response = await this.organisationsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific organisation by ID
     * Delete organisation
     */
    async organisationsOrgIdDeleteRaw(requestParameters: OrganisationsOrgIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific organisation by ID
     * Delete organisation
     */
    async organisationsOrgIdDelete(requestParameters: OrganisationsOrgIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdDelete200Response> {
        const response = await this.organisationsOrgIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific organisation by ID
     * Get organisation by ID
     */
    async organisationsOrgIdGetRaw(requestParameters: OrganisationsOrgIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific organisation by ID
     * Get organisation by ID
     */
    async organisationsOrgIdGet(requestParameters: OrganisationsOrgIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsGet200ResponseInner> {
        const response = await this.organisationsOrgIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing organization, recreate workspace and outcomes
     */
    async organisationsOrgIdOnboardPutRaw(requestParameters: OrganisationsOrgIdOnboardPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OnboardPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdOnboardPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/onboard`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OnboardPostRequestToJSON(requestParameters['onboardPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OnboardPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing organization, recreate workspace and outcomes
     */
    async organisationsOrgIdOnboardPut(requestParameters: OrganisationsOrgIdOnboardPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OnboardPost200Response> {
        const response = await this.organisationsOrgIdOnboardPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific organisation by ID
     * Update organisation
     */
    async organisationsOrgIdPutRaw(requestParameters: OrganisationsOrgIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdPut().'
            );
        }

        if (requestParameters['organisationsOrgIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdPutRequest',
                'Required parameter "organisationsOrgIdPutRequest" was null or undefined when calling organisationsOrgIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdPutRequestToJSON(requestParameters['organisationsOrgIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Updates a specific organisation by ID
     * Update organisation
     */
    async organisationsOrgIdPut(requestParameters: OrganisationsOrgIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsGet200ResponseInner> {
        const response = await this.organisationsOrgIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the current status and statistics of an organization
     * Get organization status
     */
    async organisationsOrgIdStatusGetRaw(requestParameters: OrganisationsOrgIdStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdStatusGet200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdStatusGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/status`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdStatusGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the current status and statistics of an organization
     * Get organization status
     */
    async organisationsOrgIdStatusGet(requestParameters: OrganisationsOrgIdStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdStatusGet200Response> {
        const response = await this.organisationsOrgIdStatusGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new organisation
     * Create new organisation
     */
    async organisationsPostRaw(requestParameters: OrganisationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsGet200ResponseInner>> {
        if (requestParameters['organisationsPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsPostRequest',
                'Required parameter "organisationsPostRequest" was null or undefined when calling organisationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsPostRequestToJSON(requestParameters['organisationsPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Creates a new organisation
     * Create new organisation
     */
    async organisationsPost(requestParameters: OrganisationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsGet200ResponseInner> {
        const response = await this.organisationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
