/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 0.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner,
  OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost429Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400Response,
} from '../models/index.js';
import {
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInnerFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInnerToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost429ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost429ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400ResponseToJSON,
} from '../models/index.js';

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGetRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDeleteRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGetRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutOperationRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequest: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostOperationRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
    action: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostOperationActionEnum;
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequest;
}

/**
 * OpportunitiesApi - interface
 * 
 * @export
 * @interface OpportunitiesApiInterface
 */
export interface OpportunitiesApiInterface {
    /**
     * Lists all opportunities in the specified workspace
     * @summary List opportunities
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpportunitiesApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner>>>;

    /**
     * Lists all opportunities in the specified workspace
     * List opportunities
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner>>;

    /**
     * Deletes a specific opportunity by ID
     * @summary Delete opportunity
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} opportunityId Opportunity ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpportunitiesApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete200Response>>;

    /**
     * Deletes a specific opportunity by ID
     * Delete opportunity
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete200Response>;

    /**
     * Retrieves a specific opportunity by ID
     * @summary Get opportunity by ID
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} opportunityId Opportunity ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpportunitiesApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner>>;

    /**
     * Retrieves a specific opportunity by ID
     * Get opportunity by ID
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner>;

    /**
     * Updates a specific opportunity by ID
     * @summary Update opportunity
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} opportunityId Opportunity ID
     * @param {OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequest} organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpportunitiesApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner>>;

    /**
     * Updates a specific opportunity by ID
     * Update opportunity
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPut(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner>;

    /**
     * Add or remove relationships between an opportunity and other entities (solutions, outcomes, or feedback)
     * @summary Manage opportunity relationships
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} opportunityId Opportunity ID
     * @param {'add' | 'remove'} action Action to perform on relationships
     * @param {OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRequest} organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpportunitiesApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Add or remove relationships between an opportunity and other entities (solutions, outcomes, or feedback)
     * Manage opportunity relationships
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Creates a new opportunity in the specified workspace
     * @summary Create new opportunity
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequest} organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpportunitiesApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner>>;

    /**
     * Creates a new opportunity in the specified workspace
     * Create new opportunity
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner>;

}

/**
 * 
 */
export class OpportunitiesApi extends runtime.BaseAPI implements OpportunitiesApiInterface {

    /**
     * Lists all opportunities in the specified workspace
     * List opportunities
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInnerFromJSON));
    }

    /**
     * Lists all opportunities in the specified workspace
     * List opportunities
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner>> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific opportunity by ID
     * Delete opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific opportunity by ID
     * Delete opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific opportunity by ID
     * Get opportunity by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGet().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific opportunity by ID
     * Get opportunity by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific opportunity by ID
     * Update opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPut().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPut().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPut().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Updates a specific opportunity by ID
     * Update opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPut(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add or remove relationships between an opportunity and other entities (solutions, outcomes, or feedback)
     * Manage opportunity relationships
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}/relationships/{action}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))).replace(`{${"action"}}`, encodeURIComponent(String(requestParameters['action']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove relationships between an opportunity and other entities (solutions, outcomes, or feedback)
     * Manage opportunity relationships
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new opportunity in the specified workspace
     * Create new opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Creates a new opportunity in the specified workspace
     * Create new opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostOperationActionEnum = {
    Add: 'add',
    Remove: 'remove'
} as const;
export type OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostOperationActionEnum = typeof OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostOperationActionEnum[keyof typeof OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdRelationshipsActionPostOperationActionEnum];
