/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 0.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner,
  OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRequest,
} from '../models/index.js';
import {
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInnerFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInnerToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRequestToJSON,
} from '../models/index.js';

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostOperationRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequest?: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGetRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDeleteRequest {
    orgId: string;
    workspaceId: string;
    solutionId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGetRequest {
    orgId: string;
    workspaceId: string;
    solutionId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutOperationRequest {
    orgId: string;
    workspaceId: string;
    solutionId: string;
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostOperationRequest {
    orgId: string;
    workspaceId: string;
    solutionId: string;
    action: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostOperationActionEnum;
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRequest;
}

/**
 * SolutionsApi - interface
 * 
 * @export
 * @interface SolutionsApiInterface
 */
export interface SolutionsApiInterface {
    /**
     * Asynchronously generates AI-powered solutions based on the feedback associated with an opportunity
     * @summary Generate solutions for an opportunity
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} opportunityId Opportunity ID
     * @param {OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequest} [organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionsApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Asynchronously generates AI-powered solutions based on the feedback associated with an opportunity
     * Generate solutions for an opportunity
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Lists all solutions in the specified workspace
     * @summary List solutions
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionsApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner>>>;

    /**
     * Lists all solutions in the specified workspace
     * List solutions
     */
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner>>;

    /**
     * Creates a new solution in the specified workspace
     * @summary Create new solution
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest} organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionsApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner>>;

    /**
     * Creates a new solution in the specified workspace
     * Create new solution
     */
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner>;

    /**
     * Deletes a specific solution by ID
     * @summary Delete solution
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} solutionId Solution ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionsApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete200Response>>;

    /**
     * Deletes a specific solution by ID
     * Delete solution
     */
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete200Response>;

    /**
     * Retrieves a specific solution by ID
     * @summary Get solution by ID
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} solutionId Solution ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionsApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner>>;

    /**
     * Retrieves a specific solution by ID
     * Get solution by ID
     */
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner>;

    /**
     * Updates a specific solution by ID
     * @summary Update solution
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} solutionId Solution ID
     * @param {OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest} organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionsApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner>>;

    /**
     * Updates a specific solution by ID
     * Update solution
     */
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPut(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner>;

    /**
     * Add or remove relationships between a solution and other entities (opportunities, outcomes, or feedback)
     * @summary Manage solution relationships
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} solutionId Solution ID
     * @param {'add' | 'remove'} action Action to perform on relationships
     * @param {OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRequest} organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionsApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Add or remove relationships between a solution and other entities (opportunities, outcomes, or feedback)
     * Manage solution relationships
     */
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class SolutionsApi extends runtime.BaseAPI implements SolutionsApiInterface {

    /**
     * Asynchronously generates AI-powered solutions based on the feedback associated with an opportunity
     * Generate solutions for an opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPost().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}/generate-solutions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Asynchronously generates AI-powered solutions based on the feedback associated with an opportunity
     * Generate solutions for an opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Lists all solutions in the specified workspace
     * List solutions
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInnerFromJSON));
    }

    /**
     * Lists all solutions in the specified workspace
     * List solutions
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner>> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdSolutionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new solution in the specified workspace
     * Create new solution
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Creates a new solution in the specified workspace
     * Create new solution
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific solution by ID
     * Delete solution
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete().'
            );
        }

        if (requestParameters['solutionId'] == null) {
            throw new runtime.RequiredError(
                'solutionId',
                'Required parameter "solutionId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions/{solutionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"solutionId"}}`, encodeURIComponent(String(requestParameters['solutionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific solution by ID
     * Delete solution
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific solution by ID
     * Get solution by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGet().'
            );
        }

        if (requestParameters['solutionId'] == null) {
            throw new runtime.RequiredError(
                'solutionId',
                'Required parameter "solutionId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions/{solutionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"solutionId"}}`, encodeURIComponent(String(requestParameters['solutionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific solution by ID
     * Get solution by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific solution by ID
     * Update solution
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPut().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPut().'
            );
        }

        if (requestParameters['solutionId'] == null) {
            throw new runtime.RequiredError(
                'solutionId',
                'Required parameter "solutionId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPut().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions/{solutionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"solutionId"}}`, encodeURIComponent(String(requestParameters['solutionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Updates a specific solution by ID
     * Update solution
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPut(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add or remove relationships between a solution and other entities (opportunities, outcomes, or feedback)
     * Manage solution relationships
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['solutionId'] == null) {
            throw new runtime.RequiredError(
                'solutionId',
                'Required parameter "solutionId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions/{solutionId}/relationships/{action}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"solutionId"}}`, encodeURIComponent(String(requestParameters['solutionId']))).replace(`{${"action"}}`, encodeURIComponent(String(requestParameters['action']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove relationships between a solution and other entities (opportunities, outcomes, or feedback)
     * Manage solution relationships
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostOperationActionEnum = {
    Add: 'add',
    Remove: 'remove'
} as const;
export type OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostOperationActionEnum = typeof OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostOperationActionEnum[keyof typeof OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdRelationshipsActionPostOperationActionEnum];
