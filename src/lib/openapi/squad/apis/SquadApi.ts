/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: help@meetsquad.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  CreateFeedback200Response,
  CreateFeedbackDocumentPayload,
  CreateFeedbackDocumentResponse,
  CreateFeedbackRequest,
  CreateInsight200Response,
  CreateInsightRequest,
  CreateIntegration200Response,
  CreateIntegrationPayload,
  CreateKnowledgeFromPdf200Response,
  CreateKnowledgeFromPdfPayload,
  CreateKnowledgeFromUrlPayload,
  CreateKnowledgePayload,
  CreateMetric200Response,
  CreateMetricPayload,
  CreateOpportunity429Response,
  CreateOpportunityPayload,
  CreateOrganisation200Response,
  CreateOrganisationPayload,
  CreateOutcome200Response,
  CreateOutcome400Response,
  CreateOutcomePayload,
  CreateSolution200Response,
  CreateSolutionPayload,
  CreateTopic200Response,
  CreateTopicPayload,
  CreateWorkspace200Response,
  CreateWorkspacePayload,
  DeleteFeedback200Response,
  DeleteInsight200Response,
  DeleteKnowledge200Response,
  DeleteMetric200Response,
  DeleteOpportunity200Response,
  DeleteOrganisation200Response,
  DeleteOutcome200Response,
  DeleteSolution200Response,
  DeleteTopic200Response,
  DeleteWorkspace200Response,
  FeedbackArrayResponse,
  GenerateMockInsights200Response,
  GetOrganisationStatus200Response,
  GetOutcome400Response,
  GetOutcome404Response,
  InsightArrayResponse,
  KnowledgeArrayResponse,
  ListIntegrations200Response,
  ListMetrics200Response,
  ListOrganisations200Response,
  ListOutcomes200Response,
  ListOutcomes401Response,
  ListOutcomes403Response,
  ListOutcomes500Response,
  ListSolutions200Response,
  ListTopics200Response,
  ListWorkspaces200Response,
  MetricRelationshipsPayload,
  OnboardingPayload,
  OnboardingResponse,
  OnboardingV2Payload,
  OpportunityArrayResponse,
  OpportunityRelationshipsPayload,
  OpportunityResponse,
  OutcomeRelationshipsPayload,
  PrioritiseSolutionsRequest,
  ProcessDataIngress201Response,
  ProcessTextProxy200Response,
  ProcessTextProxyRequest,
  RelationshipAction,
  SimilaritySearch200Response,
  SimilaritySearchRequest,
  SingleKnowledgeResponse,
  SolutionRelationshipsPayload,
  SyncIntegration202Response,
  TrackTokenUsageRequest,
  UpdateIntegrationPayload,
  UpdateKnowledgePayload,
  UpdateMetricPayload,
  UpdateOpportunityPayload,
  UpdateOrganisationPayload,
  UpdateOutcomePayload,
  UpdateSolutionPayload,
  UpdateStrategyDocumentPayload,
  UpdateTopicPayload,
  UpdateWorkspacePayload,
  WhoAmIResponse,
} from '../models/index.js';
import {
    CreateFeedback200ResponseFromJSON,
    CreateFeedback200ResponseToJSON,
    CreateFeedbackDocumentPayloadFromJSON,
    CreateFeedbackDocumentPayloadToJSON,
    CreateFeedbackDocumentResponseFromJSON,
    CreateFeedbackDocumentResponseToJSON,
    CreateFeedbackRequestFromJSON,
    CreateFeedbackRequestToJSON,
    CreateInsight200ResponseFromJSON,
    CreateInsight200ResponseToJSON,
    CreateInsightRequestFromJSON,
    CreateInsightRequestToJSON,
    CreateIntegration200ResponseFromJSON,
    CreateIntegration200ResponseToJSON,
    CreateIntegrationPayloadFromJSON,
    CreateIntegrationPayloadToJSON,
    CreateKnowledgeFromPdf200ResponseFromJSON,
    CreateKnowledgeFromPdf200ResponseToJSON,
    CreateKnowledgeFromPdfPayloadFromJSON,
    CreateKnowledgeFromPdfPayloadToJSON,
    CreateKnowledgeFromUrlPayloadFromJSON,
    CreateKnowledgeFromUrlPayloadToJSON,
    CreateKnowledgePayloadFromJSON,
    CreateKnowledgePayloadToJSON,
    CreateMetric200ResponseFromJSON,
    CreateMetric200ResponseToJSON,
    CreateMetricPayloadFromJSON,
    CreateMetricPayloadToJSON,
    CreateOpportunity429ResponseFromJSON,
    CreateOpportunity429ResponseToJSON,
    CreateOpportunityPayloadFromJSON,
    CreateOpportunityPayloadToJSON,
    CreateOrganisation200ResponseFromJSON,
    CreateOrganisation200ResponseToJSON,
    CreateOrganisationPayloadFromJSON,
    CreateOrganisationPayloadToJSON,
    CreateOutcome200ResponseFromJSON,
    CreateOutcome200ResponseToJSON,
    CreateOutcome400ResponseFromJSON,
    CreateOutcome400ResponseToJSON,
    CreateOutcomePayloadFromJSON,
    CreateOutcomePayloadToJSON,
    CreateSolution200ResponseFromJSON,
    CreateSolution200ResponseToJSON,
    CreateSolutionPayloadFromJSON,
    CreateSolutionPayloadToJSON,
    CreateTopic200ResponseFromJSON,
    CreateTopic200ResponseToJSON,
    CreateTopicPayloadFromJSON,
    CreateTopicPayloadToJSON,
    CreateWorkspace200ResponseFromJSON,
    CreateWorkspace200ResponseToJSON,
    CreateWorkspacePayloadFromJSON,
    CreateWorkspacePayloadToJSON,
    DeleteFeedback200ResponseFromJSON,
    DeleteFeedback200ResponseToJSON,
    DeleteInsight200ResponseFromJSON,
    DeleteInsight200ResponseToJSON,
    DeleteKnowledge200ResponseFromJSON,
    DeleteKnowledge200ResponseToJSON,
    DeleteMetric200ResponseFromJSON,
    DeleteMetric200ResponseToJSON,
    DeleteOpportunity200ResponseFromJSON,
    DeleteOpportunity200ResponseToJSON,
    DeleteOrganisation200ResponseFromJSON,
    DeleteOrganisation200ResponseToJSON,
    DeleteOutcome200ResponseFromJSON,
    DeleteOutcome200ResponseToJSON,
    DeleteSolution200ResponseFromJSON,
    DeleteSolution200ResponseToJSON,
    DeleteTopic200ResponseFromJSON,
    DeleteTopic200ResponseToJSON,
    DeleteWorkspace200ResponseFromJSON,
    DeleteWorkspace200ResponseToJSON,
    FeedbackArrayResponseFromJSON,
    FeedbackArrayResponseToJSON,
    GenerateMockInsights200ResponseFromJSON,
    GenerateMockInsights200ResponseToJSON,
    GetOrganisationStatus200ResponseFromJSON,
    GetOrganisationStatus200ResponseToJSON,
    GetOutcome400ResponseFromJSON,
    GetOutcome400ResponseToJSON,
    GetOutcome404ResponseFromJSON,
    GetOutcome404ResponseToJSON,
    InsightArrayResponseFromJSON,
    InsightArrayResponseToJSON,
    KnowledgeArrayResponseFromJSON,
    KnowledgeArrayResponseToJSON,
    ListIntegrations200ResponseFromJSON,
    ListIntegrations200ResponseToJSON,
    ListMetrics200ResponseFromJSON,
    ListMetrics200ResponseToJSON,
    ListOrganisations200ResponseFromJSON,
    ListOrganisations200ResponseToJSON,
    ListOutcomes200ResponseFromJSON,
    ListOutcomes200ResponseToJSON,
    ListOutcomes401ResponseFromJSON,
    ListOutcomes401ResponseToJSON,
    ListOutcomes403ResponseFromJSON,
    ListOutcomes403ResponseToJSON,
    ListOutcomes500ResponseFromJSON,
    ListOutcomes500ResponseToJSON,
    ListSolutions200ResponseFromJSON,
    ListSolutions200ResponseToJSON,
    ListTopics200ResponseFromJSON,
    ListTopics200ResponseToJSON,
    ListWorkspaces200ResponseFromJSON,
    ListWorkspaces200ResponseToJSON,
    MetricRelationshipsPayloadFromJSON,
    MetricRelationshipsPayloadToJSON,
    OnboardingPayloadFromJSON,
    OnboardingPayloadToJSON,
    OnboardingResponseFromJSON,
    OnboardingResponseToJSON,
    OnboardingV2PayloadFromJSON,
    OnboardingV2PayloadToJSON,
    OpportunityArrayResponseFromJSON,
    OpportunityArrayResponseToJSON,
    OpportunityRelationshipsPayloadFromJSON,
    OpportunityRelationshipsPayloadToJSON,
    OpportunityResponseFromJSON,
    OpportunityResponseToJSON,
    OutcomeRelationshipsPayloadFromJSON,
    OutcomeRelationshipsPayloadToJSON,
    PrioritiseSolutionsRequestFromJSON,
    PrioritiseSolutionsRequestToJSON,
    ProcessDataIngress201ResponseFromJSON,
    ProcessDataIngress201ResponseToJSON,
    ProcessTextProxy200ResponseFromJSON,
    ProcessTextProxy200ResponseToJSON,
    ProcessTextProxyRequestFromJSON,
    ProcessTextProxyRequestToJSON,
    RelationshipActionFromJSON,
    RelationshipActionToJSON,
    SimilaritySearch200ResponseFromJSON,
    SimilaritySearch200ResponseToJSON,
    SimilaritySearchRequestFromJSON,
    SimilaritySearchRequestToJSON,
    SingleKnowledgeResponseFromJSON,
    SingleKnowledgeResponseToJSON,
    SolutionRelationshipsPayloadFromJSON,
    SolutionRelationshipsPayloadToJSON,
    SyncIntegration202ResponseFromJSON,
    SyncIntegration202ResponseToJSON,
    TrackTokenUsageRequestFromJSON,
    TrackTokenUsageRequestToJSON,
    UpdateIntegrationPayloadFromJSON,
    UpdateIntegrationPayloadToJSON,
    UpdateKnowledgePayloadFromJSON,
    UpdateKnowledgePayloadToJSON,
    UpdateMetricPayloadFromJSON,
    UpdateMetricPayloadToJSON,
    UpdateOpportunityPayloadFromJSON,
    UpdateOpportunityPayloadToJSON,
    UpdateOrganisationPayloadFromJSON,
    UpdateOrganisationPayloadToJSON,
    UpdateOutcomePayloadFromJSON,
    UpdateOutcomePayloadToJSON,
    UpdateSolutionPayloadFromJSON,
    UpdateSolutionPayloadToJSON,
    UpdateStrategyDocumentPayloadFromJSON,
    UpdateStrategyDocumentPayloadToJSON,
    UpdateTopicPayloadFromJSON,
    UpdateTopicPayloadToJSON,
    UpdateWorkspacePayloadFromJSON,
    UpdateWorkspacePayloadToJSON,
    WhoAmIResponseFromJSON,
    WhoAmIResponseToJSON,
} from '../models/index.js';

export interface CreateFeedbackOperationRequest {
    orgId: string;
    workspaceId: string;
    createFeedbackRequest: CreateFeedbackRequest;
}

export interface CreateInsightOperationRequest {
    orgId: string;
    workspaceId: string;
    createInsightRequest: CreateInsightRequest;
}

export interface CreateIntegrationRequest {
    orgId: string;
    workspaceId: string;
    createIntegrationPayload: CreateIntegrationPayload;
}

export interface CreateKnowledgeRequest {
    orgId: string;
    workspaceId: string;
    createKnowledgePayload: CreateKnowledgePayload;
}

export interface CreateKnowledgeFromPdfRequest {
    orgId: string;
    workspaceId: string;
    createKnowledgeFromPdfPayload: CreateKnowledgeFromPdfPayload;
}

export interface CreateKnowledgeFromUrlRequest {
    orgId: string;
    workspaceId: string;
    createKnowledgeFromUrlPayload: CreateKnowledgeFromUrlPayload;
}

export interface CreateMetricRequest {
    orgId: string;
    workspaceId: string;
    createMetricPayload: CreateMetricPayload;
}

export interface CreateOpportunityRequest {
    orgId: string;
    workspaceId: string;
    createOpportunityPayload: CreateOpportunityPayload;
}

export interface CreateOrganisationRequest {
    createOrganisationPayload: CreateOrganisationPayload;
}

export interface CreateOutcomeRequest {
    orgId: string;
    workspaceId: string;
    createOutcomePayload: CreateOutcomePayload;
}

export interface CreateSolutionRequest {
    orgId: string;
    workspaceId: string;
    createSolutionPayload: CreateSolutionPayload;
}

export interface CreateTopicRequest {
    orgId: string;
    workspaceId: string;
    createTopicPayload: CreateTopicPayload;
}

export interface CreateWorkspaceRequest {
    orgId: string;
    createWorkspacePayload: CreateWorkspacePayload;
}

export interface DeleteFeedbackRequest {
    orgId: string;
    workspaceId: string;
    feedbackId: string;
}

export interface DeleteInsightRequest {
    orgId: string;
    workspaceId: string;
    insightId: string;
}

export interface DeleteIntegrationRequest {
    orgId: string;
    workspaceId: string;
    integrationId: number;
}

export interface DeleteKnowledgeRequest {
    orgId: string;
    workspaceId: string;
    knowledgeId: string;
}

export interface DeleteMetricRequest {
    orgId: string;
    workspaceId: string;
    metricId: string;
}

export interface DeleteOpportunityRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
}

export interface DeleteOrganisationRequest {
    orgId: string;
}

export interface DeleteOutcomeRequest {
    orgId: string;
    workspaceId: string;
    outcomeId: string;
}

export interface DeleteSolutionRequest {
    orgId: string;
    workspaceId: string;
    solutionId: string;
}

export interface DeleteTopicRequest {
    orgId: string;
    workspaceId: string;
    topicId: string;
}

export interface DeleteWorkspaceRequest {
    orgId: string;
    workspaceId: string;
}

export interface GenerateMockInsightsRequest {
    orgId: string;
    workspaceId: string;
}

export interface GenerateSolutionsRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
}

export interface GetFeedbackRequest {
    orgId: string;
    workspaceId: string;
    feedbackId: string;
    relationships?: string;
}

export interface GetInsightRequest {
    orgId: string;
    workspaceId: string;
    insightId: string;
    relationships?: string;
}

export interface GetIntegrationRequest {
    orgId: string;
    workspaceId: string;
    integrationId: number;
}

export interface GetKnowledgeRequest {
    orgId: string;
    workspaceId: string;
    knowledgeId: string;
}

export interface GetMetricRequest {
    orgId: string;
    workspaceId: string;
    metricId: string;
}

export interface GetOpportunityRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
    relationships?: string;
}

export interface GetOrganisationRequest {
    orgId: string;
}

export interface GetOrganisationStatusRequest {
    orgId: string;
}

export interface GetOutcomeRequest {
    orgId: string;
    workspaceId: string;
    outcomeId: string;
    relationships?: string;
}

export interface GetSolutionRequest {
    orgId: string;
    workspaceId: string;
    solutionId: string;
    relationships?: string;
}

export interface GetStrategyDocumentRequest {
    orgId: string;
    workspaceId: string;
    include?: string;
}

export interface GetTopicRequest {
    orgId: string;
    workspaceId: string;
    topicId: string;
}

export interface GetWorkspaceRequest {
    orgId: string;
    workspaceId: string;
}

export interface ListFeedbackRequest {
    orgId: string;
    workspaceId: string;
}

export interface ListInsightsRequest {
    orgId: string;
    workspaceId: string;
}

export interface ListIntegrationsRequest {
    orgId: string;
    workspaceId: string;
}

export interface ListKnowledgeRequest {
    orgId: string;
    workspaceId: string;
}

export interface ListMetricsRequest {
    orgId: string;
    workspaceId: string;
    outcomeId?: string;
}

export interface ListOpportunitiesRequest {
    orgId: string;
    workspaceId: string;
}

export interface ListOutcomesRequest {
    orgId: string;
    workspaceId: string;
}

export interface ListSolutionsRequest {
    orgId: string;
    workspaceId: string;
    built?: ListSolutionsBuiltEnum;
    status?: string;
}

export interface ListTopicsRequest {
    orgId: string;
    workspaceId: string;
}

export interface ListWorkspacesRequest {
    orgId: string;
}

export interface ManageMetricRelationshipsRequest {
    orgId: string;
    workspaceId: string;
    metricId: string;
    action: RelationshipAction;
    metricRelationshipsPayload: MetricRelationshipsPayload;
}

export interface ManageOpportunityRelationshipsRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
    action: RelationshipAction;
    opportunityRelationshipsPayload: OpportunityRelationshipsPayload;
}

export interface ManageOutcomeRelationshipsRequest {
    orgId: string;
    workspaceId: string;
    outcomeId: string;
    action: RelationshipAction;
    outcomeRelationshipsPayload: OutcomeRelationshipsPayload;
}

export interface ManageSolutionRelationshipsRequest {
    orgId: string;
    workspaceId: string;
    solutionId: string;
    action: RelationshipAction;
    solutionRelationshipsPayload: SolutionRelationshipsPayload;
}

export interface MarkAllOpportunityInsightsSeenRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
}

export interface OnboardOrganisationRequest {
    onboardingPayload?: OnboardingPayload;
}

export interface OnboardWorkspaceV2Request {
    orgId: string;
    workspaceId: string;
    onboardingV2Payload?: OnboardingV2Payload;
}

export interface PrioritiseSolutionsOperationRequest {
    orgId: string;
    workspaceId: string;
    prioritiseSolutionsRequest: PrioritiseSolutionsRequest;
}

export interface ProcessDataIngressRequest {
    body: string;
}

export interface ProcessDataIngressWithSourceRequest {
    feedbackSource: string;
    body: string;
}

export interface ProcessTextProxyOperationRequest {
    orgId: string;
    workspaceId: string;
    processTextProxyRequest: ProcessTextProxyRequest;
}

export interface ProcessWorkspaceDataIngressRequest {
    orgId: string;
    workspaceId: string;
    body: string;
}

export interface ProcessWorkspaceDataIngressWithSourceRequest {
    orgId: string;
    workspaceId: string;
    feedbackSource: string;
    body: string;
}

export interface SimilaritySearchOperationRequest {
    orgId: string;
    workspaceId: string;
    similaritySearchRequest: SimilaritySearchRequest;
}

export interface SyncIntegrationRequest {
    orgId: string;
    workspaceId: string;
    integrationId: number;
}

export interface TrackTokenUsageOperationRequest {
    orgId: string;
    workspaceId: string;
    trackTokenUsageRequest: TrackTokenUsageRequest;
}

export interface UpdateIntegrationRequest {
    orgId: string;
    workspaceId: string;
    integrationId: number;
    updateIntegrationPayload: UpdateIntegrationPayload;
}

export interface UpdateKnowledgeRequest {
    orgId: string;
    workspaceId: string;
    knowledgeId: string;
    updateKnowledgePayload: UpdateKnowledgePayload;
}

export interface UpdateMetricRequest {
    orgId: string;
    workspaceId: string;
    metricId: string;
    updateMetricPayload: UpdateMetricPayload;
}

export interface UpdateOnboardingRequest {
    orgId: string;
    body?: OnboardingPayload;
}

export interface UpdateOpportunityRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
    updateOpportunityPayload: UpdateOpportunityPayload;
}

export interface UpdateOrganisationRequest {
    orgId: string;
    updateOrganisationPayload: UpdateOrganisationPayload;
}

export interface UpdateOutcomeRequest {
    orgId: string;
    workspaceId: string;
    outcomeId: string;
    updateOutcomePayload: UpdateOutcomePayload;
}

export interface UpdateSolutionRequest {
    orgId: string;
    workspaceId: string;
    solutionId: string;
    updateSolutionPayload: UpdateSolutionPayload;
}

export interface UpdateTopicRequest {
    orgId: string;
    workspaceId: string;
    topicId: string;
    updateTopicPayload: UpdateTopicPayload;
}

export interface UpdateWorkspaceRequest {
    orgId: string;
    workspaceId: string;
    updateWorkspacePayload: UpdateWorkspacePayload;
}

export interface UploadFeedbackDocumentRequest {
    orgId: string;
    workspaceId: string;
    createFeedbackDocumentPayload: CreateFeedbackDocumentPayload;
}

/**
 * 
 */
export class SquadApi extends runtime.BaseAPI {

    /**
     * Creates a new feedback item in the specified workspace and automatically queues it for processing
     * Create new feedback
     */
    async createFeedbackRaw(requestParameters: CreateFeedbackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateFeedback200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createFeedback().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createFeedback().'
            );
        }

        if (requestParameters['createFeedbackRequest'] == null) {
            throw new runtime.RequiredError(
                'createFeedbackRequest',
                'Required parameter "createFeedbackRequest" was null or undefined when calling createFeedback().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFeedbackRequestToJSON(requestParameters['createFeedbackRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateFeedback200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new feedback item in the specified workspace and automatically queues it for processing
     * Create new feedback
     */
    async createFeedback(requestParameters: CreateFeedbackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateFeedback200Response> {
        const response = await this.createFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new insight item in the specified workspace
     * Create new insight
     */
    async createInsightRaw(requestParameters: CreateInsightOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateInsight200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createInsight().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createInsight().'
            );
        }

        if (requestParameters['createInsightRequest'] == null) {
            throw new runtime.RequiredError(
                'createInsightRequest',
                'Required parameter "createInsightRequest" was null or undefined when calling createInsight().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/insights`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInsightRequestToJSON(requestParameters['createInsightRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateInsight200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new insight item in the specified workspace
     * Create new insight
     */
    async createInsight(requestParameters: CreateInsightOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateInsight200Response> {
        const response = await this.createInsightRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new integration for the workspace, storing any secrets securely in AWS Secrets Manager
     * Create a new integration
     */
    async createIntegrationRaw(requestParameters: CreateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateIntegration200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createIntegration().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createIntegration().'
            );
        }

        if (requestParameters['createIntegrationPayload'] == null) {
            throw new runtime.RequiredError(
                'createIntegrationPayload',
                'Required parameter "createIntegrationPayload" was null or undefined when calling createIntegration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{orgId}/workspace/{workspaceId}/integration`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateIntegrationPayloadToJSON(requestParameters['createIntegrationPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateIntegration200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new integration for the workspace, storing any secrets securely in AWS Secrets Manager
     * Create a new integration
     */
    async createIntegration(requestParameters: CreateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateIntegration200Response> {
        const response = await this.createIntegrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new piece of knowledge from provided text content
     * Create a new piece of knowledge
     */
    async createKnowledgeRaw(requestParameters: CreateKnowledgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SingleKnowledgeResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createKnowledge().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createKnowledge().'
            );
        }

        if (requestParameters['createKnowledgePayload'] == null) {
            throw new runtime.RequiredError(
                'createKnowledgePayload',
                'Required parameter "createKnowledgePayload" was null or undefined when calling createKnowledge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/knowledge`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateKnowledgePayloadToJSON(requestParameters['createKnowledgePayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SingleKnowledgeResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new piece of knowledge from provided text content
     * Create a new piece of knowledge
     */
    async createKnowledge(requestParameters: CreateKnowledgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SingleKnowledgeResponse> {
        const response = await this.createKnowledgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Extracts content from the provided PDF file and creates a new piece of knowledge
     * Create a new piece of knowledge from a PDF file
     */
    async createKnowledgeFromPdfRaw(requestParameters: CreateKnowledgeFromPdfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateKnowledgeFromPdf200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createKnowledgeFromPdf().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createKnowledgeFromPdf().'
            );
        }

        if (requestParameters['createKnowledgeFromPdfPayload'] == null) {
            throw new runtime.RequiredError(
                'createKnowledgeFromPdfPayload',
                'Required parameter "createKnowledgeFromPdfPayload" was null or undefined when calling createKnowledgeFromPdf().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/knowledge/source/pdf`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateKnowledgeFromPdfPayloadToJSON(requestParameters['createKnowledgeFromPdfPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateKnowledgeFromPdf200ResponseFromJSON(jsonValue));
    }

    /**
     * Extracts content from the provided PDF file and creates a new piece of knowledge
     * Create a new piece of knowledge from a PDF file
     */
    async createKnowledgeFromPdf(requestParameters: CreateKnowledgeFromPdfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateKnowledgeFromPdf200Response> {
        const response = await this.createKnowledgeFromPdfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches content from the provided URL and creates a new piece of knowledge
     * Create a new piece of knowledge from a URL
     */
    async createKnowledgeFromUrlRaw(requestParameters: CreateKnowledgeFromUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SingleKnowledgeResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createKnowledgeFromUrl().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createKnowledgeFromUrl().'
            );
        }

        if (requestParameters['createKnowledgeFromUrlPayload'] == null) {
            throw new runtime.RequiredError(
                'createKnowledgeFromUrlPayload',
                'Required parameter "createKnowledgeFromUrlPayload" was null or undefined when calling createKnowledgeFromUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/knowledge/source/url`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateKnowledgeFromUrlPayloadToJSON(requestParameters['createKnowledgeFromUrlPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SingleKnowledgeResponseFromJSON(jsonValue));
    }

    /**
     * Fetches content from the provided URL and creates a new piece of knowledge
     * Create a new piece of knowledge from a URL
     */
    async createKnowledgeFromUrl(requestParameters: CreateKnowledgeFromUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SingleKnowledgeResponse> {
        const response = await this.createKnowledgeFromUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new metric.
     * Create a new metric
     */
    async createMetricRaw(requestParameters: CreateMetricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMetric200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createMetric().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createMetric().'
            );
        }

        if (requestParameters['createMetricPayload'] == null) {
            throw new runtime.RequiredError(
                'createMetricPayload',
                'Required parameter "createMetricPayload" was null or undefined when calling createMetric().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/metrics`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMetricPayloadToJSON(requestParameters['createMetricPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMetric200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new metric.
     * Create a new metric
     */
    async createMetric(requestParameters: CreateMetricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMetric200Response> {
        const response = await this.createMetricRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new opportunity in the specified workspace
     * Create new opportunity
     */
    async createOpportunityRaw(requestParameters: CreateOpportunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpportunityResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createOpportunity().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createOpportunity().'
            );
        }

        if (requestParameters['createOpportunityPayload'] == null) {
            throw new runtime.RequiredError(
                'createOpportunityPayload',
                'Required parameter "createOpportunityPayload" was null or undefined when calling createOpportunity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOpportunityPayloadToJSON(requestParameters['createOpportunityPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpportunityResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new opportunity in the specified workspace
     * Create new opportunity
     */
    async createOpportunity(requestParameters: CreateOpportunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpportunityResponse> {
        const response = await this.createOpportunityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new organisation
     * Create new organisation
     */
    async createOrganisationRaw(requestParameters: CreateOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOrganisation200Response>> {
        if (requestParameters['createOrganisationPayload'] == null) {
            throw new runtime.RequiredError(
                'createOrganisationPayload',
                'Required parameter "createOrganisationPayload" was null or undefined when calling createOrganisation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganisationPayloadToJSON(requestParameters['createOrganisationPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOrganisation200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new organisation
     * Create new organisation
     */
    async createOrganisation(requestParameters: CreateOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOrganisation200Response> {
        const response = await this.createOrganisationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new outcome in the specified workspace
     * Create a new outcome
     */
    async createOutcomeRaw(requestParameters: CreateOutcomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOutcome200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createOutcome().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createOutcome().'
            );
        }

        if (requestParameters['createOutcomePayload'] == null) {
            throw new runtime.RequiredError(
                'createOutcomePayload',
                'Required parameter "createOutcomePayload" was null or undefined when calling createOutcome().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOutcomePayloadToJSON(requestParameters['createOutcomePayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOutcome200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new outcome in the specified workspace
     * Create a new outcome
     */
    async createOutcome(requestParameters: CreateOutcomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOutcome200Response> {
        const response = await this.createOutcomeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new solution in the specified workspace
     * Create new solution
     */
    async createSolutionRaw(requestParameters: CreateSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSolution200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createSolution().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createSolution().'
            );
        }

        if (requestParameters['createSolutionPayload'] == null) {
            throw new runtime.RequiredError(
                'createSolutionPayload',
                'Required parameter "createSolutionPayload" was null or undefined when calling createSolution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSolutionPayloadToJSON(requestParameters['createSolutionPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSolution200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new solution in the specified workspace
     * Create new solution
     */
    async createSolution(requestParameters: CreateSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSolution200Response> {
        const response = await this.createSolutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new topic in the specified workspace
     * Create new topic
     */
    async createTopicRaw(requestParameters: CreateTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTopic200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createTopic().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createTopic().'
            );
        }

        if (requestParameters['createTopicPayload'] == null) {
            throw new runtime.RequiredError(
                'createTopicPayload',
                'Required parameter "createTopicPayload" was null or undefined when calling createTopic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTopicPayloadToJSON(requestParameters['createTopicPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTopic200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new topic in the specified workspace
     * Create new topic
     */
    async createTopic(requestParameters: CreateTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTopic200Response> {
        const response = await this.createTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new workspace for the specified organization
     * Create new workspace
     */
    async createWorkspaceRaw(requestParameters: CreateWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateWorkspace200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createWorkspace().'
            );
        }

        if (requestParameters['createWorkspacePayload'] == null) {
            throw new runtime.RequiredError(
                'createWorkspacePayload',
                'Required parameter "createWorkspacePayload" was null or undefined when calling createWorkspace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWorkspacePayloadToJSON(requestParameters['createWorkspacePayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateWorkspace200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new workspace for the specified organization
     * Create new workspace
     */
    async createWorkspace(requestParameters: CreateWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateWorkspace200Response> {
        const response = await this.createWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific feedback by ID
     * Delete feedback
     */
    async deleteFeedbackRaw(requestParameters: DeleteFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFeedback200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteFeedback().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteFeedback().'
            );
        }

        if (requestParameters['feedbackId'] == null) {
            throw new runtime.RequiredError(
                'feedbackId',
                'Required parameter "feedbackId" was null or undefined when calling deleteFeedback().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback/{feedbackId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"feedbackId"}}`, encodeURIComponent(String(requestParameters['feedbackId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteFeedback200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific feedback by ID
     * Delete feedback
     */
    async deleteFeedback(requestParameters: DeleteFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFeedback200Response> {
        const response = await this.deleteFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific insight by ID
     * Delete insight
     */
    async deleteInsightRaw(requestParameters: DeleteInsightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteInsight200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteInsight().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteInsight().'
            );
        }

        if (requestParameters['insightId'] == null) {
            throw new runtime.RequiredError(
                'insightId',
                'Required parameter "insightId" was null or undefined when calling deleteInsight().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/insights/{insightId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"insightId"}}`, encodeURIComponent(String(requestParameters['insightId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteInsight200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific insight by ID
     * Delete insight
     */
    async deleteInsight(requestParameters: DeleteInsightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteInsight200Response> {
        const response = await this.deleteInsightRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an integration and cleans up any associated secrets
     * Delete an integration
     */
    async deleteIntegrationRaw(requestParameters: DeleteIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteIntegration().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteIntegration().'
            );
        }

        if (requestParameters['integrationId'] == null) {
            throw new runtime.RequiredError(
                'integrationId',
                'Required parameter "integrationId" was null or undefined when calling deleteIntegration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{orgId}/workspace/{workspaceId}/integration/{integrationId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters['integrationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an integration and cleans up any associated secrets
     * Delete an integration
     */
    async deleteIntegration(requestParameters: DeleteIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIntegrationRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a specific piece of knowledge by its ID
     * Delete a piece of knowledge
     */
    async deleteKnowledgeRaw(requestParameters: DeleteKnowledgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteKnowledge200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteKnowledge().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteKnowledge().'
            );
        }

        if (requestParameters['knowledgeId'] == null) {
            throw new runtime.RequiredError(
                'knowledgeId',
                'Required parameter "knowledgeId" was null or undefined when calling deleteKnowledge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/knowledge/{knowledgeId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"knowledgeId"}}`, encodeURIComponent(String(requestParameters['knowledgeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteKnowledge200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific piece of knowledge by its ID
     * Delete a piece of knowledge
     */
    async deleteKnowledge(requestParameters: DeleteKnowledgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteKnowledge200Response> {
        const response = await this.deleteKnowledgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an existing metric and cleans up associated resources.
     * Delete a metric
     */
    async deleteMetricRaw(requestParameters: DeleteMetricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteMetric200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteMetric().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteMetric().'
            );
        }

        if (requestParameters['metricId'] == null) {
            throw new runtime.RequiredError(
                'metricId',
                'Required parameter "metricId" was null or undefined when calling deleteMetric().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/metrics/{MetricId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"MetricId"}}`, encodeURIComponent(String(requestParameters['metricId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteMetric200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an existing metric and cleans up associated resources.
     * Delete a metric
     */
    async deleteMetric(requestParameters: DeleteMetricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteMetric200Response> {
        const response = await this.deleteMetricRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific opportunity by ID
     * Delete opportunity
     */
    async deleteOpportunityRaw(requestParameters: DeleteOpportunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOpportunity200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteOpportunity().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteOpportunity().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling deleteOpportunity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteOpportunity200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific opportunity by ID
     * Delete opportunity
     */
    async deleteOpportunity(requestParameters: DeleteOpportunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOpportunity200Response> {
        const response = await this.deleteOpportunityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific organisation by ID
     * Delete organisation
     */
    async deleteOrganisationRaw(requestParameters: DeleteOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOrganisation200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteOrganisation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteOrganisation200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific organisation by ID
     * Delete organisation
     */
    async deleteOrganisation(requestParameters: DeleteOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOrganisation200Response> {
        const response = await this.deleteOrganisationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing outcome by its ID
     * Delete an outcome
     */
    async deleteOutcomeRaw(requestParameters: DeleteOutcomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOutcome200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteOutcome().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteOutcome().'
            );
        }

        if (requestParameters['outcomeId'] == null) {
            throw new runtime.RequiredError(
                'outcomeId',
                'Required parameter "outcomeId" was null or undefined when calling deleteOutcome().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes/{outcomeId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"outcomeId"}}`, encodeURIComponent(String(requestParameters['outcomeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteOutcome200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete an existing outcome by its ID
     * Delete an outcome
     */
    async deleteOutcome(requestParameters: DeleteOutcomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOutcome200Response> {
        const response = await this.deleteOutcomeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific solution by ID
     * Delete solution
     */
    async deleteSolutionRaw(requestParameters: DeleteSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSolution200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteSolution().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteSolution().'
            );
        }

        if (requestParameters['solutionId'] == null) {
            throw new runtime.RequiredError(
                'solutionId',
                'Required parameter "solutionId" was null or undefined when calling deleteSolution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions/{solutionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"solutionId"}}`, encodeURIComponent(String(requestParameters['solutionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteSolution200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific solution by ID
     * Delete solution
     */
    async deleteSolution(requestParameters: DeleteSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSolution200Response> {
        const response = await this.deleteSolutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific topic by ID
     * Delete topic
     */
    async deleteTopicRaw(requestParameters: DeleteTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteTopic200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteTopic().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteTopic().'
            );
        }

        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling deleteTopic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics/{topicId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"topicId"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteTopic200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific topic by ID
     * Delete topic
     */
    async deleteTopic(requestParameters: DeleteTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteTopic200Response> {
        const response = await this.deleteTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific workspace by ID
     * Delete workspace
     */
    async deleteWorkspaceRaw(requestParameters: DeleteWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteWorkspace200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteWorkspace().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteWorkspace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteWorkspace200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific workspace by ID
     * Delete workspace
     */
    async deleteWorkspace(requestParameters: DeleteWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteWorkspace200Response> {
        const response = await this.deleteWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates mock insights for testing purposes
     * Generate mock insights
     */
    async generateMockInsightsRaw(requestParameters: GenerateMockInsightsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateMockInsights200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling generateMockInsights().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling generateMockInsights().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/mock-insights`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateMockInsights200ResponseFromJSON(jsonValue));
    }

    /**
     * Generates mock insights for testing purposes
     * Generate mock insights
     */
    async generateMockInsights(requestParameters: GenerateMockInsightsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateMockInsights200Response> {
        const response = await this.generateMockInsightsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Asynchronously generates AI-powered solutions based on the insight associated with an opportunity
     * Generate solutions for an opportunity
     */
    async generateSolutionsRaw(requestParameters: GenerateSolutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling generateSolutions().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling generateSolutions().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling generateSolutions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}/generate-solutions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Asynchronously generates AI-powered solutions based on the insight associated with an opportunity
     * Generate solutions for an opportunity
     */
    async generateSolutions(requestParameters: GenerateSolutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.generateSolutionsRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific feedback by ID
     * Get feedback by ID
     */
    async getFeedbackRaw(requestParameters: GetFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateFeedback200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getFeedback().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getFeedback().'
            );
        }

        if (requestParameters['feedbackId'] == null) {
            throw new runtime.RequiredError(
                'feedbackId',
                'Required parameter "feedbackId" was null or undefined when calling getFeedback().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['relationships'] != null) {
            queryParameters['relationships'] = requestParameters['relationships'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback/{feedbackId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"feedbackId"}}`, encodeURIComponent(String(requestParameters['feedbackId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateFeedback200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific feedback by ID
     * Get feedback by ID
     */
    async getFeedback(requestParameters: GetFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateFeedback200Response> {
        const response = await this.getFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific insight by ID
     * Get insight by ID
     */
    async getInsightRaw(requestParameters: GetInsightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateInsight200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getInsight().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getInsight().'
            );
        }

        if (requestParameters['insightId'] == null) {
            throw new runtime.RequiredError(
                'insightId',
                'Required parameter "insightId" was null or undefined when calling getInsight().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['relationships'] != null) {
            queryParameters['relationships'] = requestParameters['relationships'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/insights/{insightId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"insightId"}}`, encodeURIComponent(String(requestParameters['insightId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateInsight200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific insight by ID
     * Get insight by ID
     */
    async getInsight(requestParameters: GetInsightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateInsight200Response> {
        const response = await this.getInsightRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a single integration by its ID
     * Get integration by ID
     */
    async getIntegrationRaw(requestParameters: GetIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateIntegration200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getIntegration().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getIntegration().'
            );
        }

        if (requestParameters['integrationId'] == null) {
            throw new runtime.RequiredError(
                'integrationId',
                'Required parameter "integrationId" was null or undefined when calling getIntegration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{orgId}/workspace/{workspaceId}/integration/{integrationId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters['integrationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateIntegration200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a single integration by its ID
     * Get integration by ID
     */
    async getIntegration(requestParameters: GetIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateIntegration200Response> {
        const response = await this.getIntegrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific piece of knowledge by its ID
     * Get a piece of knowledge by ID
     */
    async getKnowledgeRaw(requestParameters: GetKnowledgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SingleKnowledgeResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getKnowledge().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getKnowledge().'
            );
        }

        if (requestParameters['knowledgeId'] == null) {
            throw new runtime.RequiredError(
                'knowledgeId',
                'Required parameter "knowledgeId" was null or undefined when calling getKnowledge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/knowledge/{knowledgeId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"knowledgeId"}}`, encodeURIComponent(String(requestParameters['knowledgeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SingleKnowledgeResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific piece of knowledge by its ID
     * Get a piece of knowledge by ID
     */
    async getKnowledge(requestParameters: GetKnowledgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SingleKnowledgeResponse> {
        const response = await this.getKnowledgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific metric by ID.
     * Get a metric by ID
     */
    async getMetricRaw(requestParameters: GetMetricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMetric200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getMetric().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getMetric().'
            );
        }

        if (requestParameters['metricId'] == null) {
            throw new runtime.RequiredError(
                'metricId',
                'Required parameter "metricId" was null or undefined when calling getMetric().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/metrics/{MetricId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"MetricId"}}`, encodeURIComponent(String(requestParameters['metricId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMetric200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific metric by ID.
     * Get a metric by ID
     */
    async getMetric(requestParameters: GetMetricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMetric200Response> {
        const response = await this.getMetricRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific opportunity by ID
     * Get opportunity by ID
     */
    async getOpportunityRaw(requestParameters: GetOpportunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpportunityResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getOpportunity().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getOpportunity().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling getOpportunity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['relationships'] != null) {
            queryParameters['relationships'] = requestParameters['relationships'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpportunityResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific opportunity by ID
     * Get opportunity by ID
     */
    async getOpportunity(requestParameters: GetOpportunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpportunityResponse> {
        const response = await this.getOpportunityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific organisation by ID
     * Get organisation by ID
     */
    async getOrganisationRaw(requestParameters: GetOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOrganisation200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getOrganisation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOrganisation200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific organisation by ID
     * Get organisation by ID
     */
    async getOrganisation(requestParameters: GetOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOrganisation200Response> {
        const response = await this.getOrganisationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the current status and subscription information of an organization
     * Get organization status
     */
    async getOrganisationStatusRaw(requestParameters: GetOrganisationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganisationStatus200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getOrganisationStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/status`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganisationStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the current status and subscription information of an organization
     * Get organization status
     */
    async getOrganisationStatus(requestParameters: GetOrganisationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganisationStatus200Response> {
        const response = await this.getOrganisationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific outcome by its ID
     * Get an outcome by ID
     */
    async getOutcomeRaw(requestParameters: GetOutcomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOutcome200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getOutcome().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getOutcome().'
            );
        }

        if (requestParameters['outcomeId'] == null) {
            throw new runtime.RequiredError(
                'outcomeId',
                'Required parameter "outcomeId" was null or undefined when calling getOutcome().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['relationships'] != null) {
            queryParameters['relationships'] = requestParameters['relationships'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes/{outcomeId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"outcomeId"}}`, encodeURIComponent(String(requestParameters['outcomeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOutcome200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific outcome by its ID
     * Get an outcome by ID
     */
    async getOutcome(requestParameters: GetOutcomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOutcome200Response> {
        const response = await this.getOutcomeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific solution by ID
     * Get solution by ID
     */
    async getSolutionRaw(requestParameters: GetSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSolution200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getSolution().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getSolution().'
            );
        }

        if (requestParameters['solutionId'] == null) {
            throw new runtime.RequiredError(
                'solutionId',
                'Required parameter "solutionId" was null or undefined when calling getSolution().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['relationships'] != null) {
            queryParameters['relationships'] = requestParameters['relationships'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions/{solutionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"solutionId"}}`, encodeURIComponent(String(requestParameters['solutionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSolution200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific solution by ID
     * Get solution by ID
     */
    async getSolution(requestParameters: GetSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSolution200Response> {
        const response = await this.getSolutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the strategy document for the specified workspace
     * Get strategy document
     */
    async getStrategyDocumentRaw(requestParameters: GetStrategyDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateStrategyDocumentPayload>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getStrategyDocument().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getStrategyDocument().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/strategy-document`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateStrategyDocumentPayloadFromJSON(jsonValue));
    }

    /**
     * Retrieves the strategy document for the specified workspace
     * Get strategy document
     */
    async getStrategyDocument(requestParameters: GetStrategyDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateStrategyDocumentPayload> {
        const response = await this.getStrategyDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific topic by ID
     * Get topic by ID
     */
    async getTopicRaw(requestParameters: GetTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTopic200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getTopic().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getTopic().'
            );
        }

        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling getTopic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics/{topicId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"topicId"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTopic200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific topic by ID
     * Get topic by ID
     */
    async getTopic(requestParameters: GetTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTopic200Response> {
        const response = await this.getTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific workspace by ID
     * Get workspace by ID
     */
    async getWorkspaceRaw(requestParameters: GetWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateWorkspace200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getWorkspace().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getWorkspace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateWorkspace200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific workspace by ID
     * Get workspace by ID
     */
    async getWorkspace(requestParameters: GetWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateWorkspace200Response> {
        const response = await this.getWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all feedback in the specified workspace
     * List feedback
     */
    async listFeedbackRaw(requestParameters: ListFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedbackArrayResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listFeedback().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listFeedback().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackArrayResponseFromJSON(jsonValue));
    }

    /**
     * Lists all feedback in the specified workspace
     * List feedback
     */
    async listFeedback(requestParameters: ListFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedbackArrayResponse> {
        const response = await this.listFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all insights in the specified workspace
     * List insights
     */
    async listInsightsRaw(requestParameters: ListInsightsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InsightArrayResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listInsights().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listInsights().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/insights`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InsightArrayResponseFromJSON(jsonValue));
    }

    /**
     * Lists all insights in the specified workspace
     * List insights
     */
    async listInsights(requestParameters: ListInsightsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InsightArrayResponse> {
        const response = await this.listInsightsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all integrations for the workspace
     * List all integrations
     */
    async listIntegrationsRaw(requestParameters: ListIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListIntegrations200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listIntegrations().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listIntegrations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{orgId}/workspace/{workspaceId}/integration`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListIntegrations200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all integrations for the workspace
     * List all integrations
     */
    async listIntegrations(requestParameters: ListIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListIntegrations200Response> {
        const response = await this.listIntegrationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all pieces of knowledge
     * List all pieces of knowledge
     */
    async listKnowledgeRaw(requestParameters: ListKnowledgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KnowledgeArrayResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listKnowledge().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listKnowledge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/knowledge`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KnowledgeArrayResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of all pieces of knowledge
     * List all pieces of knowledge
     */
    async listKnowledge(requestParameters: ListKnowledgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KnowledgeArrayResponse> {
        const response = await this.listKnowledgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists metrics for a workspace. Can optionally filter by outcome ID.
     * List metrics
     */
    async listMetricsRaw(requestParameters: ListMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListMetrics200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listMetrics().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listMetrics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['outcomeId'] != null) {
            queryParameters['outcomeId'] = requestParameters['outcomeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/metrics`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListMetrics200ResponseFromJSON(jsonValue));
    }

    /**
     * Lists metrics for a workspace. Can optionally filter by outcome ID.
     * List metrics
     */
    async listMetrics(requestParameters: ListMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListMetrics200Response> {
        const response = await this.listMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all opportunities in the specified workspace
     * List opportunities
     */
    async listOpportunitiesRaw(requestParameters: ListOpportunitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpportunityArrayResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listOpportunities().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listOpportunities().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpportunityArrayResponseFromJSON(jsonValue));
    }

    /**
     * Lists all opportunities in the specified workspace
     * List opportunities
     */
    async listOpportunities(requestParameters: ListOpportunitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpportunityArrayResponse> {
        const response = await this.listOpportunitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all organisations accessible to the authenticated user
     * List organisations
     */
    async listOrganisationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOrganisations200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOrganisations200ResponseFromJSON(jsonValue));
    }

    /**
     * Lists all organisations accessible to the authenticated user
     * List organisations
     */
    async listOrganisations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOrganisations200Response> {
        const response = await this.listOrganisationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all outcomes in the specified workspace
     * List all outcomes
     */
    async listOutcomesRaw(requestParameters: ListOutcomesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOutcomes200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listOutcomes().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listOutcomes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOutcomes200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all outcomes in the specified workspace
     * List all outcomes
     */
    async listOutcomes(requestParameters: ListOutcomesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOutcomes200Response> {
        const response = await this.listOutcomesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all solutions in the specified workspace with optional filtering
     * List solutions
     */
    async listSolutionsRaw(requestParameters: ListSolutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListSolutions200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listSolutions().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listSolutions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['built'] != null) {
            queryParameters['built'] = requestParameters['built'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListSolutions200ResponseFromJSON(jsonValue));
    }

    /**
     * Lists all solutions in the specified workspace with optional filtering
     * List solutions
     */
    async listSolutions(requestParameters: ListSolutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListSolutions200Response> {
        const response = await this.listSolutionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all topics in the specified workspace
     * List topics
     */
    async listTopicsRaw(requestParameters: ListTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTopics200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listTopics().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listTopics().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTopics200ResponseFromJSON(jsonValue));
    }

    /**
     * Lists all topics in the specified workspace
     * List topics
     */
    async listTopics(requestParameters: ListTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTopics200Response> {
        const response = await this.listTopicsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all workspaces for the specified organization
     * List workspaces
     */
    async listWorkspacesRaw(requestParameters: ListWorkspacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListWorkspaces200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listWorkspaces().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListWorkspaces200ResponseFromJSON(jsonValue));
    }

    /**
     * Lists all workspaces for the specified organization
     * List workspaces
     */
    async listWorkspaces(requestParameters: ListWorkspacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListWorkspaces200Response> {
        const response = await this.listWorkspacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add or remove relationships between a metric and other entities (outcomes)
     * Manage metric relationships
     */
    async manageMetricRelationshipsRaw(requestParameters: ManageMetricRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling manageMetricRelationships().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling manageMetricRelationships().'
            );
        }

        if (requestParameters['metricId'] == null) {
            throw new runtime.RequiredError(
                'metricId',
                'Required parameter "metricId" was null or undefined when calling manageMetricRelationships().'
            );
        }

        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling manageMetricRelationships().'
            );
        }

        if (requestParameters['metricRelationshipsPayload'] == null) {
            throw new runtime.RequiredError(
                'metricRelationshipsPayload',
                'Required parameter "metricRelationshipsPayload" was null or undefined when calling manageMetricRelationships().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/metrics/{metricId}/relationships/{action}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"metricId"}}`, encodeURIComponent(String(requestParameters['metricId']))).replace(`{${"action"}}`, encodeURIComponent(String(requestParameters['action']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetricRelationshipsPayloadToJSON(requestParameters['metricRelationshipsPayload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove relationships between a metric and other entities (outcomes)
     * Manage metric relationships
     */
    async manageMetricRelationships(requestParameters: ManageMetricRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.manageMetricRelationshipsRaw(requestParameters, initOverrides);
    }

    /**
     * Add or remove relationships between an opportunity and other entities (solutions, outcomes, or insight)
     * Manage opportunity relationships
     */
    async manageOpportunityRelationshipsRaw(requestParameters: ManageOpportunityRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling manageOpportunityRelationships().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling manageOpportunityRelationships().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling manageOpportunityRelationships().'
            );
        }

        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling manageOpportunityRelationships().'
            );
        }

        if (requestParameters['opportunityRelationshipsPayload'] == null) {
            throw new runtime.RequiredError(
                'opportunityRelationshipsPayload',
                'Required parameter "opportunityRelationshipsPayload" was null or undefined when calling manageOpportunityRelationships().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}/relationships/{action}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))).replace(`{${"action"}}`, encodeURIComponent(String(requestParameters['action']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpportunityRelationshipsPayloadToJSON(requestParameters['opportunityRelationshipsPayload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove relationships between an opportunity and other entities (solutions, outcomes, or insight)
     * Manage opportunity relationships
     */
    async manageOpportunityRelationships(requestParameters: ManageOpportunityRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.manageOpportunityRelationshipsRaw(requestParameters, initOverrides);
    }

    /**
     * Add or remove relationships between an outcome and other entities (opportunities, metrics, solutions, or insight)
     * Manage outcome relationships
     */
    async manageOutcomeRelationshipsRaw(requestParameters: ManageOutcomeRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling manageOutcomeRelationships().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling manageOutcomeRelationships().'
            );
        }

        if (requestParameters['outcomeId'] == null) {
            throw new runtime.RequiredError(
                'outcomeId',
                'Required parameter "outcomeId" was null or undefined when calling manageOutcomeRelationships().'
            );
        }

        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling manageOutcomeRelationships().'
            );
        }

        if (requestParameters['outcomeRelationshipsPayload'] == null) {
            throw new runtime.RequiredError(
                'outcomeRelationshipsPayload',
                'Required parameter "outcomeRelationshipsPayload" was null or undefined when calling manageOutcomeRelationships().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes/{outcomeId}/relationships/{action}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"outcomeId"}}`, encodeURIComponent(String(requestParameters['outcomeId']))).replace(`{${"action"}}`, encodeURIComponent(String(requestParameters['action']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OutcomeRelationshipsPayloadToJSON(requestParameters['outcomeRelationshipsPayload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove relationships between an outcome and other entities (opportunities, metrics, solutions, or insight)
     * Manage outcome relationships
     */
    async manageOutcomeRelationships(requestParameters: ManageOutcomeRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.manageOutcomeRelationshipsRaw(requestParameters, initOverrides);
    }

    /**
     * Add or remove relationships between a solution and other entities (opportunities, outcomes, or insight)
     * Manage solution relationships
     */
    async manageSolutionRelationshipsRaw(requestParameters: ManageSolutionRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling manageSolutionRelationships().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling manageSolutionRelationships().'
            );
        }

        if (requestParameters['solutionId'] == null) {
            throw new runtime.RequiredError(
                'solutionId',
                'Required parameter "solutionId" was null or undefined when calling manageSolutionRelationships().'
            );
        }

        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling manageSolutionRelationships().'
            );
        }

        if (requestParameters['solutionRelationshipsPayload'] == null) {
            throw new runtime.RequiredError(
                'solutionRelationshipsPayload',
                'Required parameter "solutionRelationshipsPayload" was null or undefined when calling manageSolutionRelationships().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions/{solutionId}/relationships/{action}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"solutionId"}}`, encodeURIComponent(String(requestParameters['solutionId']))).replace(`{${"action"}}`, encodeURIComponent(String(requestParameters['action']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SolutionRelationshipsPayloadToJSON(requestParameters['solutionRelationshipsPayload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove relationships between a solution and other entities (opportunities, outcomes, or insight)
     * Manage solution relationships
     */
    async manageSolutionRelationships(requestParameters: ManageSolutionRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.manageSolutionRelationshipsRaw(requestParameters, initOverrides);
    }

    /**
     * Marks all insight items associated with an opportunity as having been seen by the user
     * Mark all opportunity insights as seen
     */
    async markAllOpportunityInsightsSeenRaw(requestParameters: MarkAllOpportunityInsightsSeenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling markAllOpportunityInsightsSeen().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling markAllOpportunityInsightsSeen().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling markAllOpportunityInsightsSeen().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}/insights/mark-all-seen`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Marks all insight items associated with an opportunity as having been seen by the user
     * Mark all opportunity insights as seen
     */
    async markAllOpportunityInsightsSeen(requestParameters: MarkAllOpportunityInsightsSeenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.markAllOpportunityInsightsSeenRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new organization with workspace and outcomes
     */
    async onboardOrganisationRaw(requestParameters: OnboardOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OnboardingResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/onboard`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OnboardingPayloadToJSON(requestParameters['onboardingPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OnboardingResponseFromJSON(jsonValue));
    }

    /**
     * Create a new organization with workspace and outcomes
     */
    async onboardOrganisation(requestParameters: OnboardOrganisationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OnboardingResponse> {
        const response = await this.onboardOrganisationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process business description and knowledge to create workspace details, outcomes, opportunities, and solutions
     */
    async onboardWorkspaceV2Raw(requestParameters: OnboardWorkspaceV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling onboardWorkspaceV2().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling onboardWorkspaceV2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/onboarding`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OnboardingV2PayloadToJSON(requestParameters['onboardingV2Payload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Process business description and knowledge to create workspace details, outcomes, opportunities, and solutions
     */
    async onboardWorkspaceV2(requestParameters: OnboardWorkspaceV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.onboardWorkspaceV2Raw(requestParameters, initOverrides);
    }

    /**
     * Reorders one or more solutions based on provided order
     * Prioritise solutions
     */
    async prioritiseSolutionsRaw(requestParameters: PrioritiseSolutionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling prioritiseSolutions().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling prioritiseSolutions().'
            );
        }

        if (requestParameters['prioritiseSolutionsRequest'] == null) {
            throw new runtime.RequiredError(
                'prioritiseSolutionsRequest',
                'Required parameter "prioritiseSolutionsRequest" was null or undefined when calling prioritiseSolutions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions/prioritise`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PrioritiseSolutionsRequestToJSON(requestParameters['prioritiseSolutionsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reorders one or more solutions based on provided order
     * Prioritise solutions
     */
    async prioritiseSolutions(requestParameters: PrioritiseSolutionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.prioritiseSolutionsRaw(requestParameters, initOverrides);
    }

    /**
     * Receives insight data and processes it for a specific workspace and organization
     * Process insight for a workspace
     */
    async processDataIngressRaw(requestParameters: ProcessDataIngressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDataIngress201Response>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling processDataIngress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/data-ingress`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessDataIngress201ResponseFromJSON(jsonValue));
    }

    /**
     * Receives insight data and processes it for a specific workspace and organization
     * Process insight for a workspace
     */
    async processDataIngress(requestParameters: ProcessDataIngressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDataIngress201Response> {
        const response = await this.processDataIngressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Receives insight data and processes it for a specific workspace and organization
     * Process insight for a workspace
     */
    async processDataIngressWithSourceRaw(requestParameters: ProcessDataIngressWithSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDataIngress201Response>> {
        if (requestParameters['feedbackSource'] == null) {
            throw new runtime.RequiredError(
                'feedbackSource',
                'Required parameter "feedbackSource" was null or undefined when calling processDataIngressWithSource().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling processDataIngressWithSource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/data-ingress/{feedbackSource}`.replace(`{${"feedbackSource"}}`, encodeURIComponent(String(requestParameters['feedbackSource']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessDataIngress201ResponseFromJSON(jsonValue));
    }

    /**
     * Receives insight data and processes it for a specific workspace and organization
     * Process insight for a workspace
     */
    async processDataIngressWithSource(requestParameters: ProcessDataIngressWithSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDataIngress201Response> {
        const response = await this.processDataIngressWithSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Processes a text prompt through an AI model and returns the result
     * Process text through AI proxy
     */
    async processTextProxyRaw(requestParameters: ProcessTextProxyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessTextProxy200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling processTextProxy().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling processTextProxy().'
            );
        }

        if (requestParameters['processTextProxyRequest'] == null) {
            throw new runtime.RequiredError(
                'processTextProxyRequest',
                'Required parameter "processTextProxyRequest" was null or undefined when calling processTextProxy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/test-proxy`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessTextProxyRequestToJSON(requestParameters['processTextProxyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessTextProxy200ResponseFromJSON(jsonValue));
    }

    /**
     * Processes a text prompt through an AI model and returns the result
     * Process text through AI proxy
     */
    async processTextProxy(requestParameters: ProcessTextProxyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessTextProxy200Response> {
        const response = await this.processTextProxyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Receives insight data and processes it for a specific workspace and organization
     * Process insight for a workspace
     */
    async processWorkspaceDataIngressRaw(requestParameters: ProcessWorkspaceDataIngressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDataIngress201Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling processWorkspaceDataIngress().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling processWorkspaceDataIngress().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling processWorkspaceDataIngress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/data-ingress`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessDataIngress201ResponseFromJSON(jsonValue));
    }

    /**
     * Receives insight data and processes it for a specific workspace and organization
     * Process insight for a workspace
     */
    async processWorkspaceDataIngress(requestParameters: ProcessWorkspaceDataIngressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDataIngress201Response> {
        const response = await this.processWorkspaceDataIngressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Receives insight data and processes it for a specific workspace and organization
     * Process insight for a workspace
     */
    async processWorkspaceDataIngressWithSourceRaw(requestParameters: ProcessWorkspaceDataIngressWithSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDataIngress201Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling processWorkspaceDataIngressWithSource().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling processWorkspaceDataIngressWithSource().'
            );
        }

        if (requestParameters['feedbackSource'] == null) {
            throw new runtime.RequiredError(
                'feedbackSource',
                'Required parameter "feedbackSource" was null or undefined when calling processWorkspaceDataIngressWithSource().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling processWorkspaceDataIngressWithSource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/data-ingress/{feedbackSource}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"feedbackSource"}}`, encodeURIComponent(String(requestParameters['feedbackSource']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessDataIngress201ResponseFromJSON(jsonValue));
    }

    /**
     * Receives insight data and processes it for a specific workspace and organization
     * Process insight for a workspace
     */
    async processWorkspaceDataIngressWithSource(requestParameters: ProcessWorkspaceDataIngressWithSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDataIngress201Response> {
        const response = await this.processWorkspaceDataIngressWithSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Finds similar entities to the given query
     * Find similar entities
     */
    async similaritySearchRaw(requestParameters: SimilaritySearchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimilaritySearch200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling similaritySearch().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling similaritySearch().'
            );
        }

        if (requestParameters['similaritySearchRequest'] == null) {
            throw new runtime.RequiredError(
                'similaritySearchRequest',
                'Required parameter "similaritySearchRequest" was null or undefined when calling similaritySearch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/similarity-search`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SimilaritySearchRequestToJSON(requestParameters['similaritySearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimilaritySearch200ResponseFromJSON(jsonValue));
    }

    /**
     * Finds similar entities to the given query
     * Find similar entities
     */
    async similaritySearch(requestParameters: SimilaritySearchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimilaritySearch200Response> {
        const response = await this.similaritySearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Triggers a sync operation for a Notion integration, queuing all configured pages for processing
     * Initiate Notion integration sync
     */
    async syncIntegrationRaw(requestParameters: SyncIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SyncIntegration202Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling syncIntegration().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling syncIntegration().'
            );
        }

        if (requestParameters['integrationId'] == null) {
            throw new runtime.RequiredError(
                'integrationId',
                'Required parameter "integrationId" was null or undefined when calling syncIntegration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{orgId}/workspace/{workspaceId}/integration/{integrationId}/sync`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters['integrationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SyncIntegration202ResponseFromJSON(jsonValue));
    }

    /**
     * Triggers a sync operation for a Notion integration, queuing all configured pages for processing
     * Initiate Notion integration sync
     */
    async syncIntegration(requestParameters: SyncIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SyncIntegration202Response> {
        const response = await this.syncIntegrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Tracks token usage for a given request
     * Track token usage
     */
    async trackTokenUsageRaw(requestParameters: TrackTokenUsageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling trackTokenUsage().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling trackTokenUsage().'
            );
        }

        if (requestParameters['trackTokenUsageRequest'] == null) {
            throw new runtime.RequiredError(
                'trackTokenUsageRequest',
                'Required parameter "trackTokenUsageRequest" was null or undefined when calling trackTokenUsage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/token-usage`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrackTokenUsageRequestToJSON(requestParameters['trackTokenUsageRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Tracks token usage for a given request
     * Track token usage
     */
    async trackTokenUsage(requestParameters: TrackTokenUsageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackTokenUsageRaw(requestParameters, initOverrides);
    }

    /**
     * Updates an integration configuration, including re-entering secrets
     * Update an integration
     */
    async updateIntegrationRaw(requestParameters: UpdateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateIntegration200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateIntegration().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateIntegration().'
            );
        }

        if (requestParameters['integrationId'] == null) {
            throw new runtime.RequiredError(
                'integrationId',
                'Required parameter "integrationId" was null or undefined when calling updateIntegration().'
            );
        }

        if (requestParameters['updateIntegrationPayload'] == null) {
            throw new runtime.RequiredError(
                'updateIntegrationPayload',
                'Required parameter "updateIntegrationPayload" was null or undefined when calling updateIntegration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{orgId}/workspace/{workspaceId}/integration/{integrationId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters['integrationId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateIntegrationPayloadToJSON(requestParameters['updateIntegrationPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateIntegration200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates an integration configuration, including re-entering secrets
     * Update an integration
     */
    async updateIntegration(requestParameters: UpdateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateIntegration200Response> {
        const response = await this.updateIntegrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the title, description, or content of an existing piece of knowledge
     * Update a piece of knowledge
     */
    async updateKnowledgeRaw(requestParameters: UpdateKnowledgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SingleKnowledgeResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateKnowledge().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateKnowledge().'
            );
        }

        if (requestParameters['knowledgeId'] == null) {
            throw new runtime.RequiredError(
                'knowledgeId',
                'Required parameter "knowledgeId" was null or undefined when calling updateKnowledge().'
            );
        }

        if (requestParameters['updateKnowledgePayload'] == null) {
            throw new runtime.RequiredError(
                'updateKnowledgePayload',
                'Required parameter "updateKnowledgePayload" was null or undefined when calling updateKnowledge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/knowledge/{knowledgeId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"knowledgeId"}}`, encodeURIComponent(String(requestParameters['knowledgeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateKnowledgePayloadToJSON(requestParameters['updateKnowledgePayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SingleKnowledgeResponseFromJSON(jsonValue));
    }

    /**
     * Updates the title, description, or content of an existing piece of knowledge
     * Update a piece of knowledge
     */
    async updateKnowledge(requestParameters: UpdateKnowledgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SingleKnowledgeResponse> {
        const response = await this.updateKnowledgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing metric.
     * Update a metric
     */
    async updateMetricRaw(requestParameters: UpdateMetricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMetric200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateMetric().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateMetric().'
            );
        }

        if (requestParameters['metricId'] == null) {
            throw new runtime.RequiredError(
                'metricId',
                'Required parameter "metricId" was null or undefined when calling updateMetric().'
            );
        }

        if (requestParameters['updateMetricPayload'] == null) {
            throw new runtime.RequiredError(
                'updateMetricPayload',
                'Required parameter "updateMetricPayload" was null or undefined when calling updateMetric().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/metrics/{MetricId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"MetricId"}}`, encodeURIComponent(String(requestParameters['metricId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMetricPayloadToJSON(requestParameters['updateMetricPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMetric200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates an existing metric.
     * Update a metric
     */
    async updateMetric(requestParameters: UpdateMetricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMetric200Response> {
        const response = await this.updateMetricRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing organization, recreate workspace and outcomes
     */
    async updateOnboardingRaw(requestParameters: UpdateOnboardingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OnboardingResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateOnboarding().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/onboard`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OnboardingResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing organization, recreate workspace and outcomes
     */
    async updateOnboarding(requestParameters: UpdateOnboardingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OnboardingResponse> {
        const response = await this.updateOnboardingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific opportunity by ID
     * Update opportunity
     */
    async updateOpportunityRaw(requestParameters: UpdateOpportunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpportunityResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateOpportunity().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateOpportunity().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling updateOpportunity().'
            );
        }

        if (requestParameters['updateOpportunityPayload'] == null) {
            throw new runtime.RequiredError(
                'updateOpportunityPayload',
                'Required parameter "updateOpportunityPayload" was null or undefined when calling updateOpportunity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOpportunityPayloadToJSON(requestParameters['updateOpportunityPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpportunityResponseFromJSON(jsonValue));
    }

    /**
     * Updates a specific opportunity by ID
     * Update opportunity
     */
    async updateOpportunity(requestParameters: UpdateOpportunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpportunityResponse> {
        const response = await this.updateOpportunityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific organisation by ID
     * Update organisation
     */
    async updateOrganisationRaw(requestParameters: UpdateOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOrganisation200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateOrganisation().'
            );
        }

        if (requestParameters['updateOrganisationPayload'] == null) {
            throw new runtime.RequiredError(
                'updateOrganisationPayload',
                'Required parameter "updateOrganisationPayload" was null or undefined when calling updateOrganisation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganisationPayloadToJSON(requestParameters['updateOrganisationPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOrganisation200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a specific organisation by ID
     * Update organisation
     */
    async updateOrganisation(requestParameters: UpdateOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOrganisation200Response> {
        const response = await this.updateOrganisationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing outcome by its ID
     * Update an outcome
     */
    async updateOutcomeRaw(requestParameters: UpdateOutcomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOutcome200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateOutcome().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateOutcome().'
            );
        }

        if (requestParameters['outcomeId'] == null) {
            throw new runtime.RequiredError(
                'outcomeId',
                'Required parameter "outcomeId" was null or undefined when calling updateOutcome().'
            );
        }

        if (requestParameters['updateOutcomePayload'] == null) {
            throw new runtime.RequiredError(
                'updateOutcomePayload',
                'Required parameter "updateOutcomePayload" was null or undefined when calling updateOutcome().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes/{outcomeId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"outcomeId"}}`, encodeURIComponent(String(requestParameters['outcomeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOutcomePayloadToJSON(requestParameters['updateOutcomePayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOutcome200ResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing outcome by its ID
     * Update an outcome
     */
    async updateOutcome(requestParameters: UpdateOutcomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOutcome200Response> {
        const response = await this.updateOutcomeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific solution by ID
     * Update solution
     */
    async updateSolutionRaw(requestParameters: UpdateSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSolution200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateSolution().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateSolution().'
            );
        }

        if (requestParameters['solutionId'] == null) {
            throw new runtime.RequiredError(
                'solutionId',
                'Required parameter "solutionId" was null or undefined when calling updateSolution().'
            );
        }

        if (requestParameters['updateSolutionPayload'] == null) {
            throw new runtime.RequiredError(
                'updateSolutionPayload',
                'Required parameter "updateSolutionPayload" was null or undefined when calling updateSolution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions/{solutionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"solutionId"}}`, encodeURIComponent(String(requestParameters['solutionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSolutionPayloadToJSON(requestParameters['updateSolutionPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSolution200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a specific solution by ID
     * Update solution
     */
    async updateSolution(requestParameters: UpdateSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSolution200Response> {
        const response = await this.updateSolutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific topic by ID
     * Update topic
     */
    async updateTopicRaw(requestParameters: UpdateTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTopic200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateTopic().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateTopic().'
            );
        }

        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling updateTopic().'
            );
        }

        if (requestParameters['updateTopicPayload'] == null) {
            throw new runtime.RequiredError(
                'updateTopicPayload',
                'Required parameter "updateTopicPayload" was null or undefined when calling updateTopic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics/{topicId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"topicId"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTopicPayloadToJSON(requestParameters['updateTopicPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTopic200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a specific topic by ID
     * Update topic
     */
    async updateTopic(requestParameters: UpdateTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTopic200Response> {
        const response = await this.updateTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific workspace by ID
     * Update workspace
     */
    async updateWorkspaceRaw(requestParameters: UpdateWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateWorkspace200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateWorkspace().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateWorkspace().'
            );
        }

        if (requestParameters['updateWorkspacePayload'] == null) {
            throw new runtime.RequiredError(
                'updateWorkspacePayload',
                'Required parameter "updateWorkspacePayload" was null or undefined when calling updateWorkspace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWorkspacePayloadToJSON(requestParameters['updateWorkspacePayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateWorkspace200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a specific workspace by ID
     * Update workspace
     */
    async updateWorkspace(requestParameters: UpdateWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateWorkspace200Response> {
        const response = await this.updateWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads a document related to feedback for processing and analysis
     * Upload feedback document
     */
    async uploadFeedbackDocumentRaw(requestParameters: UploadFeedbackDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateFeedbackDocumentResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling uploadFeedbackDocument().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling uploadFeedbackDocument().'
            );
        }

        if (requestParameters['createFeedbackDocumentPayload'] == null) {
            throw new runtime.RequiredError(
                'createFeedbackDocumentPayload',
                'Required parameter "createFeedbackDocumentPayload" was null or undefined when calling uploadFeedbackDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback-document`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFeedbackDocumentPayloadToJSON(requestParameters['createFeedbackDocumentPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateFeedbackDocumentResponseFromJSON(jsonValue));
    }

    /**
     * Uploads a document related to feedback for processing and analysis
     * Upload feedback document
     */
    async uploadFeedbackDocument(requestParameters: UploadFeedbackDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateFeedbackDocumentResponse> {
        const response = await this.uploadFeedbackDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the ID and name of the authenticated user\'s organization and workspace. This is only callable by an API key which is workspace scoped.
     * Retrieve authenticated user\'s organization and workspace information
     */
    async whoAmIRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WhoAmIResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/whoami`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WhoAmIResponseFromJSON(jsonValue));
    }

    /**
     * Returns the ID and name of the authenticated user\'s organization and workspace. This is only callable by an API key which is workspace scoped.
     * Retrieve authenticated user\'s organization and workspace information
     */
    async whoAmI(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WhoAmIResponse> {
        const response = await this.whoAmIRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListSolutionsBuiltEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ListSolutionsBuiltEnum = typeof ListSolutionsBuiltEnum[keyof typeof ListSolutionsBuiltEnum];
