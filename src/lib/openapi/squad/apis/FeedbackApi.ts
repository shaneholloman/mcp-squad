/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 0.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner,
  OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400Response,
} from '../models/index.js';
import {
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInnerFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInnerToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400ResponseToJSON,
} from '../models/index.js';

export interface OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPostRequest {
    orgId: string;
    workspaceId: string;
    file?: Blob;
    feedbackId?: string;
    title?: string;
    description?: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDeleteRequest {
    orgId: string;
    workspaceId: string;
    feedbackId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGetRequest {
    orgId: string;
    workspaceId: string;
    feedbackId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGetRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPostRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
}

/**
 * FeedbackApi - interface
 * 
 * @export
 * @interface FeedbackApiInterface
 */
export interface FeedbackApiInterface {
    /**
     * Uploads a document related to feedback for processing and analysis
     * @summary Upload feedback document
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {Blob} [file] The document file to upload
     * @param {string} [feedbackId] ID of the feedback to associate this document with
     * @param {string} [title] Title for the document
     * @param {string} [description] Description of the document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost200Response>>;

    /**
     * Uploads a document related to feedback for processing and analysis
     * Upload feedback document
     */
    organisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost200Response>;

    /**
     * Deletes a specific feedback item by ID
     * @summary Delete feedback
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} feedbackId Feedback ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete200Response>>;

    /**
     * Deletes a specific feedback item by ID
     * Delete feedback
     */
    organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete200Response>;

    /**
     * Retrieves a specific feedback item by ID
     * @summary Get feedback by ID
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} feedbackId Feedback ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner>>;

    /**
     * Retrieves a specific feedback item by ID
     * Get feedback by ID
     */
    organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner>;

    /**
     * Lists all feedback items in the specified workspace
     * @summary List feedback
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdFeedbackGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner>>>;

    /**
     * Lists all feedback items in the specified workspace
     * List feedback
     */
    organisationsOrgIdWorkspacesWorkspaceIdFeedbackGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner>>;

    /**
     * Creates a new feedback item in the specified workspace
     * @summary Create new feedback
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest} organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner>>;

    /**
     * Creates a new feedback item in the specified workspace
     * Create new feedback
     */
    organisationsOrgIdWorkspacesWorkspaceIdFeedbackPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner>;

    /**
     * Creates mock feedback data for testing and development purposes
     * @summary Generate mock feedback
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {OrganisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequest} organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner>>>;

    /**
     * Creates mock feedback data for testing and development purposes
     * Generate mock feedback
     */
    organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner>>;

    /**
     * Marks all feedback items associated with an opportunity as having been seen by the user
     * @summary Mark all opportunity feedback as seen
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} opportunityId Opportunity ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Marks all feedback items associated with an opportunity as having been seen by the user
     * Mark all opportunity feedback as seen
     */
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class FeedbackApi extends runtime.BaseAPI implements FeedbackApiInterface {

    /**
     * Uploads a document related to feedback for processing and analysis
     * Upload feedback document
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['feedbackId'] != null) {
            formParams.append('feedbackId', requestParameters['feedbackId'] as any);
        }

        if (requestParameters['title'] != null) {
            formParams.append('title', requestParameters['title'] as any);
        }

        if (requestParameters['description'] != null) {
            formParams.append('description', requestParameters['description'] as any);
        }

        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback-document`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Uploads a document related to feedback for processing and analysis
     * Upload feedback document
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific feedback item by ID
     * Delete feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete().'
            );
        }

        if (requestParameters['feedbackId'] == null) {
            throw new runtime.RequiredError(
                'feedbackId',
                'Required parameter "feedbackId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback/{feedbackId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"feedbackId"}}`, encodeURIComponent(String(requestParameters['feedbackId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific feedback item by ID
     * Delete feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific feedback item by ID
     * Get feedback by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGet().'
            );
        }

        if (requestParameters['feedbackId'] == null) {
            throw new runtime.RequiredError(
                'feedbackId',
                'Required parameter "feedbackId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback/{feedbackId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"feedbackId"}}`, encodeURIComponent(String(requestParameters['feedbackId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific feedback item by ID
     * Get feedback by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all feedback items in the specified workspace
     * List feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInnerFromJSON));
    }

    /**
     * Lists all feedback items in the specified workspace
     * List feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner>> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdFeedbackGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new feedback item in the specified workspace
     * Create new feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Creates a new feedback item in the specified workspace
     * Create new feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates mock feedback data for testing and development purposes
     * Generate mock feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/mock-feedback`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInnerFromJSON));
    }

    /**
     * Creates mock feedback data for testing and development purposes
     * Generate mock feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseInner>> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks all feedback items associated with an opportunity as having been seen by the user
     * Mark all opportunity feedback as seen
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPost().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}/feedback/mark-all-seen`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Marks all feedback items associated with an opportunity as having been seen by the user
     * Mark all opportunity feedback as seen
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPostRaw(requestParameters, initOverrides);
    }

}
