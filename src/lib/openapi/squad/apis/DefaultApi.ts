/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 0.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  CreateOpportunityPayload,
  ManageOpportunityRelationshipsRequest,
  OnboardPost200Response,
  OnboardPostRequest,
  OrganisationsGet200Response,
  OrganisationsOrgIdDelete200Response,
  OrganisationsOrgIdPutRequest,
  OrganisationsOrgIdStatusGet200Response,
  OrganisationsOrgIdWorkspacesGet200Response,
  OrganisationsOrgIdWorkspacesPost200Response,
  OrganisationsOrgIdWorkspacesPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdDelete200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPost200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost429Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdPutRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPost200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPost200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner,
  OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequest,
  OrganisationsPost200Response,
  OrganisationsPostRequest,
  OutcomeRelationshipsPayload,
  RelationshipAction,
  RequirementRelationshipsPayload,
  SolutionRelationshipsPayload,
  UpdateOpportunityPayload,
  V1WhoamiGet200Response,
} from '../models/index.js';
import {
    CreateOpportunityPayloadFromJSON,
    CreateOpportunityPayloadToJSON,
    ManageOpportunityRelationshipsRequestFromJSON,
    ManageOpportunityRelationshipsRequestToJSON,
    OnboardPost200ResponseFromJSON,
    OnboardPost200ResponseToJSON,
    OnboardPostRequestFromJSON,
    OnboardPostRequestToJSON,
    OrganisationsGet200ResponseFromJSON,
    OrganisationsGet200ResponseToJSON,
    OrganisationsOrgIdDelete200ResponseFromJSON,
    OrganisationsOrgIdDelete200ResponseToJSON,
    OrganisationsOrgIdPutRequestFromJSON,
    OrganisationsOrgIdPutRequestToJSON,
    OrganisationsOrgIdStatusGet200ResponseFromJSON,
    OrganisationsOrgIdStatusGet200ResponseToJSON,
    OrganisationsOrgIdWorkspacesGet200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesGet200ResponseToJSON,
    OrganisationsOrgIdWorkspacesPost200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesPost200ResponseToJSON,
    OrganisationsOrgIdWorkspacesPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdDelete200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdDelete200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPost200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPost200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost429ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost429ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdPutRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdPutRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPost200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPost200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPost200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPost200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInnerFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInnerToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequestToJSON,
    OrganisationsPost200ResponseFromJSON,
    OrganisationsPost200ResponseToJSON,
    OrganisationsPostRequestFromJSON,
    OrganisationsPostRequestToJSON,
    OutcomeRelationshipsPayloadFromJSON,
    OutcomeRelationshipsPayloadToJSON,
    RelationshipActionFromJSON,
    RelationshipActionToJSON,
    RequirementRelationshipsPayloadFromJSON,
    RequirementRelationshipsPayloadToJSON,
    SolutionRelationshipsPayloadFromJSON,
    SolutionRelationshipsPayloadToJSON,
    UpdateOpportunityPayloadFromJSON,
    UpdateOpportunityPayloadToJSON,
    V1WhoamiGet200ResponseFromJSON,
    V1WhoamiGet200ResponseToJSON,
} from '../models/index.js';

export interface ManageOpportunityRelationshipsOperationRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
    action: RelationshipAction;
    manageOpportunityRelationshipsRequest: ManageOpportunityRelationshipsRequest;
}

export interface ManageOutcomeRelationshipsRequest {
    orgId: string;
    workspaceId: string;
    outcomeId: string;
    action: RelationshipAction;
    outcomeRelationshipsPayload: OutcomeRelationshipsPayload;
}

export interface ManageRequirementRelationshipsRequest {
    orgId: string;
    workspaceId: string;
    requirementId: string;
    action: RelationshipAction;
    requirementRelationshipsPayload: RequirementRelationshipsPayload;
}

export interface ManageSolutionRelationshipsRequest {
    orgId: string;
    workspaceId: string;
    solutionId: string;
    action: RelationshipAction;
    solutionRelationshipsPayload: SolutionRelationshipsPayload;
}

export interface OnboardPostOperationRequest {
    onboardPostRequest?: OnboardPostRequest;
}

export interface OrganisationsOrgIdDeleteRequest {
    orgId: string;
}

export interface OrganisationsOrgIdGetRequest {
    orgId: string;
}

export interface OrganisationsOrgIdOnboardPutRequest {
    orgId: string;
    onboardPostRequest?: OnboardPostRequest;
}

export interface OrganisationsOrgIdPutOperationRequest {
    orgId: string;
    organisationsOrgIdPutRequest: OrganisationsOrgIdPutRequest;
}

export interface OrganisationsOrgIdStatusGetRequest {
    orgId: string;
}

export interface OrganisationsOrgIdWorkspacesGetRequest {
    orgId: string;
}

export interface OrganisationsOrgIdWorkspacesPostOperationRequest {
    orgId: string;
    organisationsOrgIdWorkspacesPostRequest: OrganisationsOrgIdWorkspacesPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdDeleteRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPostRequest {
    orgId: string;
    workspaceId: string;
    file?: Blob;
    feedbackId?: string;
    title?: string;
    description?: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDeleteRequest {
    orgId: string;
    workspaceId: string;
    feedbackId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGetRequest {
    orgId: string;
    workspaceId: string;
    feedbackId: string;
    relationships?: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGetRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdGetRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGetRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDeleteRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPostRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostOperationRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
    organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequest?: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGetRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
    relationships?: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequest {
    orgId: string;
    workspaceId: string;
    opportunityId: string;
    updateOpportunityPayload: UpdateOpportunityPayload;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequest {
    orgId: string;
    workspaceId: string;
    createOpportunityPayload: CreateOpportunityPayload;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGetRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDeleteRequest {
    orgId: string;
    workspaceId: string;
    outcomeId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGetRequest {
    orgId: string;
    workspaceId: string;
    outcomeId: string;
    relationships?: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPutRequest {
    orgId: string;
    workspaceId: string;
    outcomeId: string;
    organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdPutOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdPutRequest: OrganisationsOrgIdWorkspacesWorkspaceIdPutRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGetRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDeleteRequest {
    orgId: string;
    workspaceId: string;
    requirementId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGetRequest {
    orgId: string;
    workspaceId: string;
    requirementId: string;
    relationships?: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutOperationRequest {
    orgId: string;
    workspaceId: string;
    requirementId: string;
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGetRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDeleteRequest {
    orgId: string;
    workspaceId: string;
    solutionId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGetRequest {
    orgId: string;
    workspaceId: string;
    solutionId: string;
    relationships?: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutOperationRequest {
    orgId: string;
    workspaceId: string;
    solutionId: string;
    organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGetRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDeleteRequest {
    orgId: string;
    workspaceId: string;
    topicId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGetRequest {
    orgId: string;
    workspaceId: string;
    topicId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutOperationRequest {
    orgId: string;
    workspaceId: string;
    topicId: string;
    organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequest: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequest;
}

export interface OrganisationsPostOperationRequest {
    organisationsPostRequest: OrganisationsPostRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Add or remove relationships between an opportunity and other entities (solutions, outcomes, or feedback)
     * Manage opportunity relationships
     */
    async manageOpportunityRelationshipsRaw(requestParameters: ManageOpportunityRelationshipsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling manageOpportunityRelationships().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling manageOpportunityRelationships().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling manageOpportunityRelationships().'
            );
        }

        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling manageOpportunityRelationships().'
            );
        }

        if (requestParameters['manageOpportunityRelationshipsRequest'] == null) {
            throw new runtime.RequiredError(
                'manageOpportunityRelationshipsRequest',
                'Required parameter "manageOpportunityRelationshipsRequest" was null or undefined when calling manageOpportunityRelationships().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}/relationships/{action}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))).replace(`{${"action"}}`, encodeURIComponent(String(requestParameters['action']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManageOpportunityRelationshipsRequestToJSON(requestParameters['manageOpportunityRelationshipsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove relationships between an opportunity and other entities (solutions, outcomes, or feedback)
     * Manage opportunity relationships
     */
    async manageOpportunityRelationships(requestParameters: ManageOpportunityRelationshipsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.manageOpportunityRelationshipsRaw(requestParameters, initOverrides);
    }

    /**
     * Add or remove relationships between an outcome and other entities (opportunities, solutions, or feedback)
     * Manage outcome relationships
     */
    async manageOutcomeRelationshipsRaw(requestParameters: ManageOutcomeRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling manageOutcomeRelationships().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling manageOutcomeRelationships().'
            );
        }

        if (requestParameters['outcomeId'] == null) {
            throw new runtime.RequiredError(
                'outcomeId',
                'Required parameter "outcomeId" was null or undefined when calling manageOutcomeRelationships().'
            );
        }

        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling manageOutcomeRelationships().'
            );
        }

        if (requestParameters['outcomeRelationshipsPayload'] == null) {
            throw new runtime.RequiredError(
                'outcomeRelationshipsPayload',
                'Required parameter "outcomeRelationshipsPayload" was null or undefined when calling manageOutcomeRelationships().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes/{outcomeId}/relationships/{action}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"outcomeId"}}`, encodeURIComponent(String(requestParameters['outcomeId']))).replace(`{${"action"}}`, encodeURIComponent(String(requestParameters['action']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OutcomeRelationshipsPayloadToJSON(requestParameters['outcomeRelationshipsPayload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove relationships between an outcome and other entities (opportunities, solutions, or feedback)
     * Manage outcome relationships
     */
    async manageOutcomeRelationships(requestParameters: ManageOutcomeRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.manageOutcomeRelationshipsRaw(requestParameters, initOverrides);
    }

    /**
     * Add or remove relationships between a requirement and other entities (opportunities, solutions, outcomes, or feedback)
     * Manage requirement relationships
     */
    async manageRequirementRelationshipsRaw(requestParameters: ManageRequirementRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling manageRequirementRelationships().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling manageRequirementRelationships().'
            );
        }

        if (requestParameters['requirementId'] == null) {
            throw new runtime.RequiredError(
                'requirementId',
                'Required parameter "requirementId" was null or undefined when calling manageRequirementRelationships().'
            );
        }

        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling manageRequirementRelationships().'
            );
        }

        if (requestParameters['requirementRelationshipsPayload'] == null) {
            throw new runtime.RequiredError(
                'requirementRelationshipsPayload',
                'Required parameter "requirementRelationshipsPayload" was null or undefined when calling manageRequirementRelationships().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/requirements/{requirementId}/relationships/{action}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters['requirementId']))).replace(`{${"action"}}`, encodeURIComponent(String(requestParameters['action']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequirementRelationshipsPayloadToJSON(requestParameters['requirementRelationshipsPayload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove relationships between a requirement and other entities (opportunities, solutions, outcomes, or feedback)
     * Manage requirement relationships
     */
    async manageRequirementRelationships(requestParameters: ManageRequirementRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.manageRequirementRelationshipsRaw(requestParameters, initOverrides);
    }

    /**
     * Add or remove relationships between a solution and other entities (opportunities, outcomes, or feedback)
     * Manage solution relationships
     */
    async manageSolutionRelationshipsRaw(requestParameters: ManageSolutionRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling manageSolutionRelationships().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling manageSolutionRelationships().'
            );
        }

        if (requestParameters['solutionId'] == null) {
            throw new runtime.RequiredError(
                'solutionId',
                'Required parameter "solutionId" was null or undefined when calling manageSolutionRelationships().'
            );
        }

        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling manageSolutionRelationships().'
            );
        }

        if (requestParameters['solutionRelationshipsPayload'] == null) {
            throw new runtime.RequiredError(
                'solutionRelationshipsPayload',
                'Required parameter "solutionRelationshipsPayload" was null or undefined when calling manageSolutionRelationships().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions/{solutionId}/relationships/{action}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"solutionId"}}`, encodeURIComponent(String(requestParameters['solutionId']))).replace(`{${"action"}}`, encodeURIComponent(String(requestParameters['action']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SolutionRelationshipsPayloadToJSON(requestParameters['solutionRelationshipsPayload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove relationships between a solution and other entities (opportunities, outcomes, or feedback)
     * Manage solution relationships
     */
    async manageSolutionRelationships(requestParameters: ManageSolutionRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.manageSolutionRelationshipsRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new organization with workspace and outcomes
     */
    async onboardPostRaw(requestParameters: OnboardPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OnboardPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/onboard`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OnboardPostRequestToJSON(requestParameters['onboardPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OnboardPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new organization with workspace and outcomes
     */
    async onboardPost(requestParameters: OnboardPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OnboardPost200Response> {
        const response = await this.onboardPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all organisations accessible to the authenticated user
     * List organisations
     */
    async organisationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Lists all organisations accessible to the authenticated user
     * List organisations
     */
    async organisationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsGet200Response> {
        const response = await this.organisationsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific organisation by ID
     * Delete organisation
     */
    async organisationsOrgIdDeleteRaw(requestParameters: OrganisationsOrgIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific organisation by ID
     * Delete organisation
     */
    async organisationsOrgIdDelete(requestParameters: OrganisationsOrgIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdDelete200Response> {
        const response = await this.organisationsOrgIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific organisation by ID
     * Get organisation by ID
     */
    async organisationsOrgIdGetRaw(requestParameters: OrganisationsOrgIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific organisation by ID
     * Get organisation by ID
     */
    async organisationsOrgIdGet(requestParameters: OrganisationsOrgIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsPost200Response> {
        const response = await this.organisationsOrgIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing organization, recreate workspace and outcomes
     */
    async organisationsOrgIdOnboardPutRaw(requestParameters: OrganisationsOrgIdOnboardPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OnboardPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdOnboardPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/onboard`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OnboardPostRequestToJSON(requestParameters['onboardPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OnboardPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing organization, recreate workspace and outcomes
     */
    async organisationsOrgIdOnboardPut(requestParameters: OrganisationsOrgIdOnboardPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OnboardPost200Response> {
        const response = await this.organisationsOrgIdOnboardPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific organisation by ID
     * Update organisation
     */
    async organisationsOrgIdPutRaw(requestParameters: OrganisationsOrgIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdPut().'
            );
        }

        if (requestParameters['organisationsOrgIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdPutRequest',
                'Required parameter "organisationsOrgIdPutRequest" was null or undefined when calling organisationsOrgIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdPutRequestToJSON(requestParameters['organisationsOrgIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a specific organisation by ID
     * Update organisation
     */
    async organisationsOrgIdPut(requestParameters: OrganisationsOrgIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsPost200Response> {
        const response = await this.organisationsOrgIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the current status and statistics of an organization
     * Get organization status
     */
    async organisationsOrgIdStatusGetRaw(requestParameters: OrganisationsOrgIdStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdStatusGet200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdStatusGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/status`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdStatusGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the current status and statistics of an organization
     * Get organization status
     */
    async organisationsOrgIdStatusGet(requestParameters: OrganisationsOrgIdStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdStatusGet200Response> {
        const response = await this.organisationsOrgIdStatusGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all workspaces for the specified organization
     * List workspaces
     */
    async organisationsOrgIdWorkspacesGetRaw(requestParameters: OrganisationsOrgIdWorkspacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesGet200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Lists all workspaces for the specified organization
     * List workspaces
     */
    async organisationsOrgIdWorkspacesGet(requestParameters: OrganisationsOrgIdWorkspacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesGet200Response> {
        const response = await this.organisationsOrgIdWorkspacesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new workspace for the specified organization
     * Create new workspace
     */
    async organisationsOrgIdWorkspacesPostRaw(requestParameters: OrganisationsOrgIdWorkspacesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new workspace for the specified organization
     * Create new workspace
     */
    async organisationsOrgIdWorkspacesPost(requestParameters: OrganisationsOrgIdWorkspacesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific workspace by ID
     * Delete workspace
     */
    async organisationsOrgIdWorkspacesWorkspaceIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdDelete().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific workspace by ID
     * Delete workspace
     */
    async organisationsOrgIdWorkspacesWorkspaceIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdDelete200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads a document related to feedback for processing and analysis
     * Upload feedback document
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['feedbackId'] != null) {
            formParams.append('feedbackId', requestParameters['feedbackId'] as any);
        }

        if (requestParameters['title'] != null) {
            formParams.append('title', requestParameters['title'] as any);
        }

        if (requestParameters['description'] != null) {
            formParams.append('description', requestParameters['description'] as any);
        }

        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback-document`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Uploads a document related to feedback for processing and analysis
     * Upload feedback document
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdFeedbackDocumentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific feedback by ID
     * Delete feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete().'
            );
        }

        if (requestParameters['feedbackId'] == null) {
            throw new runtime.RequiredError(
                'feedbackId',
                'Required parameter "feedbackId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback/{feedbackId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"feedbackId"}}`, encodeURIComponent(String(requestParameters['feedbackId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific feedback by ID
     * Delete feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDelete200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific feedback by ID
     * Get feedback by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGet().'
            );
        }

        if (requestParameters['feedbackId'] == null) {
            throw new runtime.RequiredError(
                'feedbackId',
                'Required parameter "feedbackId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['relationships'] != null) {
            queryParameters['relationships'] = requestParameters['relationships'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback/{feedbackId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"feedbackId"}}`, encodeURIComponent(String(requestParameters['feedbackId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific feedback by ID
     * Get feedback by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdFeedbackFeedbackIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all feedback in the specified workspace
     * List feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Lists all feedback in the specified workspace
     * List feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackGet200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdFeedbackGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new feedback item in the specified workspace
     * Create new feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdFeedbackPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/feedback`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new feedback item in the specified workspace
     * Create new feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdFeedbackPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdFeedbackPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific workspace by ID
     * Get workspace by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific workspace by ID
     * Get workspace by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates mock feedback data for testing and development purposes
     * Generate mock feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/mock-feedback`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates mock feedback data for testing and development purposes
     * Generate mock feedback
     */
    async organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdFeedbackPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdMockFeedbackPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all opportunities in the specified workspace
     * List opportunities
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Lists all opportunities in the specified workspace
     * List opportunities
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGet200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific opportunity by ID
     * Delete opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific opportunity by ID
     * Delete opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDelete200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks all feedback items associated with an opportunity as having been seen by the user
     * Mark all opportunity feedback as seen
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPost().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}/feedback/mark-all-seen`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Marks all feedback items associated with an opportunity as having been seen by the user
     * Mark all opportunity feedback as seen
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdFeedbackMarkAllSeenPostRaw(requestParameters, initOverrides);
    }

    /**
     * Asynchronously generates AI-powered solutions based on the feedback associated with an opportunity
     * Generate solutions for an opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPost().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}/generate-solutions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Asynchronously generates AI-powered solutions based on the feedback associated with an opportunity
     * Generate solutions for an opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGenerateSolutionsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific opportunity by ID
     * Get opportunity by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGet().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['relationships'] != null) {
            queryParameters['relationships'] = requestParameters['relationships'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific opportunity by ID
     * Get opportunity by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific opportunity by ID
     * Update opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPut().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPut().'
            );
        }

        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPut().'
            );
        }

        if (requestParameters['updateOpportunityPayload'] == null) {
            throw new runtime.RequiredError(
                'updateOpportunityPayload',
                'Required parameter "updateOpportunityPayload" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"opportunityId"}}`, encodeURIComponent(String(requestParameters['opportunityId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOpportunityPayloadToJSON(requestParameters['updateOpportunityPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a specific opportunity by ID
     * Update opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPut(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesOpportunityIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new opportunity in the specified workspace
     * Create new opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost().'
            );
        }

        if (requestParameters['createOpportunityPayload'] == null) {
            throw new runtime.RequiredError(
                'createOpportunityPayload',
                'Required parameter "createOpportunityPayload" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/opportunities`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOpportunityPayloadToJSON(requestParameters['createOpportunityPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new opportunity in the specified workspace
     * Create new opportunity
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOpportunitiesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List outcomes
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * List outcomes
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOutcomesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an outcome
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete().'
            );
        }

        if (requestParameters['outcomeId'] == null) {
            throw new runtime.RequiredError(
                'outcomeId',
                'Required parameter "outcomeId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes/{outcomeId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"outcomeId"}}`, encodeURIComponent(String(requestParameters['outcomeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete an outcome
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an outcome by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGet().'
            );
        }

        if (requestParameters['outcomeId'] == null) {
            throw new runtime.RequiredError(
                'outcomeId',
                'Required parameter "outcomeId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['relationships'] != null) {
            queryParameters['relationships'] = requestParameters['relationships'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes/{outcomeId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"outcomeId"}}`, encodeURIComponent(String(requestParameters['outcomeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Get an outcome by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an outcome
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPutRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPut().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPut().'
            );
        }

        if (requestParameters['outcomeId'] == null) {
            throw new runtime.RequiredError(
                'outcomeId',
                'Required parameter "outcomeId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPut().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes/{outcomeId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"outcomeId"}}`, encodeURIComponent(String(requestParameters['outcomeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update an outcome
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPut(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new outcome
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new outcome
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific workspace by ID
     * Update workspace
     */
    async organisationsOrgIdWorkspacesWorkspaceIdPutRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdPut().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdPut().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdPutRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdPutRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdPutRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a specific workspace by ID
     * Update workspace
     */
    async organisationsOrgIdWorkspacesWorkspaceIdPut(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all requirements in the specified workspace
     * List requirements
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/requirements`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Lists all requirements in the specified workspace
     * List requirements
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdRequirementsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new requirement in the specified workspace
     * Create new requirement
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/requirements`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new requirement in the specified workspace
     * Create new requirement
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific requirement by ID
     * Delete requirement
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete().'
            );
        }

        if (requestParameters['requirementId'] == null) {
            throw new runtime.RequiredError(
                'requirementId',
                'Required parameter "requirementId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/requirements/{requirementId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters['requirementId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific requirement by ID
     * Delete requirement
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific requirement by ID
     * Get requirement by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGet().'
            );
        }

        if (requestParameters['requirementId'] == null) {
            throw new runtime.RequiredError(
                'requirementId',
                'Required parameter "requirementId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['relationships'] != null) {
            queryParameters['relationships'] = requestParameters['relationships'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/requirements/{requirementId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters['requirementId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific requirement by ID
     * Get requirement by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific requirement by ID
     * Update requirement
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPut().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPut().'
            );
        }

        if (requestParameters['requirementId'] == null) {
            throw new runtime.RequiredError(
                'requirementId',
                'Required parameter "requirementId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPut().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/requirements/{requirementId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters['requirementId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a specific requirement by ID
     * Update requirement
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPut(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all solutions in the specified workspace
     * List solutions
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Lists all solutions in the specified workspace
     * List solutions
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsGet200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdSolutionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new solution in the specified workspace
     * Create new solution
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new solution in the specified workspace
     * Create new solution
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdSolutionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific solution by ID
     * Delete solution
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete().'
            );
        }

        if (requestParameters['solutionId'] == null) {
            throw new runtime.RequiredError(
                'solutionId',
                'Required parameter "solutionId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions/{solutionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"solutionId"}}`, encodeURIComponent(String(requestParameters['solutionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific solution by ID
     * Delete solution
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDelete200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific solution by ID
     * Get solution by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGet().'
            );
        }

        if (requestParameters['solutionId'] == null) {
            throw new runtime.RequiredError(
                'solutionId',
                'Required parameter "solutionId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['relationships'] != null) {
            queryParameters['relationships'] = requestParameters['relationships'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions/{solutionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"solutionId"}}`, encodeURIComponent(String(requestParameters['solutionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific solution by ID
     * Get solution by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific solution by ID
     * Update solution
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPut().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPut().'
            );
        }

        if (requestParameters['solutionId'] == null) {
            throw new runtime.RequiredError(
                'solutionId',
                'Required parameter "solutionId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPut().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/solutions/{solutionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"solutionId"}}`, encodeURIComponent(String(requestParameters['solutionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a specific solution by ID
     * Update solution
     */
    async organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPut(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdSolutionsPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdSolutionsSolutionIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all topics in the specified workspace
     * List topics
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInnerFromJSON));
    }

    /**
     * Lists all topics in the specified workspace
     * List topics
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner>> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdTopicsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new topic in the specified workspace
     * Create new topic
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Creates a new topic in the specified workspace
     * Create new topic
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdTopicsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific topic by ID
     * Delete topic
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete().'
            );
        }

        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics/{topicId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"topicId"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific topic by ID
     * Delete topic
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific topic by ID
     * Get topic by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGet().'
            );
        }

        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics/{topicId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"topicId"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific topic by ID
     * Get topic by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific topic by ID
     * Update topic
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPut().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPut().'
            );
        }

        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPut().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics/{topicId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"topicId"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Updates a specific topic by ID
     * Update topic
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPut(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new organisation
     * Create new organisation
     */
    async organisationsPostRaw(requestParameters: OrganisationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsPost200Response>> {
        if (requestParameters['organisationsPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsPostRequest',
                'Required parameter "organisationsPostRequest" was null or undefined when calling organisationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsPostRequestToJSON(requestParameters['organisationsPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new organisation
     * Create new organisation
     */
    async organisationsPost(requestParameters: OrganisationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsPost200Response> {
        const response = await this.organisationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all requirements that are ready to be worked on.
     * Get all ready requirements
     */
    async v1RequirementsReadyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/requirements/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves all requirements that are ready to be worked on.
     * Get all ready requirements
     */
    async v1RequirementsReadyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200Response> {
        const response = await this.v1RequirementsReadyGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the ID and name of the authenticated user\'s organization and workspace. This is only callable by an API key which is workspace scoped.
     * Retrieve authenticated user\'s organization and workspace information
     */
    async v1WhoamiGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1WhoamiGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/whoami`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1WhoamiGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the ID and name of the authenticated user\'s organization and workspace. This is only callable by an API key which is workspace scoped.
     * Retrieve authenticated user\'s organization and workspace information
     */
    async v1WhoamiGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1WhoamiGet200Response> {
        const response = await this.v1WhoamiGetRaw(initOverrides);
        return await response.value();
    }

}
