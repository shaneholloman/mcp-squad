/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 0.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner,
  OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRequest,
} from '../models/index.js';
import {
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInnerFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInnerToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRequestToJSON,
} from '../models/index.js';

export interface OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGetRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDeleteRequest {
    orgId: string;
    workspaceId: string;
    requirementId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGetRequest {
    orgId: string;
    workspaceId: string;
    requirementId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutOperationRequest {
    orgId: string;
    workspaceId: string;
    requirementId: string;
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostOperationRequest {
    orgId: string;
    workspaceId: string;
    requirementId: string;
    action: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostOperationActionEnum;
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRequest;
}

/**
 * RequirementsApi - interface
 * 
 * @export
 * @interface RequirementsApiInterface
 */
export interface RequirementsApiInterface {
    /**
     * Lists all requirements in the specified workspace
     * @summary List requirements
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementsApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>>>;

    /**
     * Lists all requirements in the specified workspace
     * List requirements
     */
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>>;

    /**
     * Creates a new requirement in the specified workspace
     * @summary Create new requirement
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest} organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementsApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>>;

    /**
     * Creates a new requirement in the specified workspace
     * Create new requirement
     */
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>;

    /**
     * Deletes a specific requirement by ID
     * @summary Delete requirement
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} requirementId Requirement ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementsApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete200Response>>;

    /**
     * Deletes a specific requirement by ID
     * Delete requirement
     */
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete200Response>;

    /**
     * Retrieves a specific requirement by ID
     * @summary Get requirement by ID
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} requirementId Requirement ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementsApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>>;

    /**
     * Retrieves a specific requirement by ID
     * Get requirement by ID
     */
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>;

    /**
     * Updates a specific requirement by ID
     * @summary Update requirement
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} requirementId Requirement ID
     * @param {OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest} organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementsApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>>;

    /**
     * Updates a specific requirement by ID
     * Update requirement
     */
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPut(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>;

    /**
     * Add or remove relationships between a requirement and other entities (opportunities, solutions, outcomes, or feedback)
     * @summary Manage requirement relationships
     * @param {string} orgId Organization ID
     * @param {string} workspaceId Workspace ID
     * @param {string} requirementId Requirement ID
     * @param {'add' | 'remove'} action Action to perform on relationships
     * @param {OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRequest} organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementsApiInterface
     */
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Add or remove relationships between a requirement and other entities (opportunities, solutions, outcomes, or feedback)
     * Manage requirement relationships
     */
    organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves all requirements that are ready to be worked on.
     * @summary Get all ready requirements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementsApiInterface
     */
    v1RequirementsReadyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>>;

    /**
     * Retrieves all requirements that are ready to be worked on.
     * Get all ready requirements
     */
    v1RequirementsReadyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>;

}

/**
 * 
 */
export class RequirementsApi extends runtime.BaseAPI implements RequirementsApiInterface {

    /**
     * Lists all requirements in the specified workspace
     * List requirements
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/requirements`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInnerFromJSON));
    }

    /**
     * Lists all requirements in the specified workspace
     * List requirements
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdRequirementsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new requirement in the specified workspace
     * Create new requirement
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/requirements`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Creates a new requirement in the specified workspace
     * Create new requirement
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdRequirementsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific requirement by ID
     * Delete requirement
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete().'
            );
        }

        if (requestParameters['requirementId'] == null) {
            throw new runtime.RequiredError(
                'requirementId',
                'Required parameter "requirementId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/requirements/{requirementId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters['requirementId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific requirement by ID
     * Delete requirement
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDelete200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific requirement by ID
     * Get requirement by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGet().'
            );
        }

        if (requestParameters['requirementId'] == null) {
            throw new runtime.RequiredError(
                'requirementId',
                'Required parameter "requirementId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/requirements/{requirementId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters['requirementId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific requirement by ID
     * Get requirement by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific requirement by ID
     * Update requirement
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPut().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPut().'
            );
        }

        if (requestParameters['requirementId'] == null) {
            throw new runtime.RequiredError(
                'requirementId',
                'Required parameter "requirementId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPut().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/requirements/{requirementId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters['requirementId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Updates a specific requirement by ID
     * Update requirement
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPut(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add or remove relationships between a requirement and other entities (opportunities, solutions, outcomes, or feedback)
     * Manage requirement relationships
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['requirementId'] == null) {
            throw new runtime.RequiredError(
                'requirementId',
                'Required parameter "requirementId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/requirements/{requirementId}/relationships/{action}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters['requirementId']))).replace(`{${"action"}}`, encodeURIComponent(String(requestParameters['action']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove relationships between a requirement and other entities (opportunities, solutions, outcomes, or feedback)
     * Manage requirement relationships
     */
    async organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all requirements that are ready to be worked on.
     * Get all ready requirements
     */
    async v1RequirementsReadyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/requirements/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Retrieves all requirements that are ready to be worked on.
     * Get all ready requirements
     */
    async v1RequirementsReadyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsGet200ResponseInner> {
        const response = await this.v1RequirementsReadyGetRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostOperationActionEnum = {
    Add: 'add',
    Remove: 'remove'
} as const;
export type OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostOperationActionEnum = typeof OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostOperationActionEnum[keyof typeof OrganisationsOrgIdWorkspacesWorkspaceIdRequirementsRequirementIdRelationshipsActionPostOperationActionEnum];
