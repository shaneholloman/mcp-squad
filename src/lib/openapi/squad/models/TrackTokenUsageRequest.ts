/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: help@meetsquad.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface TrackTokenUsageRequest
 */
export interface TrackTokenUsageRequest {
    /**
     * Source of the token usage
     * @type {string}
     * @memberof TrackTokenUsageRequest
     */
    source: string;
    /**
     * Number of input tokens
     * @type {number}
     * @memberof TrackTokenUsageRequest
     */
    inputTokens: number;
    /**
     * Number of output tokens
     * @type {number}
     * @memberof TrackTokenUsageRequest
     */
    outputTokens: number;
    /**
     * Whether the request is using thinking mode
     * @type {boolean}
     * @memberof TrackTokenUsageRequest
     */
    thinking: boolean;
}

/**
 * Check if a given object implements the TrackTokenUsageRequest interface.
 */
export function instanceOfTrackTokenUsageRequest(value: object): value is TrackTokenUsageRequest {
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('inputTokens' in value) || value['inputTokens'] === undefined) return false;
    if (!('outputTokens' in value) || value['outputTokens'] === undefined) return false;
    if (!('thinking' in value) || value['thinking'] === undefined) return false;
    return true;
}

export function TrackTokenUsageRequestFromJSON(json: any): TrackTokenUsageRequest {
    return TrackTokenUsageRequestFromJSONTyped(json, false);
}

export function TrackTokenUsageRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrackTokenUsageRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'source': json['source'],
        'inputTokens': json['inputTokens'],
        'outputTokens': json['outputTokens'],
        'thinking': json['thinking'],
    };
}

export function TrackTokenUsageRequestToJSON(json: any): TrackTokenUsageRequest {
    return TrackTokenUsageRequestToJSONTyped(json, false);
}

export function TrackTokenUsageRequestToJSONTyped(value?: TrackTokenUsageRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'source': value['source'],
        'inputTokens': value['inputTokens'],
        'outputTokens': value['outputTokens'],
        'thinking': value['thinking'],
    };
}

