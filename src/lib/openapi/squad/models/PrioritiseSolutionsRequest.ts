/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 2.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * Request schema for prioritising solutions
 * @export
 * @interface PrioritiseSolutionsRequest
 */
export interface PrioritiseSolutionsRequest {
    /**
     * ID of solution before which to place the solutions, or null to place at the end
     * @type {string}
     * @memberof PrioritiseSolutionsRequest
     */
    beforeId: string | null;
    /**
     * List of solution IDs to move
     * @type {Array<string>}
     * @memberof PrioritiseSolutionsRequest
     */
    solutionIds: Array<string>;
    /**
     * Who triggered the priority update. If not provided, defaults to 'user'
     * @type {string}
     * @memberof PrioritiseSolutionsRequest
     */
    triggeredBy?: PrioritiseSolutionsRequestTriggeredByEnum;
}


/**
 * @export
 */
export const PrioritiseSolutionsRequestTriggeredByEnum = {
    User: 'user',
    Ai: 'AI'
} as const;
export type PrioritiseSolutionsRequestTriggeredByEnum = typeof PrioritiseSolutionsRequestTriggeredByEnum[keyof typeof PrioritiseSolutionsRequestTriggeredByEnum];


/**
 * Check if a given object implements the PrioritiseSolutionsRequest interface.
 */
export function instanceOfPrioritiseSolutionsRequest(value: object): value is PrioritiseSolutionsRequest {
    if (!('beforeId' in value) || value['beforeId'] === undefined) return false;
    if (!('solutionIds' in value) || value['solutionIds'] === undefined) return false;
    return true;
}

export function PrioritiseSolutionsRequestFromJSON(json: any): PrioritiseSolutionsRequest {
    return PrioritiseSolutionsRequestFromJSONTyped(json, false);
}

export function PrioritiseSolutionsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PrioritiseSolutionsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'beforeId': json['beforeId'],
        'solutionIds': json['solutionIds'],
        'triggeredBy': json['triggeredBy'] == null ? undefined : json['triggeredBy'],
    };
}

export function PrioritiseSolutionsRequestToJSON(json: any): PrioritiseSolutionsRequest {
    return PrioritiseSolutionsRequestToJSONTyped(json, false);
}

export function PrioritiseSolutionsRequestToJSONTyped(value?: PrioritiseSolutionsRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'beforeId': value['beforeId'],
        'solutionIds': value['solutionIds'],
        'triggeredBy': value['triggeredBy'],
    };
}

