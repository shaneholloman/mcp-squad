/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 0.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { SolutionRefinementLogInner } from './SolutionRefinementLogInner.js';
import {
    SolutionRefinementLogInnerFromJSON,
    SolutionRefinementLogInnerFromJSONTyped,
    SolutionRefinementLogInnerToJSON,
    SolutionRefinementLogInnerToJSONTyped,
} from './SolutionRefinementLogInner.js';

/**
 * Request schema for updating a solution
 * @export
 * @interface UpdateSolutionPayload
 */
export interface UpdateSolutionPayload {
    /**
     * System prompt used to generate the requirement
     * @type {string}
     * @memberof UpdateSolutionPayload
     */
    systemPrompt?: string | null;
    /**
     * Current state of AI processing
     * @type {string}
     * @memberof UpdateSolutionPayload
     */
    aiProcessingState?: UpdateSolutionPayloadAiProcessingStateEnum;
    /**
     * Log of refinements made to the requirement
     * @type {Array<SolutionRefinementLogInner>}
     * @memberof UpdateSolutionPayload
     */
    refinementLog?: Array<SolutionRefinementLogInner>;
    /**
     * Title of the solution
     * @type {string}
     * @memberof UpdateSolutionPayload
     */
    title?: string;
    /**
     * Description of the solution
     * @type {string}
     * @memberof UpdateSolutionPayload
     */
    description?: string;
    /**
     * Entity status
     * @type {string}
     * @memberof UpdateSolutionPayload
     */
    status?: UpdateSolutionPayloadStatusEnum;
    /**
     * List of pros/advantages for this solution
     * @type {Array<string>}
     * @memberof UpdateSolutionPayload
     */
    pros?: Array<string>;
    /**
     * List of cons/disadvantages for this solution
     * @type {Array<string>}
     * @memberof UpdateSolutionPayload
     */
    cons?: Array<string>;
    /**
     * How the solution was created
     * @type {string}
     * @memberof UpdateSolutionPayload
     */
    createdBy?: UpdateSolutionPayloadCreatedByEnum;
    /**
     * ID of the solution owner
     * @type {string}
     * @memberof UpdateSolutionPayload
     */
    ownerId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateSolutionPayload
     */
    opportunityIds?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateSolutionPayload
     */
    requirementIds?: Array<string>;
}


/**
 * @export
 */
export const UpdateSolutionPayloadAiProcessingStateEnum = {
    Initial: 'INITIAL',
    Processing: 'PROCESSING',
    Finished: 'FINISHED',
    Error: 'ERROR'
} as const;
export type UpdateSolutionPayloadAiProcessingStateEnum = typeof UpdateSolutionPayloadAiProcessingStateEnum[keyof typeof UpdateSolutionPayloadAiProcessingStateEnum];

/**
 * @export
 */
export const UpdateSolutionPayloadStatusEnum = {
    New: 'New',
    Solved: 'Solved',
    Planned: 'Planned',
    InProgress: 'InProgress'
} as const;
export type UpdateSolutionPayloadStatusEnum = typeof UpdateSolutionPayloadStatusEnum[keyof typeof UpdateSolutionPayloadStatusEnum];

/**
 * @export
 */
export const UpdateSolutionPayloadCreatedByEnum = {
    User: 'user',
    Generated: 'generated'
} as const;
export type UpdateSolutionPayloadCreatedByEnum = typeof UpdateSolutionPayloadCreatedByEnum[keyof typeof UpdateSolutionPayloadCreatedByEnum];


/**
 * Check if a given object implements the UpdateSolutionPayload interface.
 */
export function instanceOfUpdateSolutionPayload(value: object): value is UpdateSolutionPayload {
    return true;
}

export function UpdateSolutionPayloadFromJSON(json: any): UpdateSolutionPayload {
    return UpdateSolutionPayloadFromJSONTyped(json, false);
}

export function UpdateSolutionPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateSolutionPayload {
    if (json == null) {
        return json;
    }
    return {
        
        'systemPrompt': json['systemPrompt'] == null ? undefined : json['systemPrompt'],
        'aiProcessingState': json['aiProcessingState'] == null ? undefined : json['aiProcessingState'],
        'refinementLog': json['refinementLog'] == null ? undefined : ((json['refinementLog'] as Array<any>).map(SolutionRefinementLogInnerFromJSON)),
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'status': json['status'] == null ? undefined : json['status'],
        'pros': json['pros'] == null ? undefined : json['pros'],
        'cons': json['cons'] == null ? undefined : json['cons'],
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'ownerId': json['ownerId'] == null ? undefined : json['ownerId'],
        'opportunityIds': json['opportunityIds'] == null ? undefined : json['opportunityIds'],
        'requirementIds': json['requirementIds'] == null ? undefined : json['requirementIds'],
    };
}

export function UpdateSolutionPayloadToJSON(json: any): UpdateSolutionPayload {
    return UpdateSolutionPayloadToJSONTyped(json, false);
}

export function UpdateSolutionPayloadToJSONTyped(value?: UpdateSolutionPayload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'systemPrompt': value['systemPrompt'],
        'aiProcessingState': value['aiProcessingState'],
        'refinementLog': value['refinementLog'] == null ? undefined : ((value['refinementLog'] as Array<any>).map(SolutionRefinementLogInnerToJSON)),
        'title': value['title'],
        'description': value['description'],
        'status': value['status'],
        'pros': value['pros'],
        'cons': value['cons'],
        'createdBy': value['createdBy'],
        'ownerId': value['ownerId'],
        'opportunityIds': value['opportunityIds'],
        'requirementIds': value['requirementIds'],
    };
}

