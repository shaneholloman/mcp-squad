/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { SolutionRefinementLogInner } from './SolutionRefinementLogInner.js';
import {
    SolutionRefinementLogInnerFromJSON,
    SolutionRefinementLogInnerFromJSONTyped,
    SolutionRefinementLogInnerToJSON,
    SolutionRefinementLogInnerToJSONTyped,
} from './SolutionRefinementLogInner.js';

/**
 * Requirement data for a product or feature
 * @export
 * @interface Requirement
 */
export interface Requirement {
    /**
     * Unique identifier for the requirement
     * @type {string}
     * @memberof Requirement
     */
    id: string;
    /**
     * System prompt used to generate the requirement
     * @type {string}
     * @memberof Requirement
     */
    systemPrompt?: string | null;
    /**
     * Current state of AI processing
     * @type {string}
     * @memberof Requirement
     */
    aiProcessingState: RequirementAiProcessingStateEnum;
    /**
     * Log of refinements made to the requirement
     * @type {Array<SolutionRefinementLogInner>}
     * @memberof Requirement
     */
    refinementLog: Array<SolutionRefinementLogInner>;
    /**
     * Title of the requirement
     * @type {string}
     * @memberof Requirement
     */
    title: string;
    /**
     * Description of the requirement
     * @type {string}
     * @memberof Requirement
     */
    description: string;
    /**
     * The feature this requirement belongs to
     * @type {string}
     * @memberof Requirement
     */
    feature: string;
    /**
     * Detailed requirements specification
     * @type {string}
     * @memberof Requirement
     */
    requirements: string;
    /**
     * Whether the requirement content should be hidden
     * @type {boolean}
     * @memberof Requirement
     */
    hideContent: boolean;
    /**
     * ID of the requirement owner
     * @type {string}
     * @memberof Requirement
     */
    ownerId?: string;
    /**
     * Creation timestamp
     * @type {string}
     * @memberof Requirement
     */
    createdAt: string;
    /**
     * Last update timestamp
     * @type {string}
     * @memberof Requirement
     */
    updatedAt: string;
    /**
     * 
     * @type {string}
     * @memberof Requirement
     */
    status: RequirementStatusEnum;
}


/**
 * @export
 */
export const RequirementAiProcessingStateEnum = {
    Initial: 'INITIAL',
    Processing: 'PROCESSING',
    Finished: 'FINISHED',
    Error: 'ERROR'
} as const;
export type RequirementAiProcessingStateEnum = typeof RequirementAiProcessingStateEnum[keyof typeof RequirementAiProcessingStateEnum];

/**
 * @export
 */
export const RequirementStatusEnum = {
    Draft: 'draft',
    Ready: 'ready',
    Complete: 'complete'
} as const;
export type RequirementStatusEnum = typeof RequirementStatusEnum[keyof typeof RequirementStatusEnum];


/**
 * Check if a given object implements the Requirement interface.
 */
export function instanceOfRequirement(value: object): value is Requirement {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('aiProcessingState' in value) || value['aiProcessingState'] === undefined) return false;
    if (!('refinementLog' in value) || value['refinementLog'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('feature' in value) || value['feature'] === undefined) return false;
    if (!('requirements' in value) || value['requirements'] === undefined) return false;
    if (!('hideContent' in value) || value['hideContent'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function RequirementFromJSON(json: any): Requirement {
    return RequirementFromJSONTyped(json, false);
}

export function RequirementFromJSONTyped(json: any, ignoreDiscriminator: boolean): Requirement {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'systemPrompt': json['systemPrompt'] == null ? undefined : json['systemPrompt'],
        'aiProcessingState': json['aiProcessingState'],
        'refinementLog': ((json['refinementLog'] as Array<any>).map(SolutionRefinementLogInnerFromJSON)),
        'title': json['title'],
        'description': json['description'],
        'feature': json['feature'],
        'requirements': json['requirements'],
        'hideContent': json['hideContent'],
        'ownerId': json['ownerId'] == null ? undefined : json['ownerId'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
        'status': json['status'],
    };
}

export function RequirementToJSON(json: any): Requirement {
    return RequirementToJSONTyped(json, false);
}

export function RequirementToJSONTyped(value?: Requirement | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'systemPrompt': value['systemPrompt'],
        'aiProcessingState': value['aiProcessingState'],
        'refinementLog': ((value['refinementLog'] as Array<any>).map(SolutionRefinementLogInnerToJSON)),
        'title': value['title'],
        'description': value['description'],
        'feature': value['feature'],
        'requirements': value['requirements'],
        'hideContent': value['hideContent'],
        'ownerId': value['ownerId'],
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
        'status': value['status'],
    };
}

