/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: help@meetsquad.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { CreateSolutionPayloadRefinementLogInner } from './CreateSolutionPayloadRefinementLogInner.js';
import {
    CreateSolutionPayloadRefinementLogInnerFromJSON,
    CreateSolutionPayloadRefinementLogInnerFromJSONTyped,
    CreateSolutionPayloadRefinementLogInnerToJSON,
    CreateSolutionPayloadRefinementLogInnerToJSONTyped,
} from './CreateSolutionPayloadRefinementLogInner.js';

/**
 * Request schema for creating a solution
 * @export
 * @interface CreateSolutionPayload
 */
export interface CreateSolutionPayload {
    /**
     * 
     * @type {string}
     * @memberof CreateSolutionPayload
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSolutionPayload
     */
    systemPrompt?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSolutionPayload
     */
    aiProcessingState?: CreateSolutionPayloadAiProcessingStateEnum;
    /**
     * 
     * @type {Array<CreateSolutionPayloadRefinementLogInner>}
     * @memberof CreateSolutionPayload
     */
    refinementLog?: Array<CreateSolutionPayloadRefinementLogInner>;
    /**
     * Title of the solution
     * @type {string}
     * @memberof CreateSolutionPayload
     */
    title: string;
    /**
     * Description of the solution
     * @type {string}
     * @memberof CreateSolutionPayload
     */
    description: string;
    /**
     * Solution status
     * @type {string}
     * @memberof CreateSolutionPayload
     */
    status?: CreateSolutionPayloadStatusEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateSolutionPayload
     */
    pros?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateSolutionPayload
     */
    cons?: Array<string>;
    /**
     * How the solution was created
     * @type {string}
     * @memberof CreateSolutionPayload
     */
    createdBy: CreateSolutionPayloadCreatedByEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateSolutionPayload
     */
    ownerId?: string;
    /**
     * Product Requirements Document content for the solution
     * @type {string}
     * @memberof CreateSolutionPayload
     */
    prd: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateSolutionPayload
     */
    opportunityIds?: Array<string>;
    /**
     * Solution horizon
     * @type {string}
     * @memberof CreateSolutionPayload
     */
    horizon?: CreateSolutionPayloadHorizonEnum;
}


/**
 * @export
 */
export const CreateSolutionPayloadAiProcessingStateEnum = {
    Initial: 'INITIAL',
    Processing: 'PROCESSING',
    Finished: 'FINISHED',
    Error: 'ERROR'
} as const;
export type CreateSolutionPayloadAiProcessingStateEnum = typeof CreateSolutionPayloadAiProcessingStateEnum[keyof typeof CreateSolutionPayloadAiProcessingStateEnum];

/**
 * @export
 */
export const CreateSolutionPayloadStatusEnum = {
    Backlog: 'Backlog',
    New: 'New',
    Planned: 'Planned',
    InDevelopment: 'InDevelopment',
    Complete: 'Complete',
    Cancelled: 'Cancelled',
    Live: 'Live'
} as const;
export type CreateSolutionPayloadStatusEnum = typeof CreateSolutionPayloadStatusEnum[keyof typeof CreateSolutionPayloadStatusEnum];

/**
 * @export
 */
export const CreateSolutionPayloadCreatedByEnum = {
    User: 'user',
    Generated: 'generated'
} as const;
export type CreateSolutionPayloadCreatedByEnum = typeof CreateSolutionPayloadCreatedByEnum[keyof typeof CreateSolutionPayloadCreatedByEnum];

/**
 * @export
 */
export const CreateSolutionPayloadHorizonEnum = {
    Now: 'now',
    Next: 'next',
    Later: 'later'
} as const;
export type CreateSolutionPayloadHorizonEnum = typeof CreateSolutionPayloadHorizonEnum[keyof typeof CreateSolutionPayloadHorizonEnum];


/**
 * Check if a given object implements the CreateSolutionPayload interface.
 */
export function instanceOfCreateSolutionPayload(value: object): value is CreateSolutionPayload {
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('prd' in value) || value['prd'] === undefined) return false;
    return true;
}

export function CreateSolutionPayloadFromJSON(json: any): CreateSolutionPayload {
    return CreateSolutionPayloadFromJSONTyped(json, false);
}

export function CreateSolutionPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateSolutionPayload {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'systemPrompt': json['systemPrompt'] == null ? undefined : json['systemPrompt'],
        'aiProcessingState': json['aiProcessingState'] == null ? undefined : json['aiProcessingState'],
        'refinementLog': json['refinementLog'] == null ? undefined : ((json['refinementLog'] as Array<any>).map(CreateSolutionPayloadRefinementLogInnerFromJSON)),
        'title': json['title'],
        'description': json['description'],
        'status': json['status'] == null ? undefined : json['status'],
        'pros': json['pros'] == null ? undefined : json['pros'],
        'cons': json['cons'] == null ? undefined : json['cons'],
        'createdBy': json['createdBy'],
        'ownerId': json['ownerId'] == null ? undefined : json['ownerId'],
        'prd': json['prd'],
        'opportunityIds': json['opportunityIds'] == null ? undefined : json['opportunityIds'],
        'horizon': json['horizon'] == null ? undefined : json['horizon'],
    };
}

export function CreateSolutionPayloadToJSON(json: any): CreateSolutionPayload {
    return CreateSolutionPayloadToJSONTyped(json, false);
}

export function CreateSolutionPayloadToJSONTyped(value?: CreateSolutionPayload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'systemPrompt': value['systemPrompt'],
        'aiProcessingState': value['aiProcessingState'],
        'refinementLog': value['refinementLog'] == null ? undefined : ((value['refinementLog'] as Array<any>).map(CreateSolutionPayloadRefinementLogInnerToJSON)),
        'title': value['title'],
        'description': value['description'],
        'status': value['status'],
        'pros': value['pros'],
        'cons': value['cons'],
        'createdBy': value['createdBy'],
        'ownerId': value['ownerId'],
        'prd': value['prd'],
        'opportunityIds': value['opportunityIds'],
        'horizon': value['horizon'],
    };
}

