/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 0.14.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface SolutionRefinementLogInner
 */
export interface SolutionRefinementLogInner {
  /**
   * Unique identifier for the log entry
   * @type {string}
   * @memberof SolutionRefinementLogInner
   */
  id: string;
  /**
   * Role of the entity making the log entry
   * @type {string}
   * @memberof SolutionRefinementLogInner
   */
  role: SolutionRefinementLogInnerRoleEnum;
  /**
   * Content of the log entry
   * @type {string}
   * @memberof SolutionRefinementLogInner
   */
  content: string;
}

/**
 * @export
 */
export const SolutionRefinementLogInnerRoleEnum = {
  User: "user",
  Assistant: "assistant",
} as const;
export type SolutionRefinementLogInnerRoleEnum =
  (typeof SolutionRefinementLogInnerRoleEnum)[keyof typeof SolutionRefinementLogInnerRoleEnum];

/**
 * Check if a given object implements the SolutionRefinementLogInner interface.
 */
export function instanceOfSolutionRefinementLogInner(
  value: object,
): value is SolutionRefinementLogInner {
  if (!("id" in value) || value["id"] === undefined) return false;
  if (!("role" in value) || value["role"] === undefined) return false;
  if (!("content" in value) || value["content"] === undefined) return false;
  return true;
}

export function SolutionRefinementLogInnerFromJSON(
  json: any,
): SolutionRefinementLogInner {
  return SolutionRefinementLogInnerFromJSONTyped(json, false);
}

export function SolutionRefinementLogInnerFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SolutionRefinementLogInner {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"],
    role: json["role"],
    content: json["content"],
  };
}

export function SolutionRefinementLogInnerToJSON(
  json: any,
): SolutionRefinementLogInner {
  return SolutionRefinementLogInnerToJSONTyped(json, false);
}

export function SolutionRefinementLogInnerToJSONTyped(
  value?: SolutionRefinementLogInner | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    role: value["role"],
    content: value["content"],
  };
}
