/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: help@meetsquad.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface CreateInsightRequest
 */
export interface CreateInsightRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateInsightRequest
     */
    id?: string;
    /**
     * Type of insight
     * @type {string}
     * @memberof CreateInsightRequest
     */
    type: CreateInsightRequestTypeEnum;
    /**
     * Title of the insight
     * @type {string}
     * @memberof CreateInsightRequest
     */
    title: string;
    /**
     * Description of the insight
     * @type {string}
     * @memberof CreateInsightRequest
     */
    description: string;
    /**
     * ID of the insight owner
     * @type {string}
     * @memberof CreateInsightRequest
     */
    ownerId?: string;
    /**
     * Wilson score + corroboration score (0-1)
     * @type {number}
     * @memberof CreateInsightRequest
     */
    strengthScore?: number;
    /**
     * Recency and burst detection score
     * @type {number}
     * @memberof CreateInsightRequest
     */
    momentumScore?: number;
    /**
     * Weighted composite of strength and momentum scores
     * @type {number}
     * @memberof CreateInsightRequest
     */
    combinedScore?: number;
    /**
     * ISO timestamp of last score calculation
     * @type {Date}
     * @memberof CreateInsightRequest
     */
    lastScoreCalculatedAt?: Date;
    /**
     * BERT embeddings for topic modeling
     * @type {Array<number>}
     * @memberof CreateInsightRequest
     */
    topicEmbeddings?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof CreateInsightRequest
     */
    organisationId: string;
    /**
     * 
     * @type {string}
     * @memberof CreateInsightRequest
     */
    workspaceId: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateInsightRequest
     */
    seen?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateInsightRequest
     */
    feedbackIds?: Array<string>;
}


/**
 * @export
 */
export const CreateInsightRequestTypeEnum = {
    Feedback: 'Feedback',
    Bug: 'Bug',
    FeatureRequest: 'FeatureRequest'
} as const;
export type CreateInsightRequestTypeEnum = typeof CreateInsightRequestTypeEnum[keyof typeof CreateInsightRequestTypeEnum];


/**
 * Check if a given object implements the CreateInsightRequest interface.
 */
export function instanceOfCreateInsightRequest(value: object): value is CreateInsightRequest {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('organisationId' in value) || value['organisationId'] === undefined) return false;
    if (!('workspaceId' in value) || value['workspaceId'] === undefined) return false;
    return true;
}

export function CreateInsightRequestFromJSON(json: any): CreateInsightRequest {
    return CreateInsightRequestFromJSONTyped(json, false);
}

export function CreateInsightRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateInsightRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'],
        'title': json['title'],
        'description': json['description'],
        'ownerId': json['ownerId'] == null ? undefined : json['ownerId'],
        'strengthScore': json['strengthScore'] == null ? undefined : json['strengthScore'],
        'momentumScore': json['momentumScore'] == null ? undefined : json['momentumScore'],
        'combinedScore': json['combinedScore'] == null ? undefined : json['combinedScore'],
        'lastScoreCalculatedAt': json['lastScoreCalculatedAt'] == null ? undefined : (new Date(json['lastScoreCalculatedAt'])),
        'topicEmbeddings': json['topicEmbeddings'] == null ? undefined : json['topicEmbeddings'],
        'organisationId': json['organisationId'],
        'workspaceId': json['workspaceId'],
        'seen': json['seen'] == null ? undefined : json['seen'],
        'feedbackIds': json['feedbackIds'] == null ? undefined : json['feedbackIds'],
    };
}

export function CreateInsightRequestToJSON(json: any): CreateInsightRequest {
    return CreateInsightRequestToJSONTyped(json, false);
}

export function CreateInsightRequestToJSONTyped(value?: CreateInsightRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'title': value['title'],
        'description': value['description'],
        'ownerId': value['ownerId'],
        'strengthScore': value['strengthScore'],
        'momentumScore': value['momentumScore'],
        'combinedScore': value['combinedScore'],
        'lastScoreCalculatedAt': value['lastScoreCalculatedAt'] == null ? undefined : ((value['lastScoreCalculatedAt']).toISOString()),
        'topicEmbeddings': value['topicEmbeddings'],
        'organisationId': value['organisationId'],
        'workspaceId': value['workspaceId'],
        'seen': value['seen'],
        'feedbackIds': value['feedbackIds'],
    };
}

