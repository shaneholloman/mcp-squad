/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 0.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { SolutionRefinementLogInner } from './SolutionRefinementLogInner.js';
import {
    SolutionRefinementLogInnerFromJSON,
    SolutionRefinementLogInnerFromJSONTyped,
    SolutionRefinementLogInnerToJSON,
    SolutionRefinementLogInnerToJSONTyped,
} from './SolutionRefinementLogInner.js';

/**
 * Request schema for updating a requirement
 * @export
 * @interface UpdateRequirement
 */
export interface UpdateRequirement {
    /**
     * System prompt used to generate the requirement
     * @type {string}
     * @memberof UpdateRequirement
     */
    systemPrompt?: string | null;
    /**
     * Current state of AI processing
     * @type {string}
     * @memberof UpdateRequirement
     */
    aiProcessingState?: UpdateRequirementAiProcessingStateEnum;
    /**
     * Log of refinements made to the requirement
     * @type {Array<SolutionRefinementLogInner>}
     * @memberof UpdateRequirement
     */
    refinementLog?: Array<SolutionRefinementLogInner>;
    /**
     * Title of the requirement
     * @type {string}
     * @memberof UpdateRequirement
     */
    title?: string;
    /**
     * Description of the requirement
     * @type {string}
     * @memberof UpdateRequirement
     */
    description?: string;
    /**
     * The feature this requirement belongs to
     * @type {string}
     * @memberof UpdateRequirement
     */
    feature?: string;
    /**
     * Detailed requirements specification
     * @type {string}
     * @memberof UpdateRequirement
     */
    requirements?: string;
    /**
     * ID of the requirement owner
     * @type {string}
     * @memberof UpdateRequirement
     */
    ownerId?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRequirement
     */
    status?: UpdateRequirementStatusEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateRequirement
     */
    opportunityIds?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateRequirement
     */
    solutionIds?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateRequirement
     */
    feedbackIds?: Array<string>;
}


/**
 * @export
 */
export const UpdateRequirementAiProcessingStateEnum = {
    Initial: 'INITIAL',
    Processing: 'PROCESSING',
    Finished: 'FINISHED',
    Error: 'ERROR'
} as const;
export type UpdateRequirementAiProcessingStateEnum = typeof UpdateRequirementAiProcessingStateEnum[keyof typeof UpdateRequirementAiProcessingStateEnum];

/**
 * @export
 */
export const UpdateRequirementStatusEnum = {
    Draft: 'draft',
    Ready: 'ready',
    Complete: 'complete'
} as const;
export type UpdateRequirementStatusEnum = typeof UpdateRequirementStatusEnum[keyof typeof UpdateRequirementStatusEnum];


/**
 * Check if a given object implements the UpdateRequirement interface.
 */
export function instanceOfUpdateRequirement(value: object): value is UpdateRequirement {
    return true;
}

export function UpdateRequirementFromJSON(json: any): UpdateRequirement {
    return UpdateRequirementFromJSONTyped(json, false);
}

export function UpdateRequirementFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateRequirement {
    if (json == null) {
        return json;
    }
    return {
        
        'systemPrompt': json['systemPrompt'] == null ? undefined : json['systemPrompt'],
        'aiProcessingState': json['aiProcessingState'] == null ? undefined : json['aiProcessingState'],
        'refinementLog': json['refinementLog'] == null ? undefined : ((json['refinementLog'] as Array<any>).map(SolutionRefinementLogInnerFromJSON)),
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'feature': json['feature'] == null ? undefined : json['feature'],
        'requirements': json['requirements'] == null ? undefined : json['requirements'],
        'ownerId': json['ownerId'] == null ? undefined : json['ownerId'],
        'status': json['status'] == null ? undefined : json['status'],
        'opportunityIds': json['opportunityIds'] == null ? undefined : json['opportunityIds'],
        'solutionIds': json['solutionIds'] == null ? undefined : json['solutionIds'],
        'feedbackIds': json['feedbackIds'] == null ? undefined : json['feedbackIds'],
    };
}

export function UpdateRequirementToJSON(json: any): UpdateRequirement {
    return UpdateRequirementToJSONTyped(json, false);
}

export function UpdateRequirementToJSONTyped(value?: UpdateRequirement | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'systemPrompt': value['systemPrompt'],
        'aiProcessingState': value['aiProcessingState'],
        'refinementLog': value['refinementLog'] == null ? undefined : ((value['refinementLog'] as Array<any>).map(SolutionRefinementLogInnerToJSON)),
        'title': value['title'],
        'description': value['description'],
        'feature': value['feature'],
        'requirements': value['requirements'],
        'ownerId': value['ownerId'],
        'status': value['status'],
        'opportunityIds': value['opportunityIds'],
        'solutionIds': value['solutionIds'],
        'feedbackIds': value['feedbackIds'],
    };
}

