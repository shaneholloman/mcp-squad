/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 2.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { Requirement } from './Requirement.js';
import {
    RequirementFromJSON,
    RequirementFromJSONTyped,
    RequirementToJSON,
    RequirementToJSONTyped,
} from './Requirement.js';
import type { Outcome } from './Outcome.js';
import {
    OutcomeFromJSON,
    OutcomeFromJSONTyped,
    OutcomeToJSON,
    OutcomeToJSONTyped,
} from './Outcome.js';
import type { Opportunity } from './Opportunity.js';
import {
    OpportunityFromJSON,
    OpportunityFromJSONTyped,
    OpportunityToJSON,
    OpportunityToJSONTyped,
} from './Opportunity.js';
import type { Solution } from './Solution.js';
import {
    SolutionFromJSON,
    SolutionFromJSONTyped,
    SolutionToJSON,
    SolutionToJSONTyped,
} from './Solution.js';

/**
 * Insight with relationships (legacy - use InsightWithRelationships)
 * @export
 * @interface InsightWithRelationships
 */
export interface InsightWithRelationships {
    /**
     * 
     * @type {Array<Opportunity>}
     * @memberof InsightWithRelationships
     */
    opportunities: Array<Opportunity>;
    /**
     * 
     * @type {Array<Solution>}
     * @memberof InsightWithRelationships
     */
    solutions: Array<Solution>;
    /**
     * 
     * @type {Array<Requirement>}
     * @memberof InsightWithRelationships
     */
    requirements: Array<Requirement>;
    /**
     * 
     * @type {Array<Outcome>}
     * @memberof InsightWithRelationships
     */
    outcomes: Array<Outcome>;
    /**
     * Unique identifier for the insight
     * @type {string}
     * @memberof InsightWithRelationships
     */
    id: string;
    /**
     * Type of insight
     * @type {string}
     * @memberof InsightWithRelationships
     */
    type: InsightWithRelationshipsTypeEnum;
    /**
     * Source of the insight
     * @type {string}
     * @memberof InsightWithRelationships
     */
    source: string;
    /**
     * Title of the insight
     * @type {string}
     * @memberof InsightWithRelationships
     */
    title: string;
    /**
     * Description of the insight
     * @type {string}
     * @memberof InsightWithRelationships
     */
    description: string;
    /**
     * Detailed feedback content
     * @type {string}
     * @memberof InsightWithRelationships
     */
    feedback: string;
    /**
     * Whether the insight has been seen
     * @type {boolean}
     * @memberof InsightWithRelationships
     */
    seen: boolean;
    /**
     * Whether the insight content should be hidden
     * @type {boolean}
     * @memberof InsightWithRelationships
     */
    hideContent: boolean;
    /**
     * ID of the insight owner
     * @type {string}
     * @memberof InsightWithRelationships
     */
    ownerId?: string;
    /**
     * Creation timestamp
     * @type {string}
     * @memberof InsightWithRelationships
     */
    createdAt: string;
    /**
     * Last update timestamp
     * @type {string}
     * @memberof InsightWithRelationships
     */
    updatedAt: string;
}


/**
 * @export
 */
export const InsightWithRelationshipsTypeEnum = {
    Feedback: 'Feedback',
    Bug: 'Bug',
    FeatureRequest: 'FeatureRequest'
} as const;
export type InsightWithRelationshipsTypeEnum = typeof InsightWithRelationshipsTypeEnum[keyof typeof InsightWithRelationshipsTypeEnum];


/**
 * Check if a given object implements the InsightWithRelationships interface.
 */
export function instanceOfInsightWithRelationships(value: object): value is InsightWithRelationships {
    if (!('opportunities' in value) || value['opportunities'] === undefined) return false;
    if (!('solutions' in value) || value['solutions'] === undefined) return false;
    if (!('requirements' in value) || value['requirements'] === undefined) return false;
    if (!('outcomes' in value) || value['outcomes'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('feedback' in value) || value['feedback'] === undefined) return false;
    if (!('seen' in value) || value['seen'] === undefined) return false;
    if (!('hideContent' in value) || value['hideContent'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function InsightWithRelationshipsFromJSON(json: any): InsightWithRelationships {
    return InsightWithRelationshipsFromJSONTyped(json, false);
}

export function InsightWithRelationshipsFromJSONTyped(json: any, ignoreDiscriminator: boolean): InsightWithRelationships {
    if (json == null) {
        return json;
    }
    return {
        
        'opportunities': ((json['opportunities'] as Array<any>).map(OpportunityFromJSON)),
        'solutions': ((json['solutions'] as Array<any>).map(SolutionFromJSON)),
        'requirements': ((json['requirements'] as Array<any>).map(RequirementFromJSON)),
        'outcomes': ((json['outcomes'] as Array<any>).map(OutcomeFromJSON)),
        'id': json['id'],
        'type': json['type'],
        'source': json['source'],
        'title': json['title'],
        'description': json['description'],
        'feedback': json['feedback'],
        'seen': json['seen'],
        'hideContent': json['hideContent'],
        'ownerId': json['ownerId'] == null ? undefined : json['ownerId'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
    };
}

export function InsightWithRelationshipsToJSON(json: any): InsightWithRelationships {
    return InsightWithRelationshipsToJSONTyped(json, false);
}

export function InsightWithRelationshipsToJSONTyped(value?: InsightWithRelationships | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'opportunities': ((value['opportunities'] as Array<any>).map(OpportunityToJSON)),
        'solutions': ((value['solutions'] as Array<any>).map(SolutionToJSON)),
        'requirements': ((value['requirements'] as Array<any>).map(RequirementToJSON)),
        'outcomes': ((value['outcomes'] as Array<any>).map(OutcomeToJSON)),
        'id': value['id'],
        'type': value['type'],
        'source': value['source'],
        'title': value['title'],
        'description': value['description'],
        'feedback': value['feedback'],
        'seen': value['seen'],
        'hideContent': value['hideContent'],
        'ownerId': value['ownerId'],
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
    };
}

