/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 0.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner,
  OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequest,
} from '../models/index';
import {
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInnerFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInnerToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequestToJSON,
} from '../models/index';

export interface OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGetRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDeleteRequest {
    orgId: string;
    workspaceId: string;
    topicId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGetRequest {
    orgId: string;
    workspaceId: string;
    topicId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutOperationRequest {
    orgId: string;
    workspaceId: string;
    topicId: string;
    organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequest: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequest;
}

/**
 * 
 */
export class TopicsApi extends runtime.BaseAPI {

    /**
     * Lists all topics in the specified workspace
     * List topics
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInnerFromJSON));
    }

    /**
     * Lists all topics in the specified workspace
     * List topics
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner>> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdTopicsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new topic in the specified workspace
     * Create new topic
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdTopicsPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Creates a new topic in the specified workspace
     * Create new topic
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdTopicsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific topic by ID
     * Delete topic
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete().'
            );
        }

        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics/{topicId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"topicId"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific topic by ID
     * Delete topic
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDelete200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific topic by ID
     * Get topic by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGet().'
            );
        }

        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics/{topicId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"topicId"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific topic by ID
     * Get topic by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific topic by ID
     * Update topic
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPut().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPut().'
            );
        }

        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPut().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/topics/{topicId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"topicId"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Updates a specific topic by ID
     * Update topic
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPut(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdTopicsGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdTopicsTopicIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
