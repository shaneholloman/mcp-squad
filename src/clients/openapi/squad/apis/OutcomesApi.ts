/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 0.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseInner,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest,
} from '../models/index';
import {
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseInnerFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseInnerToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet401ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet403ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet404ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet500ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost400ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequestToJSON,
} from '../models/index';

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGetRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDeleteRequest {
    orgId: string;
    workspaceId: string;
    outcomeId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGetRequest {
    orgId: string;
    workspaceId: string;
    outcomeId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPutRequest {
    orgId: string;
    workspaceId: string;
    outcomeId: string;
    organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostOperationRequest {
    orgId: string;
    workspaceId: string;
    outcomeId: string;
    action: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostActionEnum;
    organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest;
}

/**
 * 
 */
export class OutcomesApi extends runtime.BaseAPI {

    /**
     * List outcomes
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseInner>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseInnerFromJSON));
    }

    /**
     * List outcomes
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseInner>> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOutcomesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an outcome
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete().'
            );
        }

        if (requestParameters['outcomeId'] == null) {
            throw new runtime.RequiredError(
                'outcomeId',
                'Required parameter "outcomeId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes/{outcomeId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"outcomeId"}}`, encodeURIComponent(String(requestParameters['outcomeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete an outcome
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDelete200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an outcome by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGet().'
            );
        }

        if (requestParameters['outcomeId'] == null) {
            throw new runtime.RequiredError(
                'outcomeId',
                'Required parameter "outcomeId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes/{outcomeId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"outcomeId"}}`, encodeURIComponent(String(requestParameters['outcomeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Get an outcome by ID
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an outcome
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPutRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseInner>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPut().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPut().'
            );
        }

        if (requestParameters['outcomeId'] == null) {
            throw new runtime.RequiredError(
                'outcomeId',
                'Required parameter "outcomeId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPut().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes/{outcomeId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"outcomeId"}}`, encodeURIComponent(String(requestParameters['outcomeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Update an outcome
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPut(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesGet200ResponseInner> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add or remove relationships between an outcome and other entities (opportunities, solutions, or feedback)
     * Manage outcome relationships
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['outcomeId'] == null) {
            throw new runtime.RequiredError(
                'outcomeId',
                'Required parameter "outcomeId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes/{outcomeId}/relationships/{action}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"outcomeId"}}`, encodeURIComponent(String(requestParameters['outcomeId']))).replace(`{${"action"}}`, encodeURIComponent(String(requestParameters['action']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove relationships between an outcome and other entities (opportunities, solutions, or feedback)
     * Manage outcome relationships
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new outcome
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdOutcomesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/outcomes`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new outcome
     */
    async organisationsOrgIdWorkspacesWorkspaceIdOutcomesPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdOutcomesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostOperationActionEnum = {
    Add: 'add',
    Remove: 'remove'
} as const;
export type OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostOperationActionEnum = typeof OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostOperationActionEnum[keyof typeof OrganisationsOrgIdWorkspacesWorkspaceIdOutcomesOutcomeIdRelationshipsActionPostOperationActionEnum];
