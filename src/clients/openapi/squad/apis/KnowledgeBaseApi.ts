/* tslint:disable */
/* eslint-disable */
/**
 * Squad API
 * API for managing Squad resources
 *
 * The version of the OpenAPI document: 0.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsGet200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPost201Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostRequest,
  OrganisationsOrgIdWorkspacesWorkspaceIdTestProxyPost200Response,
  OrganisationsOrgIdWorkspacesWorkspaceIdTestProxyPostRequest,
} from '../models/index';
import {
    OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsGet200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsGet200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPost201ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPost201ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostRequestToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTestProxyPost200ResponseFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTestProxyPost200ResponseToJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTestProxyPostRequestFromJSON,
    OrganisationsOrgIdWorkspacesWorkspaceIdTestProxyPostRequestToJSON,
} from '../models/index';

export interface OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsFileNameDeleteRequest {
    orgId: string;
    workspaceId: string;
    fileName: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsGetRequest {
    orgId: string;
    workspaceId: string;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostRequest;
}

export interface OrganisationsOrgIdWorkspacesWorkspaceIdTestProxyPostOperationRequest {
    orgId: string;
    workspaceId: string;
    organisationsOrgIdWorkspacesWorkspaceIdTestProxyPostRequest: OrganisationsOrgIdWorkspacesWorkspaceIdTestProxyPostRequest;
}

/**
 * 
 */
export class KnowledgeBaseApi extends runtime.BaseAPI {

    /**
     * Deletes a document from the knowledge base
     * Delete knowledge base document
     */
    async organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsFileNameDeleteRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsFileNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsFileNameDelete().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsFileNameDelete().'
            );
        }

        if (requestParameters['fileName'] == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsFileNameDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/knowledge-base-documents/{fileName}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))).replace(`{${"fileName"}}`, encodeURIComponent(String(requestParameters['fileName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a document from the knowledge base
     * Delete knowledge base document
     */
    async organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsFileNameDelete(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsFileNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsFileNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a list of all knowledge base documents in the workspace
     * List knowledge base documents
     */
    async organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsGetRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsGet200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsGet().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/knowledge-base-documents`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of all knowledge base documents in the workspace
     * List knowledge base documents
     */
    async organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsGet(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsGet200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads a new document to the knowledge base
     * Upload knowledge base document
     */
    async organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPost201Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/knowledge-base-documents`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Uploads a new document to the knowledge base
     * Upload knowledge base document
     */
    async organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPost201Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdKnowledgeBaseDocumentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Processes a text prompt through an AI model and returns the result
     * Process text through AI proxy
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTestProxyPostRaw(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTestProxyPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationsOrgIdWorkspacesWorkspaceIdTestProxyPost200Response>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTestProxyPost().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTestProxyPost().'
            );
        }

        if (requestParameters['organisationsOrgIdWorkspacesWorkspaceIdTestProxyPostRequest'] == null) {
            throw new runtime.RequiredError(
                'organisationsOrgIdWorkspacesWorkspaceIdTestProxyPostRequest',
                'Required parameter "organisationsOrgIdWorkspacesWorkspaceIdTestProxyPostRequest" was null or undefined when calling organisationsOrgIdWorkspacesWorkspaceIdTestProxyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{orgId}/workspaces/{workspaceId}/test-proxy`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationsOrgIdWorkspacesWorkspaceIdTestProxyPostRequestToJSON(requestParameters['organisationsOrgIdWorkspacesWorkspaceIdTestProxyPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationsOrgIdWorkspacesWorkspaceIdTestProxyPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Processes a text prompt through an AI model and returns the result
     * Process text through AI proxy
     */
    async organisationsOrgIdWorkspacesWorkspaceIdTestProxyPost(requestParameters: OrganisationsOrgIdWorkspacesWorkspaceIdTestProxyPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationsOrgIdWorkspacesWorkspaceIdTestProxyPost200Response> {
        const response = await this.organisationsOrgIdWorkspacesWorkspaceIdTestProxyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
