{
  "openapi": "3.0.0",
  "info": {
    "title": "Squad API",
    "version": "2.1.0",
    "description": "API for managing Squad resources"
  },
  "servers": [
    {
      "url": "https://api.meetsquad.ai",
      "description": "Production server"
    },
    {
      "url": "https://uat.api.meetsquad.ai",
      "description": "Staging server"
    },
    {
      "url": "https://dev.api.meetsquad.ai",
      "description": "Development server"
    }
  ],
  "paths": {
    "/organisations/{orgId}/workspaces/{workspaceId}/outcomes": {
      "post": {
        "summary": "Create a new outcome",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOutcomePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OutcomeWithRelationships"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single outcome"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List all outcomes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Outcome"
                      },
                      "description": "Array of outcomes"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing an array of outcomes"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/outcomes/{outcomeId}": {
      "get": {
        "summary": "Get an outcome by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "outcomeId",
            "required": true,
            "description": "Outcome ID",
            "example": "7b9e5d2c-f314-48a9-be56-9843a2f6c019",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/OutcomeRelationshipsParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OutcomeWithRelationships"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single outcome"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Outcome does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an outcome",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "outcomeId",
            "required": true,
            "description": "Outcome ID",
            "example": "7b9e5d2c-f314-48a9-be56-9843a2f6c019",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOutcomePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OutcomeWithRelationships"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single outcome"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Outcome does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an outcome",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "outcomeId",
            "required": true,
            "description": "Outcome ID",
            "example": "7b9e5d2c-f314-48a9-be56-9843a2f6c019",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "Success message",
                          "example": "Outcome deleted successfully"
                        }
                      },
                      "required": [
                        "message"
                      ],
                      "description": "Success message data"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a success message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Outcome does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/onboard": {
      "post": {
        "summary": "Create a new organization with workspace and outcomes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization, workspace, and outcomes created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "409": {
            "description": "Organization name already exists"
          }
        }
      }
    },
    "/organisations/{orgId}/onboard": {
      "put": {
        "summary": "Update an existing organization, recreate workspace and outcomes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingUpdatePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated, workspace and outcomes recreated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Organization not found"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/onboarding": {
      "post": {
        "summary": "Process business description and knowledge to create workspace details, outcomes, opportunities, and solutions",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "b7e2d5a9-3c18-4e6f-9a42-f8d1c7b5e3a2",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingV2Payload"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request accepted, processing started"
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "One or more knowledge entities not found"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/feedback": {
      "post": {
        "summary": "Create new feedback",
        "description": "Creates a new feedback item in the specified workspace",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "Feedback",
                      "Bug",
                      "FeatureRequest"
                    ],
                    "description": "Type of feedback",
                    "example": "Feedback"
                  },
                  "source": {
                    "type": "string",
                    "description": "Source of the feedback",
                    "example": "Customer Interview"
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of the feedback",
                    "example": "Dashboard UX Improvements"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the feedback",
                    "example": "The dashboard could use better data visualization"
                  },
                  "feedback": {
                    "type": "string",
                    "description": "Detailed feedback content",
                    "example": "I found the dashboard charts difficult to understand at first glance..."
                  },
                  "ownerId": {
                    "type": "string",
                    "description": "ID of the feedback owner",
                    "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
                  },
                  "organisationId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "workspaceId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "seen": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "type",
                  "source",
                  "title",
                  "description",
                  "feedback",
                  "organisationId",
                  "workspaceId"
                ],
                "description": "Feedback data from a user"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feedback created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "Feedback data",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/FeedbackWithRelationships"
                        }
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single feedback item"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List feedback",
        "description": "Lists all feedback in the specified workspace",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackArrayResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/feedback/{feedbackId}": {
      "get": {
        "summary": "Get feedback by ID",
        "description": "Retrieves a specific feedback by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "feedbackId",
            "required": true,
            "description": "Feedback ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/FeedbackRelationshipsParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "Feedback data",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/FeedbackWithRelationships"
                        }
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single feedback item"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Feedback not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete feedback",
        "description": "Deletes a specific feedback by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "feedbackId",
            "required": true,
            "description": "Feedback ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feedback deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "Success message",
                          "example": "Feedback deleted successfully"
                        }
                      },
                      "required": [
                        "message"
                      ],
                      "description": "Success message data"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a success message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Feedback not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/mock-feedback": {
      "post": {
        "summary": "Generate mock feedback",
        "description": "Creates mock feedback data for testing and development purposes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mock feedback created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MockFeedbackResponse"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/feedback/process": {
      "post": {
        "summary": "Process Unprocessed Feedback",
        "description": "Processes unprocessed feedback in the specified workspace",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unprocessed feedback processed successfully"
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/opportunities": {
      "post": {
        "summary": "Create new opportunity",
        "description": "Creates a new opportunity in the specified workspace",
        "security": [
          {
            "bearerAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOpportunityPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Opportunity created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit or entity limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "TOO_MANY_REQUESTS"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "Rate limit exceeded"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Too Many Requests - Rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List opportunities",
        "description": "Lists all opportunities in the specified workspace",
        "security": [
          {
            "bearerAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityArrayResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}": {
      "get": {
        "summary": "Get opportunity by ID",
        "description": "Retrieves a specific opportunity by ID",
        "security": [
          {
            "bearerAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "opportunityId",
            "required": true,
            "description": "Opportunity ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/OpportunityRelationshipsParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Opportunity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update opportunity",
        "description": "Updates a specific opportunity by ID",
        "security": [
          {
            "bearerAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "opportunityId",
            "required": true,
            "description": "Opportunity ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOpportunityPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Opportunity updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Opportunity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete opportunity",
        "description": "Deletes a specific opportunity by ID",
        "security": [
          {
            "bearerAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "opportunityId",
            "required": true,
            "description": "Opportunity ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "Success message",
                          "example": "Opportunity deleted successfully"
                        }
                      },
                      "required": [
                        "message"
                      ],
                      "description": "Success message data"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a success message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Opportunity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/requirements": {
      "post": {
        "summary": "Create new requirement",
        "description": "Creates a new requirement in the specified workspace",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequirement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Requirement created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "Requirement data",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/RequirementWithRelationships"
                        }
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single requirement"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      },
      "get": {
        "summary": "List requirements",
        "description": "Lists all requirements in the specified workspace",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Requirement"
                      },
                      "description": "Array of requirements"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing an array of requirements"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/requirements/{requirementId}": {
      "get": {
        "summary": "Get requirement by ID",
        "description": "Retrieves a specific requirement by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "requirementId",
            "required": true,
            "description": "Requirement ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/RequirementRelationshipsParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "Requirement data",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/RequirementWithRelationships"
                        }
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single requirement"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Requirement not found"
          }
        }
      },
      "put": {
        "summary": "Update requirement",
        "description": "Updates a specific requirement by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "requirementId",
            "required": true,
            "description": "Requirement ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequirement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Requirement updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "Requirement data",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/RequirementWithRelationships"
                        }
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single requirement"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Requirement not found"
          }
        }
      },
      "delete": {
        "summary": "Delete requirement",
        "description": "Deletes a specific requirement by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "requirementId",
            "required": true,
            "description": "Requirement ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requirement deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "Success message",
                          "example": "Requirement deleted successfully"
                        }
                      },
                      "required": [
                        "message"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Requirement not found"
          }
        }
      }
    },
    "/v1/requirements/ready": {
      "get": {
        "summary": "Get all ready requirements",
        "description": "Retrieves all requirements that are ready to be worked on.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Requirement"
                      },
                      "description": "Array of requirements"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing an array of requirements"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Requirement not found"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/solutions": {
      "post": {
        "summary": "Create new solution",
        "description": "Creates a new solution in the specified workspace",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSolutionPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Solution created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "Solution data",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SolutionWithRelationships"
                        }
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single solution"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      },
      "get": {
        "summary": "List solutions",
        "description": "Lists all solutions in the specified workspace",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SolutionWithRelationships"
                      },
                      "description": "Array of solutions"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing an array of solutions"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/solutions/{solutionId}": {
      "get": {
        "summary": "Get solution by ID",
        "description": "Retrieves a specific solution by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "solutionId",
            "required": true,
            "description": "Solution ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/SolutionRelationshipsParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "Solution data",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SolutionWithRelationships"
                        }
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single solution"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Solution not found"
          }
        }
      },
      "put": {
        "summary": "Update solution",
        "description": "Updates a specific solution by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "solutionId",
            "required": true,
            "description": "Solution ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSolutionPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Solution updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "Solution data",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SolutionWithRelationships"
                        }
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single solution"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Solution not found"
          }
        }
      },
      "delete": {
        "summary": "Delete solution",
        "description": "Deletes a specific solution by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "solutionId",
            "required": true,
            "description": "Solution ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solution deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "Success message",
                          "example": "Solution deleted successfully"
                        }
                      },
                      "required": [
                        "message"
                      ],
                      "description": "Success message data"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a success message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Solution not found"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/topics": {
      "post": {
        "summary": "Create new topic",
        "description": "Creates a new topic in the specified workspace",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTopicPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Topic created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Topic"
                        }
                      ],
                      "properties": {
                        "opportunities": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Opportunity"
                          },
                          "default": []
                        },
                        "feedback": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Feedback"
                          },
                          "default": []
                        }
                      },
                      "required": [
                        "opportunities",
                        "feedback"
                      ],
                      "description": "Topic data"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single topic"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      },
      "get": {
        "summary": "List topics",
        "description": "Lists all topics in the specified workspace",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TopicWithRelationships"
                      },
                      "description": "Array of topics"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing an array of topics"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/topics/{topicId}": {
      "get": {
        "summary": "Get topic by ID",
        "description": "Retrieves a specific topic by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "topicId",
            "required": true,
            "description": "Topic ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Topic"
                        }
                      ],
                      "properties": {
                        "opportunities": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Opportunity"
                          },
                          "default": []
                        },
                        "feedback": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Feedback"
                          },
                          "default": []
                        }
                      },
                      "required": [
                        "opportunities",
                        "feedback"
                      ],
                      "description": "Topic data"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single topic"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Topic not found"
          }
        }
      },
      "put": {
        "summary": "Update topic",
        "description": "Updates a specific topic by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "topicId",
            "required": true,
            "description": "Topic ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTopicPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Topic updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Topic"
                        }
                      ],
                      "properties": {
                        "opportunities": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Opportunity"
                          },
                          "default": []
                        },
                        "feedback": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Feedback"
                          },
                          "default": []
                        }
                      },
                      "required": [
                        "opportunities",
                        "feedback"
                      ],
                      "description": "Topic data"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single topic"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Topic not found"
          }
        }
      },
      "delete": {
        "summary": "Delete topic",
        "description": "Deletes a specific topic by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "topicId",
            "required": true,
            "description": "Topic ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Topic deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "Success message",
                          "example": "Topic deleted successfully"
                        }
                      },
                      "required": [
                        "message"
                      ],
                      "description": "Success message data"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a success message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Topic not found"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces": {
      "post": {
        "summary": "Create new workspace",
        "description": "Creates a new workspace for the specified organization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspacePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workspace created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "Workspace data",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Workspace"
                        }
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single workspace"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List workspaces",
        "description": "Lists all workspaces for the specified organization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Workspace"
                      },
                      "description": "Array of workspaces"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing an array of workspaces"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}": {
      "get": {
        "summary": "Get workspace by ID",
        "description": "Retrieves a specific workspace by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "Workspace data",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Workspace"
                        }
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single workspace"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Workspace not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update workspace",
        "description": "Updates a specific workspace by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspacePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workspace updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "Workspace data",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Workspace"
                        }
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single workspace"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Workspace not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete workspace",
        "description": "Deletes a specific workspace by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "Success message",
                          "example": "Workspace deleted successfully"
                        }
                      },
                      "required": [
                        "message"
                      ],
                      "description": "Success message data"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a success message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Workspace not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations": {
      "post": {
        "summary": "Create new organisation",
        "description": "Creates a new organisation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganisationPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organisation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Organisation"
                        }
                      ],
                      "properties": {
                        "unprocessedFeedbackCount": {
                          "type": "number",
                          "description": "Number of unprocessed feedback items",
                          "example": 123
                        }
                      },
                      "required": [
                        "unprocessedFeedbackCount"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single organisation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List organisations",
        "description": "Lists all organisations accessible to the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Organisation"
                          }
                        ],
                        "properties": {
                          "unprocessedFeedbackCount": {
                            "type": "number",
                            "description": "Number of unprocessed feedback items",
                            "example": 123
                          }
                        },
                        "required": [
                          "unprocessedFeedbackCount"
                        ]
                      },
                      "description": "Array of organisations"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing an array of organisations"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{orgId}": {
      "get": {
        "summary": "Get organisation by ID",
        "description": "Retrieves a specific organisation by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Organisation"
                        }
                      ],
                      "properties": {
                        "unprocessedFeedbackCount": {
                          "type": "number",
                          "description": "Number of unprocessed feedback items",
                          "example": 123
                        }
                      },
                      "required": [
                        "unprocessedFeedbackCount"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single organisation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Organisation not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update organisation",
        "description": "Updates a specific organisation by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganisationPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organisation updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Organisation"
                        }
                      ],
                      "properties": {
                        "unprocessedFeedbackCount": {
                          "type": "number",
                          "description": "Number of unprocessed feedback items",
                          "example": 123
                        }
                      },
                      "required": [
                        "unprocessedFeedbackCount"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a single organisation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Organisation not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete organisation",
        "description": "Deletes a specific organisation by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organisation deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "Success message",
                          "example": "Organisation deleted successfully"
                        }
                      },
                      "required": [
                        "message"
                      ],
                      "description": "Success message data"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a success message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Organisation not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/v1/whoami": {
      "get": {
        "summary": "Retrieve authenticated user's organization and workspace information",
        "description": "Returns the ID and name of the authenticated user's organization and workspace. This is only callable by an API key which is workspace scoped.",
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhoAmIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/data-ingress": {
      "post": {
        "summary": "Process feedback for a workspace",
        "description": "Receives feedback data and processes it for a specific workspace and organization",
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "Raw feedback content",
                "example": "I found the dashboard confusing to navigate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feedback processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/FeedbackResponse"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., missing body or invalid parameters)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/data-ingress/{feedbackSource}": {
      "post": {
        "summary": "Process feedback for a workspace",
        "description": "Receives feedback data and processes it for a specific workspace and organization",
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "feedbackSource",
            "required": true,
            "description": "The source of the feedback",
            "example": "typeform",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "Raw feedback content",
                "example": "I found the dashboard confusing to navigate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feedback processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/FeedbackResponse"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., missing body or invalid parameters)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/data-ingress": {
      "post": {
        "summary": "Process feedback for a workspace",
        "description": "Receives feedback data and processes it for a specific workspace and organization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "Raw feedback content",
                "example": "I found the dashboard confusing to navigate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feedback processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/FeedbackResponse"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., missing body or invalid parameters)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/data-ingress/{feedbackSource}": {
      "post": {
        "summary": "Process feedback for a workspace",
        "description": "Receives feedback data and processes it for a specific workspace and organization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "feedbackSource",
            "required": true,
            "description": "The source of the feedback",
            "example": "typeform",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "Raw feedback content",
                "example": "I found the dashboard confusing to navigate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feedback processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/FeedbackResponse"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., missing body or invalid parameters)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/feedback-document": {
      "post": {
        "summary": "Upload feedback document",
        "description": "Uploads a document related to feedback for processing and analysis",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeedbackDocumentPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateFeedbackDocumentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "413": {
            "description": "Payload Too Large - File size exceeds limits"
          },
          "415": {
            "description": "Unsupported Media Type - File format not supported"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}/generate-solutions": {
      "post": {
        "summary": "Generate solutions for an opportunity",
        "description": "Asynchronously generates AI-powered solutions based on the feedback associated with an opportunity",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "opportunityId",
            "required": true,
            "description": "Opportunity ID",
            "example": "opp_12345",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Solution generation process accepted and started asynchronously"
          },
          "400": {
            "description": "Bad request - invalid input parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication"
          },
          "404": {
            "description": "Opportunity not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}/feedback/mark-all-seen": {
      "post": {
        "summary": "Mark all opportunity feedback as seen",
        "description": "Marks all feedback items associated with an opportunity as having been seen by the user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "opportunityId",
            "required": true,
            "description": "Opportunity ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "All feedback items successfully marked as seen"
          },
          "400": {
            "description": "Bad request - invalid input parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication"
          },
          "404": {
            "description": "Opportunity not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/opportunities/{opportunityId}/relationships/{action}": {
      "post": {
        "operationId": "manageOpportunityRelationships",
        "summary": "Manage opportunity relationships",
        "description": "Add or remove relationships between an opportunity and other entities (solutions, outcomes, or feedback)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "opportunityId",
            "required": true,
            "description": "Opportunity ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "action",
            "required": true,
            "description": "Action to perform on relationships",
            "example": "add",
            "schema": {
              "$ref": "#/components/schemas/RelationshipAction"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpportunityRelationshipsPayload"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Relationships successfully modified"
          },
          "400": {
            "description": "Bad request - invalid input parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/organisations/{orgId}/status": {
      "get": {
        "summary": "Get organization status",
        "description": "Retrieves the current status and subscription information of an organization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Organisation"
                        }
                      ],
                      "properties": {
                        "hasRemainingCredits": {
                          "type": "boolean",
                          "description": "Whether the organization has remaining credits",
                          "example": true
                        },
                        "billingCycleCreditAllowance": {
                          "type": "number",
                          "description": "The number of credits available for the current billing cycle",
                          "example": 250
                        },
                        "billingCycleCreditUsage": {
                          "type": "number",
                          "description": "The number of credits used in the current billing cycle so far",
                          "example": 100
                        },
                        "billingCycleFlexCreditUsage": {
                          "type": "number",
                          "description": "The number of flex credits used in the current billing cycle so far",
                          "example": 100
                        },
                        "currentBillingCycleStartDate": {
                          "type": "string",
                          "description": "The date the current billing cycle started",
                          "example": "2025-06-24"
                        },
                        "currentBillingCycleEndDate": {
                          "type": "string",
                          "description": "The date the current billing cycle will end",
                          "example": "2025-06-24"
                        },
                        "totalMembers": {
                          "type": "number",
                          "description": "The total number of members in the organization",
                          "example": 10
                        }
                      },
                      "required": [
                        "hasRemainingCredits",
                        "billingCycleCreditAllowance",
                        "billingCycleCreditUsage",
                        "billingCycleFlexCreditUsage",
                        "currentBillingCycleStartDate",
                        "currentBillingCycleEndDate",
                        "totalMembers"
                      ],
                      "description": "Organization status data"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Organization status response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/outcomes/{outcomeId}/relationships/{action}": {
      "post": {
        "operationId": "manageOutcomeRelationships",
        "summary": "Manage outcome relationships",
        "description": "Add or remove relationships between an outcome and other entities (opportunities, solutions, or feedback)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "outcomeId",
            "required": true,
            "description": "Outcome ID",
            "example": "7b9e5d2c-f314-48a9-be56-9843a2f6c019",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "action",
            "required": true,
            "description": "Action to perform on relationships",
            "example": "add",
            "schema": {
              "$ref": "#/components/schemas/RelationshipAction"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutcomeRelationshipsPayload"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Relationships successfully modified"
          },
          "400": {
            "description": "Bad request - invalid input parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/requirements/{requirementId}/relationships/{action}": {
      "post": {
        "operationId": "manageRequirementRelationships",
        "summary": "Manage requirement relationships",
        "description": "Add or remove relationships between a requirement and other entities (opportunities, solutions, outcomes, or feedback)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "requirementId",
            "required": true,
            "description": "Requirement ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "action",
            "required": true,
            "description": "Action to perform on relationships",
            "example": "add",
            "schema": {
              "$ref": "#/components/schemas/RelationshipAction"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequirementRelationshipsPayload"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Relationships successfully modified"
          },
          "400": {
            "description": "Bad request - invalid input parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/solutions/{solutionId}/relationships/{action}": {
      "post": {
        "operationId": "manageSolutionRelationships",
        "summary": "Manage solution relationships",
        "description": "Add or remove relationships between a solution and other entities (opportunities, outcomes, or feedback)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "solutionId",
            "required": true,
            "description": "Solution ID",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "action",
            "required": true,
            "description": "Action to perform on relationships",
            "example": "add",
            "schema": {
              "$ref": "#/components/schemas/RelationshipAction"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SolutionRelationshipsPayload"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Relationships successfully modified"
          },
          "400": {
            "description": "Bad request - invalid input parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/solutions/prioritise": {
      "post": {
        "summary": "Prioritise solutions",
        "description": "Reorders one or more solutions based on provided order",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrioritiseSolutionsRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Solution prioritization request accepted and queued for processing"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/knowledge/source/url": {
      "post": {
        "summary": "Create a new piece of knowledge from a URL",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKnowledgeFromUrlPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleKnowledgeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/knowledge/source/pdf": {
      "post": {
        "summary": "Create a new piece of knowledge from a PDF file",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKnowledgeFromPdfPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SingleKnowledgeResponseWithUploadPdf"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/knowledge": {
      "post": {
        "summary": "Create a new piece of knowledge",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKnowledgePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleKnowledgeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List all pieces of knowledge",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeArrayResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/knowledge/{knowledgeId}": {
      "get": {
        "summary": "Get a piece of knowledge by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "knowledgeId",
            "required": true,
            "description": "Knowledge ID",
            "example": "7b9e5d2c-f314-48a9-be56-9843a2f6c019",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleKnowledgeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Knowledge does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a piece of knowledge",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "knowledgeId",
            "required": true,
            "description": "Knowledge ID",
            "example": "7b9e5d2c-f314-48a9-be56-9843a2f6c019",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateKnowledgePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleKnowledgeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Knowledge does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a piece of knowledge",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "knowledgeId",
            "required": true,
            "description": "Knowledge ID",
            "example": "7b9e5d2c-f314-48a9-be56-9843a2f6c019",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "Success message",
                          "example": "Knowledge deleted successfully"
                        }
                      },
                      "required": [
                        "message"
                      ],
                      "description": "Success message data"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a success message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Knowledge does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "NOT_FOUND"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "The requested resource was not found"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Not Found - The requested resource does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/test-proxy": {
      "post": {
        "summary": "Process text through AI proxy",
        "description": "Processes a text prompt through an AI model and returns the result",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt": {
                    "type": "string",
                    "description": "Text prompt to process",
                    "example": "Analyze customer feedback regarding our mobile app"
                  },
                  "model": {
                    "type": "string",
                    "description": "AI model to use for processing",
                    "example": "gpt-4"
                  },
                  "options": {
                    "type": "object",
                    "properties": {
                      "temperature": {
                        "type": "number",
                        "description": "Temperature parameter for the model",
                        "example": 0.7
                      },
                      "maxTokens": {
                        "type": "number",
                        "description": "Maximum number of tokens in the response",
                        "example": 500
                      }
                    }
                  }
                },
                "required": [
                  "prompt"
                ],
                "description": "Request body for text proxy processing"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully processed text",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "string",
                          "description": "Processed text result",
                          "example": "Based on the customer feedback analysis..."
                        },
                        "model": {
                          "type": "string",
                          "description": "AI model used for processing",
                          "example": "gpt-4"
                        },
                        "processingTime": {
                          "type": "number",
                          "description": "Time taken to process the request in milliseconds",
                          "example": 1250
                        }
                      },
                      "required": [
                        "result",
                        "model",
                        "processingTime"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Text proxy processing result"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/token-usage": {
      "post": {
        "summary": "Track token usage",
        "description": "Tracks token usage for a given request",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inputTokens": {
                    "type": "number",
                    "description": "Number of input tokens",
                    "example": 123
                  },
                  "outputTokens": {
                    "type": "number",
                    "description": "Number of output tokens",
                    "example": 456
                  },
                  "modelConfig": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "service": {
                            "type": "string",
                            "enum": [
                              "claude"
                            ]
                          },
                          "model": {
                            "type": "string",
                            "enum": [
                              "claude-opus-20250514",
                              "claude-sonnet-4-20250514",
                              "claude-3-7-sonnet-20250219",
                              "claude-3-5-sonnet-20240620",
                              "claude-3-5-sonnet-20241022",
                              "claude-3-5-haiku-20241022"
                            ]
                          }
                        },
                        "required": [
                          "service",
                          "model"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "service": {
                            "type": "string",
                            "enum": [
                              "lambdalabs"
                            ]
                          },
                          "model": {
                            "type": "string",
                            "enum": [
                              "llama3.1-405b-instruct-fp8",
                              "llama3.1-8b-instruct",
                              "llama3.1-nemotron-70b-instruct-fp8",
                              "llama3.2-3b-instruct",
                              "llama3.3-70b-instruct-fp8"
                            ]
                          }
                        },
                        "required": [
                          "service",
                          "model"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "service": {
                            "type": "string",
                            "enum": [
                              "deepseek"
                            ]
                          },
                          "model": {
                            "type": "string",
                            "enum": [
                              "deepseek-reasoner",
                              "deepseek-chat"
                            ]
                          }
                        },
                        "required": [
                          "service",
                          "model"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "service": {
                            "type": "string",
                            "enum": [
                              "openai"
                            ]
                          },
                          "model": {
                            "type": "string",
                            "enum": [
                              "o3-mini-2025-01-31",
                              "gpt-4.1-2025-04-14",
                              "gpt-4.1-mini-2025-04-14"
                            ]
                          }
                        },
                        "required": [
                          "service",
                          "model"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "service": {
                            "type": "string",
                            "enum": [
                              "gemini"
                            ]
                          },
                          "model": {
                            "type": "string",
                            "enum": [
                              "gemini-2.5-pro-preview-03-25",
                              "gemini-2.5-flash",
                              "gemini-2.0-flash-001",
                              "gemini-1.5-flash"
                            ]
                          }
                        },
                        "required": [
                          "service",
                          "model"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "service": {
                            "type": "string",
                            "enum": [
                              "JINA"
                            ]
                          },
                          "model": {
                            "type": "string",
                            "enum": [
                              "jina-deepsearch-v1"
                            ]
                          }
                        },
                        "required": [
                          "service",
                          "model"
                        ]
                      }
                    ]
                  },
                  "thinking": {
                    "type": "boolean",
                    "description": "Whether the request is using thinking mode",
                    "example": false
                  }
                },
                "required": [
                  "inputTokens",
                  "outputTokens",
                  "modelConfig",
                  "thinking"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Token usage tracked successfully"
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/strategy-document": {
      "get": {
        "summary": "Get strategy document",
        "description": "Retrieves the strategy document for the specified workspace",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateStrategyDocumentPayload"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      }
    },
    "/organisations/{orgId}/workspaces/{workspaceId}/similarity-search": {
      "post": {
        "summary": "Find similar entities",
        "description": "Finds similar entities to the given query",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "description": "Organization ID",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "description": "Workspace ID",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Query string",
                    "example": "Number of tokens used"
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "knowledge-base",
                        "insights",
                        "opportunities",
                        "solutions"
                      ]
                    },
                    "description": "List of Pinecone sources to search over",
                    "example": [
                      "knowledge-base",
                      "opportunities"
                    ]
                  }
                },
                "required": [
                  "query",
                  "filters"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Similarity search completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SimilaritySearchResponse"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "description": "Response containing a similarity search result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INVALID_REQUEST"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "One or more fields are invalid"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of field names that are missing or invalid",
                          "example": [
                            "title",
                            "description"
                          ]
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "Detailed validation error information for each invalid field",
                          "example": {
                            "invalidFields": {
                              "title": {
                                "type": "too_small",
                                "message": "Title must be at least 3 characters long",
                                "path": [
                                  "title"
                                ]
                              },
                              "deadline": {
                                "type": "invalid_date",
                                "message": "Deadline must be a valid date in the future",
                                "path": [
                                  "deadline"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Bad Request - Invalid input parameters or missing required fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthenticated"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Unauthorized - Missing or invalid authentication token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "UNAUTHORISED_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "User is unauthorised"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Forbidden - Insufficient permissions to access this resource"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code identifier",
                          "example": "INTERNAL_SERVER_ERROR"
                        },
                        "description": {
                          "type": "string",
                          "description": "Human-readable error description",
                          "example": "An unexpected error occurred on the server"
                        }
                      },
                      "required": [
                        "code",
                        "description"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "description": "Internal Server Error - An unexpected error occurred on the server"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT authentication for organization-scoped endpoints."
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "API key authentication for public API endpoints. This key is scoped by workspace so a unique key is required per workspace within an organisation."
      }
    },
    "schemas": {
      "CreateOutcomePayload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Title of the outcome",
            "example": "Increase User Engagement"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the outcome",
            "example": "We aim to increase daily active users by 25% in Q3"
          },
          "priority": {
            "type": "number",
            "description": "Priority level of the outcome",
            "example": 1
          },
          "trend": {
            "type": "number",
            "description": "Trend indicator for the outcome",
            "example": 0
          },
          "analyticEvents": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of analytic events associated with the outcome",
            "example": [
              "event1",
              "event2"
            ]
          },
          "ownerId": {
            "type": "string",
            "description": "ID of the owner of the outcome",
            "example": "7b9e5d2c-f314-48a9-be56-9843a2f6c019"
          },
          "opportunityIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "title",
          "description",
          "priority"
        ],
        "description": "Request schema for creating an outcome"
      },
      "Outcome": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the outcome",
            "example": "7b9e5d2c-f314-48a9-be56-9843a2f6c019"
          },
          "title": {
            "type": "string",
            "description": "Title of the outcome",
            "example": "Increase User Engagement"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the outcome",
            "example": "We aim to increase daily active users by 25% in Q3"
          },
          "priority": {
            "type": "number",
            "description": "Priority level of the outcome",
            "example": 1
          },
          "trend": {
            "type": "number",
            "description": "Trend indicator for the outcome",
            "example": 0
          },
          "analyticEvents": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of analytic events associated with the outcome",
            "example": [
              "event1",
              "event2"
            ]
          },
          "hideContent": {
            "type": "boolean",
            "description": "Whether the outcome is hidden",
            "example": false
          },
          "ownerId": {
            "type": "string",
            "description": "ID of the owner of the outcome",
            "example": "7b9e5d2c-f314-48a9-be56-9843a2f6c019"
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp of when the outcome was created",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Timestamp of when the outcome was last updated",
            "example": "2023-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "title",
          "description",
          "priority",
          "hideContent",
          "createdAt",
          "updatedAt"
        ],
        "description": "Outcome data representing a business objective"
      },
      "OutcomeWithRelationships": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Outcome"
          }
        ],
        "properties": {
          "opportunities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Opportunity"
            },
            "default": []
          },
          "solutions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Solution"
            },
            "default": []
          },
          "requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Requirement"
            },
            "default": []
          },
          "feedback": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feedback"
            },
            "default": []
          }
        },
        "required": [
          "opportunities",
          "solutions",
          "requirements",
          "feedback"
        ],
        "description": "Outcome with relationships"
      },
      "Opportunity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the opportunity",
            "example": "opp_123"
          },
          "read": {
            "type": "boolean",
            "description": "Whether the opportunity has been read",
            "example": false
          },
          "status": {
            "type": "string",
            "enum": [
              "New",
              "Solved",
              "Planned",
              "InProgress"
            ],
            "description": "Current status of the opportunity",
            "example": "New"
          },
          "title": {
            "type": "string",
            "description": "Title of the opportunity",
            "example": "Improve Customer Onboarding Experience"
          },
          "description": {
            "type": "string",
            "description": "Description of the opportunity",
            "example": "Streamline the initial user setup process to reduce drop-offs"
          },
          "solutionsGeneratingState": {
            "type": "string",
            "enum": [
              "generating",
              "generated",
              "initial",
              "error"
            ],
            "description": "Current state of solution generation",
            "example": "initial"
          },
          "createdBy": {
            "type": "string",
            "enum": [
              "user",
              "generated"
            ],
            "description": "How the opportunity was created",
            "example": "user"
          },
          "hideContent": {
            "type": "boolean",
            "description": "Whether the opportunity content should be hidden",
            "example": false
          },
          "ownerId": {
            "type": "string",
            "description": "ID of the opportunity owner",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2023-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "read",
          "status",
          "title",
          "description",
          "solutionsGeneratingState",
          "createdBy",
          "hideContent",
          "createdAt",
          "updatedAt"
        ],
        "description": "Opportunity data for a business"
      },
      "Solution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "systemPrompt": {
            "type": "string",
            "nullable": true,
            "description": "System prompt used to generate the requirement",
            "example": null
          },
          "aiProcessingState": {
            "type": "string",
            "enum": [
              "INITIAL",
              "PROCESSING",
              "FINISHED",
              "ERROR"
            ],
            "description": "Current state of AI processing",
            "example": "FINISHED"
          },
          "refinementLog": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the log entry",
                  "example": "log_123"
                },
                "role": {
                  "type": "string",
                  "enum": [
                    "user",
                    "assistant"
                  ],
                  "description": "Role of the entity making the log entry",
                  "example": "assistant"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the log entry",
                  "example": "Initial requirement"
                }
              },
              "required": [
                "id",
                "role",
                "content"
              ]
            },
            "description": "Log of refinements made to the requirement",
            "example": []
          },
          "title": {
            "type": "string",
            "description": "Title of the solution",
            "example": "Implement Single Sign-On"
          },
          "description": {
            "type": "string",
            "description": "Description of the solution",
            "example": "Integrate with OAuth providers to simplify user login experience"
          },
          "status": {
            "type": "string",
            "enum": [
              "Backlog",
              "New",
              "Planned",
              "InDevelopment",
              "Complete",
              "Cancelled"
            ],
            "description": "Solution status",
            "example": "Backlog"
          },
          "pros": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of pros/advantages for this solution",
            "example": [
              "Improved security",
              "Simplified login flow",
              "Reduced password reset requests"
            ]
          },
          "cons": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of cons/disadvantages for this solution",
            "example": [
              "Requires integration with external providers",
              "May add complexity to registration"
            ]
          },
          "hideContent": {
            "type": "boolean",
            "description": "Whether the solution content should be hidden",
            "example": false
          },
          "createdBy": {
            "type": "string",
            "enum": [
              "user",
              "generated"
            ],
            "description": "How the solution was created",
            "example": "generated"
          },
          "ownerId": {
            "type": "string",
            "description": "ID of the solution owner",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-03-26T22:35:46Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-03-26T22:35:46Z"
          },
          "priority": {
            "type": "string",
            "description": "User indicated priority for the solution (fractional-indexing string)",
            "example": "a0"
          },
          "prd": {
            "type": "string",
            "description": "Product Requirements Document content for the solution",
            "example": "Objective: Help users easily create..."
          }
        },
        "required": [
          "id",
          "aiProcessingState",
          "refinementLog",
          "title",
          "description",
          "status",
          "pros",
          "cons",
          "hideContent",
          "createdBy",
          "createdAt",
          "updatedAt",
          "priority",
          "prd"
        ],
        "description": "Solution data for an opportunity"
      },
      "Requirement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the requirement",
            "example": "req_123"
          },
          "systemPrompt": {
            "type": "string",
            "nullable": true,
            "description": "System prompt used to generate the requirement",
            "example": null
          },
          "aiProcessingState": {
            "type": "string",
            "enum": [
              "INITIAL",
              "PROCESSING",
              "FINISHED",
              "ERROR"
            ],
            "description": "Current state of AI processing",
            "example": "FINISHED"
          },
          "refinementLog": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the log entry",
                  "example": "log_123"
                },
                "role": {
                  "type": "string",
                  "enum": [
                    "user",
                    "assistant"
                  ],
                  "description": "Role of the entity making the log entry",
                  "example": "assistant"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the log entry",
                  "example": "Initial requirement"
                }
              },
              "required": [
                "id",
                "role",
                "content"
              ]
            },
            "description": "Log of refinements made to the requirement",
            "example": []
          },
          "title": {
            "type": "string",
            "description": "Title of the requirement",
            "example": "User Authentication Feature"
          },
          "description": {
            "type": "string",
            "description": "Description of the requirement",
            "example": "A comprehensive authentication system for the platform"
          },
          "feature": {
            "type": "string",
            "description": "The feature this requirement belongs to",
            "example": "User Management"
          },
          "requirements": {
            "type": "string",
            "description": "Detailed requirements specification",
            "example": "1. Support email/password login\n2. Implement password reset\n3. Add social login options"
          },
          "hideContent": {
            "type": "boolean",
            "description": "Whether the requirement content should be hidden",
            "example": false
          },
          "ownerId": {
            "type": "string",
            "description": "ID of the requirement owner",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-03-26T22:35:46Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-03-26T22:35:46Z"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "ready",
              "complete"
            ]
          }
        },
        "required": [
          "id",
          "aiProcessingState",
          "refinementLog",
          "title",
          "description",
          "feature",
          "requirements",
          "hideContent",
          "createdAt",
          "updatedAt",
          "status"
        ],
        "description": "Requirement data for a product or feature"
      },
      "Feedback": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the feedback",
            "example": "fb_123"
          },
          "type": {
            "type": "string",
            "enum": [
              "Feedback",
              "Bug",
              "FeatureRequest"
            ],
            "description": "Type of feedback",
            "example": "Feedback"
          },
          "source": {
            "type": "string",
            "description": "Source of the feedback",
            "example": "Customer Interview"
          },
          "title": {
            "type": "string",
            "description": "Title of the feedback",
            "example": "Dashboard UX Improvements"
          },
          "description": {
            "type": "string",
            "description": "Description of the feedback",
            "example": "The dashboard could use better data visualization"
          },
          "feedback": {
            "type": "string",
            "description": "Detailed feedback content",
            "example": "I found the dashboard charts difficult to understand at first glance..."
          },
          "seen": {
            "type": "boolean",
            "description": "Whether the feedback has been seen",
            "example": false
          },
          "hideContent": {
            "type": "boolean",
            "description": "Whether the feedback content should be hidden",
            "example": false
          },
          "ownerId": {
            "type": "string",
            "description": "ID of the feedback owner",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-03-26T22:35:46Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-03-26T22:35:46Z"
          }
        },
        "required": [
          "id",
          "type",
          "source",
          "title",
          "description",
          "feedback",
          "seen",
          "hideContent",
          "createdAt",
          "updatedAt"
        ],
        "description": "Feedback data from a user"
      },
      "UpdateOutcomePayload": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the outcome",
            "example": "Increase User Engagement"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the outcome",
            "example": "We aim to increase daily active users by 25% in Q3"
          },
          "priority": {
            "type": "number",
            "description": "Priority level of the outcome",
            "example": 1
          },
          "trend": {
            "type": "number",
            "description": "Trend indicator for the outcome",
            "example": 0
          },
          "analyticEvents": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of analytic events associated with the outcome",
            "example": [
              "event1",
              "event2"
            ]
          },
          "ownerId": {
            "type": "string",
            "description": "ID of the owner of the outcome",
            "example": "7b9e5d2c-f314-48a9-be56-9843a2f6c019"
          },
          "opportunityIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Request schema for updating an outcome"
      },
      "OnboardingPayload": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Name of the organization to create",
            "example": "Acme Corporation"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "description": "Description of the organization for generating workspace and outcomes",
            "example": "A technology company focused on AI solutions for enterprise customers"
          }
        },
        "required": [
          "name",
          "description"
        ],
        "description": "Request schema for onboarding"
      },
      "OnboardingResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "workspace": {
                "$ref": "#/components/schemas/Workspace"
              },
              "outcomes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Outcome"
                },
                "description": "Array of outcomes"
              },
              "organisation": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for the organization",
                    "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the organization",
                    "example": "Acme Corporation"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              }
            },
            "required": [
              "workspace",
              "outcomes",
              "organisation"
            ]
          }
        },
        "required": [
          "data"
        ],
        "description": "Response schema for onboarding"
      },
      "Workspace": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the workspace",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f"
          },
          "name": {
            "type": "string",
            "description": "Name of the workspace",
            "example": "Product Development"
          },
          "homepageUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to the workspace's homepage",
            "example": "https://product.example.com"
          },
          "logoUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to the workspace's logo",
            "example": "https://product.example.com/logo.png"
          },
          "missionStatement": {
            "type": "string",
            "description": "Mission statement for the workspace",
            "example": "Develop innovative products that solve real customer problems"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the workspace",
            "example": "This workspace focuses on our core product development initiatives, including roadmap planning, feature development, and product improvements."
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-03-26T22:35:46Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-03-26T22:35:46Z"
          },
          "status": {
            "type": "string",
            "enum": [
              "Initializing",
              "OnboardingDeepResearch",
              "OnboardingConsiderWorkspace",
              "OnboardingConsiderOpportunities",
              "OnboardingConsiderOpportunitiesToOutcomes",
              "OnboardingConsiderSolutionGeneration",
              "OnboardingConsiderSolutionsToBuild",
              "OnboardingSelectSolutionsToBuild",
              "Active",
              "Inactive"
            ],
            "description": "Status of the workspace",
            "example": "Initializing"
          }
        },
        "required": [
          "id",
          "name",
          "missionStatement",
          "createdAt",
          "updatedAt",
          "status"
        ],
        "description": "Workspace data"
      },
      "OnboardingUpdatePayload": {
        "description": "Request schema for updating onboarding",
        "allOf": [
          {
            "$ref": "#/components/schemas/OnboardingPayload"
          }
        ]
      },
      "OnboardingV2Payload": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "minLength": 1,
            "description": "Text input describing the business or product",
            "example": "A technology company focused on AI solutions for enterprise customers"
          },
          "knowledgeIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Array of knowledge entity IDs to process",
            "example": [
              "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184",
              "b7e2d5a9-3c18-4e6f-9a42-f8d1c7b5e3a2"
            ]
          },
          "newProduct": {
            "type": "boolean",
            "default": false,
            "description": "Flag indicating if this is a new product (optional)",
            "example": true
          }
        },
        "required": [
          "text",
          "knowledgeIds"
        ],
        "description": "Request schema for one-shot onboarding"
      },
      "FeedbackWithRelationships": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Feedback"
          }
        ],
        "properties": {
          "opportunities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Opportunity"
            },
            "default": []
          },
          "solutions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Solution"
            },
            "default": []
          },
          "requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Requirement"
            },
            "default": []
          },
          "outcomes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Outcome"
            },
            "default": []
          }
        },
        "required": [
          "opportunities",
          "solutions",
          "requirements",
          "outcomes"
        ],
        "description": "Feedback with relationships"
      },
      "FeedbackArrayResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeedbackWithRelationships"
            },
            "description": "Array of feedback items"
          }
        },
        "required": [
          "data"
        ],
        "description": "Response containing an array of feedback items"
      },
      "MockFeedbackResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the feedback",
              "example": "Pet Stay Properties exceeded our expectations with their exceptional service and spotless accommodations."
            },
            "feedback": {
              "type": "string",
              "description": "Feedback text",
              "example": "We recently booked a stay for our furry friend at Pet Stay Properties and were blown away by the level of service and cleanliness. The property was immaculate, and the staff went above and beyond to ensure our pet's comfort. We will definitely be using them again!"
            },
            "source": {
              "type": "string",
              "description": "Source of the feedback",
              "example": "generate-example"
            },
            "title": {
              "type": "string",
              "description": "Title of the feedback",
              "example": "Excellent Service and Cleanliness"
            },
            "type": {
              "type": "string",
              "enum": [
                "Feedback",
                "Bug",
                "FeatureRequest"
              ],
              "description": "Type of the feedback",
              "example": "Feedback"
            }
          },
          "required": [
            "description",
            "feedback",
            "source",
            "title",
            "type"
          ]
        },
        "description": "Array of mock feedback strings"
      },
      "CreateOpportunityPayload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Title of the opportunity",
            "example": "Improve Customer Onboarding Experience"
          },
          "description": {
            "type": "string",
            "description": "Description of the opportunity",
            "example": "Streamline the initial user setup process to reduce drop-offs"
          },
          "createdBy": {
            "type": "string",
            "enum": [
              "user",
              "generated"
            ],
            "description": "How the opportunity was created",
            "example": "user"
          },
          "ownerId": {
            "type": "string",
            "description": "ID of the opportunity owner",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
          },
          "solutionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "feedbackIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outcomeIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "title",
          "description",
          "createdBy"
        ],
        "description": "Request schema for creating an opportunity"
      },
      "OpportunityResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the opportunity",
                "example": "opp_123"
              },
              "read": {
                "type": "boolean",
                "description": "Whether the opportunity has been read",
                "example": false
              },
              "status": {
                "type": "string",
                "enum": [
                  "New",
                  "Solved",
                  "Planned",
                  "InProgress"
                ],
                "description": "Current status of the opportunity",
                "example": "New"
              },
              "title": {
                "type": "string",
                "description": "Title of the opportunity",
                "example": "Improve Customer Onboarding Experience"
              },
              "description": {
                "type": "string",
                "description": "Description of the opportunity",
                "example": "Streamline the initial user setup process to reduce drop-offs"
              },
              "solutionsGeneratingState": {
                "type": "string",
                "enum": [
                  "generating",
                  "generated",
                  "initial",
                  "error"
                ],
                "description": "Current state of solution generation",
                "example": "initial"
              },
              "createdBy": {
                "type": "string",
                "enum": [
                  "user",
                  "generated"
                ],
                "description": "How the opportunity was created",
                "example": "user"
              },
              "hideContent": {
                "type": "boolean",
                "description": "Whether the opportunity content should be hidden",
                "example": false
              },
              "ownerId": {
                "type": "string",
                "description": "ID of the opportunity owner",
                "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
              },
              "createdAt": {
                "type": "string",
                "description": "Creation timestamp",
                "example": "2023-01-01T00:00:00.000Z"
              },
              "updatedAt": {
                "type": "string",
                "description": "Last update timestamp",
                "example": "2023-01-01T00:00:00.000Z"
              },
              "hasUnseenFeedback": {
                "type": "boolean",
                "description": "Whether the opportunity has unseen feedback",
                "example": false
              },
              "solutions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Solution"
                },
                "default": []
              },
              "requirements": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Requirement"
                },
                "default": []
              },
              "feedback": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Feedback"
                },
                "default": []
              },
              "outcomes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Outcome"
                },
                "default": []
              },
              "topics": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Topic"
                },
                "default": []
              }
            },
            "required": [
              "id",
              "read",
              "status",
              "title",
              "description",
              "solutionsGeneratingState",
              "createdBy",
              "hideContent",
              "createdAt",
              "updatedAt",
              "hasUnseenFeedback",
              "solutions",
              "requirements",
              "feedback",
              "outcomes",
              "topics"
            ],
            "description": "Opportunity data"
          }
        },
        "required": [
          "data"
        ],
        "description": "Response containing a single opportunity"
      },
      "OpportunityWithRelationships": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Opportunity"
          }
        ],
        "properties": {
          "hasUnseenFeedback": {
            "type": "boolean",
            "default": false,
            "description": "Whether the opportunity has unseen feedback",
            "example": false
          },
          "solutions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Solution"
            },
            "default": []
          },
          "requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Requirement"
            },
            "default": []
          },
          "feedback": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feedback"
            },
            "default": []
          },
          "outcomes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Outcome"
            },
            "default": []
          },
          "topics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Topic"
            },
            "default": []
          }
        },
        "required": [
          "hasUnseenFeedback",
          "solutions",
          "requirements",
          "feedback",
          "outcomes",
          "topics"
        ],
        "description": "Opportunity with relationships"
      },
      "Topic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Title of the topic",
            "example": "User Interface Improvements"
          },
          "description": {
            "type": "string",
            "description": "Description of the topic",
            "example": "General feedback related to UI/UX improvements"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-03-26T22:35:46Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-03-26T22:35:46Z"
          }
        },
        "required": [
          "id",
          "title",
          "description",
          "createdAt",
          "updatedAt"
        ],
        "description": "Topic data for organizing feedback"
      },
      "OpportunityArrayResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpportunityWithRelationships"
            },
            "description": "Array of opportunities"
          }
        },
        "required": [
          "data"
        ],
        "description": "Response containing an array of opportunities"
      },
      "UpdateOpportunityPayload": {
        "type": "object",
        "properties": {
          "read": {
            "type": "boolean",
            "description": "Whether the opportunity has been read",
            "example": false
          },
          "status": {
            "type": "string",
            "enum": [
              "New",
              "Solved",
              "Planned",
              "InProgress"
            ],
            "description": "Current status of the opportunity",
            "example": "New"
          },
          "title": {
            "type": "string",
            "description": "Title of the opportunity",
            "example": "Improve Customer Onboarding Experience"
          },
          "description": {
            "type": "string",
            "description": "Description of the opportunity",
            "example": "Streamline the initial user setup process to reduce drop-offs"
          },
          "solutionsGeneratingState": {
            "type": "string",
            "enum": [
              "generating",
              "generated",
              "initial",
              "error"
            ],
            "description": "Current state of solution generation",
            "example": "initial"
          },
          "createdBy": {
            "type": "string",
            "enum": [
              "user",
              "generated"
            ],
            "description": "How the opportunity was created",
            "example": "user"
          },
          "ownerId": {
            "type": "string",
            "description": "ID of the opportunity owner",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
          },
          "feedbackIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outcomeIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "solutionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "topicIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Request schema for updating an opportunity"
      },
      "CreateRequirement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "systemPrompt": {
            "type": "string",
            "nullable": true,
            "description": "System prompt used to generate the requirement",
            "example": null
          },
          "aiProcessingState": {
            "type": "string",
            "enum": [
              "INITIAL",
              "PROCESSING",
              "FINISHED",
              "ERROR"
            ],
            "description": "Current state of AI processing",
            "example": "FINISHED"
          },
          "refinementLog": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the log entry",
                  "example": "log_123"
                },
                "role": {
                  "type": "string",
                  "enum": [
                    "user",
                    "assistant"
                  ],
                  "description": "Role of the entity making the log entry",
                  "example": "assistant"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the log entry",
                  "example": "Initial requirement"
                }
              },
              "required": [
                "id",
                "role",
                "content"
              ]
            },
            "description": "Log of refinements made to the requirement",
            "example": []
          },
          "title": {
            "type": "string",
            "description": "Title of the requirement",
            "example": "User Authentication Feature"
          },
          "description": {
            "type": "string",
            "description": "Description of the requirement",
            "example": "A comprehensive authentication system for the platform"
          },
          "feature": {
            "type": "string",
            "description": "The feature this requirement belongs to",
            "example": "User Management"
          },
          "requirements": {
            "type": "string",
            "description": "Detailed requirements specification",
            "example": "1. Support email/password login\n2. Implement password reset\n3. Add social login options"
          },
          "ownerId": {
            "type": "string",
            "description": "ID of the requirement owner",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "ready",
              "complete"
            ]
          },
          "solutionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "opportunityIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "feedbackIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "aiProcessingState",
          "refinementLog",
          "title",
          "description",
          "feature",
          "requirements",
          "status"
        ],
        "description": "Request schema for creating a requirement"
      },
      "RequirementWithRelationships": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Requirement"
          }
        ],
        "properties": {
          "opportunities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Opportunity"
            },
            "default": []
          },
          "solutions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Solution"
            },
            "default": []
          },
          "feedback": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feedback"
            },
            "default": []
          },
          "outcomes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Outcome"
            },
            "default": []
          }
        },
        "required": [
          "opportunities",
          "solutions",
          "feedback",
          "outcomes"
        ],
        "description": "Requirement with relationships"
      },
      "UpdateRequirement": {
        "type": "object",
        "properties": {
          "systemPrompt": {
            "type": "string",
            "nullable": true,
            "description": "System prompt used to generate the requirement",
            "example": null
          },
          "aiProcessingState": {
            "type": "string",
            "enum": [
              "INITIAL",
              "PROCESSING",
              "FINISHED",
              "ERROR"
            ],
            "description": "Current state of AI processing",
            "example": "FINISHED"
          },
          "refinementLog": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the log entry",
                  "example": "log_123"
                },
                "role": {
                  "type": "string",
                  "enum": [
                    "user",
                    "assistant"
                  ],
                  "description": "Role of the entity making the log entry",
                  "example": "assistant"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the log entry",
                  "example": "Initial requirement"
                }
              },
              "required": [
                "id",
                "role",
                "content"
              ]
            },
            "description": "Log of refinements made to the requirement",
            "example": []
          },
          "title": {
            "type": "string",
            "description": "Title of the requirement",
            "example": "User Authentication Feature"
          },
          "description": {
            "type": "string",
            "description": "Description of the requirement",
            "example": "A comprehensive authentication system for the platform"
          },
          "feature": {
            "type": "string",
            "description": "The feature this requirement belongs to",
            "example": "User Management"
          },
          "requirements": {
            "type": "string",
            "description": "Detailed requirements specification",
            "example": "1. Support email/password login\n2. Implement password reset\n3. Add social login options"
          },
          "ownerId": {
            "type": "string",
            "description": "ID of the requirement owner",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "ready",
              "complete"
            ]
          },
          "opportunityIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "solutionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "feedbackIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Request schema for updating a requirement"
      },
      "CreateSolutionPayload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "systemPrompt": {
            "type": "string",
            "nullable": true
          },
          "aiProcessingState": {
            "type": "string",
            "enum": [
              "INITIAL",
              "PROCESSING",
              "FINISHED",
              "ERROR"
            ]
          },
          "refinementLog": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "role": {
                  "type": "string",
                  "enum": [
                    "user",
                    "assistant"
                  ]
                },
                "content": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "role",
                "content"
              ]
            }
          },
          "title": {
            "type": "string",
            "description": "Title of the solution",
            "example": "Implement Single Sign-On"
          },
          "description": {
            "type": "string",
            "description": "Description of the solution",
            "example": "Integrate with OAuth providers to simplify user login experience"
          },
          "status": {
            "type": "string",
            "enum": [
              "Backlog",
              "New",
              "Planned",
              "InDevelopment",
              "Complete",
              "Cancelled"
            ],
            "description": "Solution status",
            "example": "Backlog"
          },
          "pros": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cons": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdBy": {
            "type": "string",
            "enum": [
              "user",
              "generated"
            ],
            "description": "How the solution was created",
            "example": "generated"
          },
          "ownerId": {
            "type": "string"
          },
          "prd": {
            "type": "string",
            "description": "Product Requirements Document content for the solution",
            "example": "Objective: Help users easily create..."
          },
          "opportunityIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "requirementIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "title",
          "description",
          "createdBy",
          "prd"
        ],
        "description": "Request schema for creating a solution"
      },
      "SolutionWithRelationships": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Solution"
          }
        ],
        "properties": {
          "opportunities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Opportunity"
            },
            "default": []
          },
          "requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Requirement"
            },
            "default": []
          },
          "feedback": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feedback"
            },
            "default": []
          },
          "outcomes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Outcome"
            },
            "default": []
          }
        },
        "required": [
          "opportunities",
          "requirements",
          "feedback",
          "outcomes"
        ],
        "description": "Solution with relationships"
      },
      "UpdateSolutionPayload": {
        "type": "object",
        "properties": {
          "systemPrompt": {
            "type": "string",
            "nullable": true,
            "description": "System prompt used to generate the requirement",
            "example": null
          },
          "aiProcessingState": {
            "type": "string",
            "enum": [
              "INITIAL",
              "PROCESSING",
              "FINISHED",
              "ERROR"
            ],
            "description": "Current state of AI processing",
            "example": "FINISHED"
          },
          "refinementLog": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the log entry",
                  "example": "log_123"
                },
                "role": {
                  "type": "string",
                  "enum": [
                    "user",
                    "assistant"
                  ],
                  "description": "Role of the entity making the log entry",
                  "example": "assistant"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the log entry",
                  "example": "Initial requirement"
                }
              },
              "required": [
                "id",
                "role",
                "content"
              ]
            },
            "description": "Log of refinements made to the requirement",
            "example": []
          },
          "title": {
            "type": "string",
            "description": "Title of the solution",
            "example": "Implement Single Sign-On"
          },
          "description": {
            "type": "string",
            "description": "Description of the solution",
            "example": "Integrate with OAuth providers to simplify user login experience"
          },
          "status": {
            "type": "string",
            "enum": [
              "Backlog",
              "New",
              "Planned",
              "InDevelopment",
              "Complete",
              "Cancelled"
            ],
            "description": "Solution status",
            "example": "Backlog"
          },
          "pros": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of pros/advantages for this solution",
            "example": [
              "Improved security",
              "Simplified login flow",
              "Reduced password reset requests"
            ]
          },
          "cons": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of cons/disadvantages for this solution",
            "example": [
              "Requires integration with external providers",
              "May add complexity to registration"
            ]
          },
          "ownerId": {
            "type": "string",
            "description": "ID of the solution owner",
            "example": "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
          },
          "prd": {
            "type": "string",
            "description": "Product Requirements Document content for the solution",
            "example": "Objective: Help users easily create..."
          },
          "opportunityIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "requirementIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "updateTriggeredBy": {
            "type": "string",
            "enum": [
              "user",
              "AI"
            ],
            "description": "Who triggered the update",
            "example": "user"
          }
        },
        "description": "Request schema for updating a solution"
      },
      "CreateTopicPayload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Title of the topic",
            "example": "User Interface Improvements"
          },
          "description": {
            "type": "string",
            "description": "Description of the topic",
            "example": "General feedback related to UI/UX improvements"
          },
          "opportunityIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of opportunity IDs associated with the topic",
            "example": [
              "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
            ]
          },
          "feedbackIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of feedback IDs associated with the topic",
            "example": [
              "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
            ]
          }
        },
        "required": [
          "title",
          "description"
        ],
        "description": "Request schema for creating a topic"
      },
      "TopicWithRelationships": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Topic"
          }
        ],
        "properties": {
          "opportunities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Opportunity"
            },
            "default": []
          },
          "feedback": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feedback"
            },
            "default": []
          },
          "opportunityCount": {
            "type": "number",
            "description": "Number of opportunities associated with the topic",
            "example": 1
          }
        },
        "required": [
          "opportunities",
          "feedback",
          "opportunityCount"
        ],
        "description": "Topic data"
      },
      "UpdateTopicPayload": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the topic",
            "example": "User Interface Improvements"
          },
          "description": {
            "type": "string",
            "description": "Description of the topic",
            "example": "General feedback related to UI/UX improvements"
          },
          "opportunityIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of opportunity IDs associated with the topic",
            "example": [
              "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
            ]
          },
          "feedbackIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of feedback IDs associated with the topic",
            "example": [
              "d4e71c2b-a498-42af-b7f5-69de06a0d7c4"
            ]
          }
        },
        "description": "Request schema for updating a topic"
      },
      "CreateWorkspacePayload": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "homepageUrl": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          },
          "missionStatement": {
            "type": "string",
            "description": "Mission statement for the workspace",
            "example": "Develop innovative products that solve real customer problems"
          },
          "description": {
            "type": "string"
          },
          "outcomes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "utm": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string"
              },
              "medium": {
                "type": "string"
              },
              "campaign": {
                "type": "string"
              },
              "term": {
                "type": "string"
              },
              "content": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "name",
          "missionStatement"
        ],
        "description": "Request schema for creating a workspace"
      },
      "UpdateWorkspacePayload": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the workspace",
            "example": "Product Development"
          },
          "homepageUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to the workspace's homepage",
            "example": "https://product.example.com"
          },
          "logoUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to the workspace's logo",
            "example": "https://product.example.com/logo.png"
          },
          "missionStatement": {
            "type": "string",
            "description": "Mission statement for the workspace",
            "example": "Develop innovative products that solve real customer problems"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the workspace",
            "example": "This workspace focuses on our core product development initiatives, including roadmap planning, feature development, and product improvements."
          },
          "status": {
            "type": "string",
            "enum": [
              "Initializing",
              "OnboardingDeepResearch",
              "OnboardingConsiderWorkspace",
              "OnboardingConsiderOpportunities",
              "OnboardingConsiderOpportunitiesToOutcomes",
              "OnboardingConsiderSolutionGeneration",
              "OnboardingConsiderSolutionsToBuild",
              "OnboardingSelectSolutionsToBuild",
              "Active",
              "Inactive"
            ],
            "description": "Status of the workspace",
            "example": "Initializing"
          }
        },
        "description": "Request schema for updating a workspace"
      },
      "CreateOrganisationPayload": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the organisation",
            "example": "Acme Corporation"
          },
          "homepageUrl": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "homepageUrl",
          "logoUrl"
        ],
        "description": "Request schema for creating an organisation"
      },
      "Organisation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the organisation",
            "example": "Acme Corporation"
          },
          "stripeCustomerId": {
            "type": "string",
            "description": "Stripe customer ID for billing",
            "example": "cus_1234567890"
          },
          "homepageUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to the organisation's homepage",
            "example": "https://acme.example.com"
          },
          "logoUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to the organisation's logo",
            "example": "https://acme.example.com/logo.png"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-03-26T22:35:46Z"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "HOBBY",
              "PROFESSIONAL",
              "TEAM"
            ],
            "default": "HOBBY",
            "description": "Account type",
            "example": "HOBBY"
          },
          "billingCycleStartDate": {
            "type": "string",
            "description": "The start date of the current billing cycle.",
            "example": "2025-03-26T22:35:46Z"
          },
          "billingCycleFlexCreditAllowance": {
            "type": "number",
            "description": "Number of flex credits available at the start of the current billing cycle.",
            "example": 100000
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-03-26T22:35:46Z"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "ARCHIVED"
            ],
            "default": "ACTIVE",
            "description": "Status of the organisation",
            "example": "ACTIVE"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "accountType",
          "billingCycleStartDate",
          "billingCycleFlexCreditAllowance",
          "updatedAt",
          "status"
        ],
        "description": "Organisation data"
      },
      "UpdateOrganisationPayload": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the organisation",
            "example": "Acme Corporation"
          },
          "homepageUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to the organisation's homepage",
            "example": "https://acme.example.com"
          },
          "logoUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to the organisation's logo",
            "example": "https://acme.example.com/logo.png"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "HOBBY",
              "PROFESSIONAL",
              "TEAM"
            ],
            "default": "HOBBY",
            "description": "Account type",
            "example": "HOBBY"
          },
          "billingCycleStartDate": {
            "type": "string",
            "description": "The start date of the current billing cycle.",
            "example": "2025-03-26T22:35:46Z"
          },
          "billingCycleFlexCreditAllowance": {
            "type": "number",
            "description": "Number of flex credits available at the start of the current billing cycle.",
            "example": 100000
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "ARCHIVED"
            ],
            "default": "ACTIVE",
            "description": "Status of the organisation",
            "example": "ACTIVE"
          }
        },
        "description": "Request schema for updating an organisation"
      },
      "WhoAmIResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "organisation": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Organization ID",
                    "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184"
                  },
                  "name": {
                    "type": "string",
                    "description": "Organization name",
                    "example": "Acme Corporation"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "workspace": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Workspace ID",
                    "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f"
                  },
                  "name": {
                    "type": "string",
                    "description": "Workspace name",
                    "example": "Product Development"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              }
            },
            "required": [
              "organisation",
              "workspace"
            ]
          }
        },
        "required": [
          "data"
        ],
        "description": "User organization and workspace information"
      },
      "FeedbackResponse": {
        "type": "object",
        "properties": {
          "feedback": {
            "type": "string",
            "description": "The feedback content",
            "example": "I had trouble with the checkout process on your website"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeedbackSourceEnum"
              }
            ],
            "example": "SLACK"
          },
          "workspaceId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the workspace",
            "example": "c0e195d9-b918-4a3a-bd8b-f730361d044f"
          },
          "organisationId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the organization",
            "example": "a5f3c6e1-9d20-4f7b-8e31-d09a2b63c184"
          }
        },
        "required": [
          "feedback",
          "source",
          "workspaceId",
          "organisationId"
        ],
        "description": "Response data for processed feedback"
      },
      "FeedbackSourceEnum": {
        "type": "string",
        "enum": [
          "TYPEFORM",
          "SLACK",
          "UNKNOWN",
          "MANUAL"
        ],
        "description": "The source of the feedback",
        "example": "TYPEFORM"
      },
      "CreateFeedbackDocumentPayload": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Name of the document to upload",
            "example": "report.pdf"
          },
          "source": {
            "type": "string",
            "description": "Source of the document",
            "example": "interview"
          }
        },
        "required": [
          "fileName"
        ],
        "description": "Feedback document upload request"
      },
      "CreateFeedbackDocumentResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "uploadUrl": {
                "type": "string",
                "description": "A secure URL to upload the document to",
                "example": "https://example.com/documents/doc_123?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=..."
              }
            },
            "required": [
              "uploadUrl"
            ]
          }
        },
        "required": [
          "data"
        ],
        "description": "Uploaded document information"
      },
      "RelationshipAction": {
        "type": "string",
        "enum": [
          "add",
          "remove"
        ]
      },
      "OpportunityRelationshipsPayload": {
        "type": "object",
        "properties": {
          "solutionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of solution IDs to associate with the opportunity",
            "example": [
              "a1b2c3d4-e5f6-4a5b-8c9d-0e1f2a3b4c5d"
            ]
          },
          "outcomeIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of outcome IDs to associate with the opportunity",
            "example": [
              "f6e5d4c3-b2a1-4b5a-9c8d-1e0f2a3b4c5d"
            ]
          },
          "feedbackIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of feedback IDs to associate with the opportunity",
            "example": [
              "c5d4e3f2-a1b2-4c5d-8e9f-0a1b2c3d4e5f"
            ]
          }
        },
        "description": "Request body for managing opportunity relationships"
      },
      "OutcomeRelationshipsPayload": {
        "type": "object",
        "properties": {
          "opportunityIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of opportunity IDs to associate with the outcome",
            "example": [
              "a1b2c3d4-e5f6-4a5b-8c9d-0e1f2a3b4c5d"
            ]
          }
        },
        "description": "Request body for managing outcome relationships"
      },
      "RequirementRelationshipsPayload": {
        "type": "object",
        "properties": {
          "solutionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of solution IDs to associate with the requirement",
            "example": [
              "f6e5d4c3-b2a1-4b5a-9c8d-1e0f2a3b4c5d"
            ]
          }
        },
        "description": "Request body for managing requirement relationships"
      },
      "SolutionRelationshipsPayload": {
        "type": "object",
        "properties": {
          "opportunityIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of opportunity IDs to associate with the solution",
            "example": [
              "a1b2c3d4-e5f6-4a5b-8c9d-0e1f2a3b4c5d"
            ]
          },
          "requirementIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of requirement IDs to associate with the solution",
            "example": [
              "f6e5d4c3-b2a1-4b5a-9c8d-1e0f2a3b4c5d"
            ]
          }
        },
        "description": "Request body for managing solution relationships"
      },
      "PrioritiseSolutionsRequest": {
        "type": "object",
        "properties": {
          "beforeId": {
            "type": "string",
            "nullable": true,
            "format": "uuid",
            "description": "ID of solution before which to place the solutions, or null to place at the end"
          },
          "solutionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "description": "List of solution IDs to move"
          }
        },
        "required": [
          "beforeId",
          "solutionIds"
        ],
        "description": "Request schema for prioritising solutions",
        "example": {
          "beforeId": "e3f2c1b4-7a8d-5e4f-b8c7-7a8c9d1e2f3a",
          "solutionIds": [
            "d4e71c2b-a498-42af-b7f5-69de06a0d7c4",
            "b5f2a0f4-6a7d-4a1f-9e6b-6bcb9c22d7c4",
            "c0e195d9-b918-4a3a-bd8b-f730361d044e"
          ]
        }
      },
      "CreateKnowledgeFromUrlPayload": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL the user wishes to create knowledge from",
            "example": "https://example.com"
          }
        },
        "required": [
          "url"
        ],
        "description": "Request schema for creating knowledge from a URL"
      },
      "SingleKnowledgeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Knowledge"
              }
            ],
            "properties": {
              "content": {
                "type": "string",
                "description": "Knowledge content - the full content of the knowledge, this will only be available post processing",
                "example": "A collection of best practices for AI in healthcare"
              }
            }
          }
        },
        "required": [
          "data"
        ],
        "description": "Response containing a single knowledge"
      },
      "Knowledge": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Knowledge ID",
            "example": "7b9e5d2c-f314-48a9-be56-9843a2f6c019"
          },
          "state": {
            "type": "string",
            "enum": [
              "initial",
              "processing",
              "completed",
              "error"
            ],
            "description": "Knowledge state",
            "example": "initial"
          },
          "title": {
            "type": "string",
            "description": "Knowledge title",
            "example": "Best practices for AI in healthcare"
          },
          "description": {
            "type": "string",
            "description": "Knowledge description - a short summary of the knowledge",
            "example": "A collection of best practices for AI in healthcare"
          },
          "createdAt": {
            "type": "string",
            "description": "Knowledge creation timestamp",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Knowledge update timestamp",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "source": {
            "type": "string",
            "enum": [
              "text",
              "url",
              "pdf"
            ],
            "description": "Type of knowledge",
            "example": "text"
          },
          "pdfFileUrl": {
            "type": "string",
            "description": "URL of the PDF file of the knowledge (mutually exclusive with url)",
            "example": "https://example.com/document.pdf"
          },
          "txtFileUrl": {
            "type": "string",
            "description": "URL of the TXT file of the knowledge (mutually exclusive with url)",
            "example": "/knowledge/7b9e5d2c-f314-48a9-be56-9843a2f6c019"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the knowledge source (mutually exclusive with filePath)",
            "example": "https://example.com/document.pdf"
          }
        },
        "required": [
          "id",
          "state",
          "title",
          "description",
          "createdAt",
          "updatedAt",
          "source"
        ],
        "description": "Knowledge entity schema"
      },
      "CreateKnowledgeFromPdfPayload": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "The name of the file to create knowledge from",
            "example": "example.pdf"
          }
        },
        "required": [
          "fileName"
        ],
        "description": "Request schema for creating knowledge from a PDF file"
      },
      "SingleKnowledgeResponseWithUploadPdf": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Knowledge"
          }
        ],
        "properties": {
          "uploadUrl": {
            "type": "string",
            "description": "The single use secure S3 upload url.",
            "example": "https://s3.amazonaws.com/basilisk-ai-dev/example.pdf"
          }
        },
        "required": [
          "uploadUrl"
        ],
        "description": "Response containing a single knowledge"
      },
      "CreateKnowledgePayload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "An optional Knowledge ID must be a uuid",
            "example": "7b9e5d2c-f314-48a9-be56-9843a2f6c019"
          },
          "title": {
            "type": "string",
            "description": "Knowledge title",
            "example": "Best practices for AI in healthcare"
          },
          "description": {
            "type": "string",
            "description": "Knowledge description - a short summary of the knowledge",
            "example": "A collection of best practices for AI in healthcare"
          },
          "content": {
            "type": "string",
            "description": "Knowledge content - the full content of the knowledge",
            "example": "A collection of best practices for AI in healthcare"
          }
        },
        "required": [
          "title",
          "description",
          "content"
        ],
        "description": "Request schema for creating knowledge"
      },
      "KnowledgeArrayResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Knowledge"
            },
            "description": "Array of knowledge"
          }
        },
        "required": [
          "data"
        ],
        "description": "Response containing an array of knowledge"
      },
      "UpdateKnowledgePayload": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Knowledge title",
            "example": "Best practices for AI in healthcare"
          },
          "description": {
            "type": "string",
            "description": "Knowledge description - a short summary of the knowledge",
            "example": "A collection of best practices for AI in healthcare"
          },
          "content": {
            "type": "string",
            "description": "The content of the knowledge, only available for text sources, optional",
            "example": "A collection of best practices for AI in healthcare"
          }
        },
        "description": "Request schema for updating knowledge"
      },
      "UpdateStrategyDocumentPayload": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "report": {
                "type": "string",
                "description": "Strategy document report",
                "example": "# Strategy Document\n## Mission\n..."
              }
            },
            "required": [
              "report"
            ]
          }
        },
        "required": [
          "data"
        ],
        "description": "Request schema for updating a strategy document"
      },
      "SimilaritySearchResponse": {
        "type": "object",
        "properties": {
          "opportunities": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "score": {
                  "type": "number"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "nodeId": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "nodeId"
                  ]
                }
              },
              "required": [
                "id"
              ]
            },
            "description": "Array of matched opportunities"
          },
          "knowledge": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "score": {
                  "type": "number"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              },
              "required": [
                "id"
              ]
            },
            "description": "Array of matched knowledge items"
          },
          "insights": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "score": {
                  "type": "number"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "nodeId": {
                      "type": "string"
                    },
                    "feedbackId": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "nodeId"
                  ]
                }
              },
              "required": [
                "id"
              ]
            },
            "description": "Array of matched insights items"
          },
          "solutions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "score": {
                  "type": "number"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "nodeId": {
                      "type": "string"
                    },
                    "status": {},
                    "content": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "nodeId"
                  ]
                }
              },
              "required": [
                "id"
              ]
            },
            "description": "Array of matched solutions items"
          },
          "totalResults": {
            "type": "number",
            "description": "Total number of results"
          }
        },
        "description": "Similarity search response data"
      }
    },
    "parameters": {
      "OutcomeRelationshipsParam": {
        "in": "query",
        "name": "relationships",
        "required": false,
        "description": "Comma-separated list of relationships to include in the response",
        "example": "opportunities,solutions,requirements,feedback",
        "schema": {
          "type": "string"
        }
      },
      "FeedbackRelationshipsParam": {
        "in": "query",
        "name": "relationships",
        "required": false,
        "description": "Comma-separated list of relationships to include in the response",
        "example": "opportunities,solutions,requirements,outcomes",
        "schema": {
          "type": "string"
        }
      },
      "OpportunityRelationshipsParam": {
        "in": "query",
        "name": "relationships",
        "required": false,
        "description": "Comma-separated list of relationships to include in the response",
        "example": "solutions,requirements,outcomes,feedback",
        "schema": {
          "type": "string"
        }
      },
      "RequirementRelationshipsParam": {
        "in": "query",
        "name": "relationships",
        "required": false,
        "description": "Comma-separated list of relationships to include in the response",
        "example": "solutions,opportunities,outcomes,feedback",
        "schema": {
          "type": "string"
        }
      },
      "SolutionRelationshipsParam": {
        "in": "query",
        "name": "relationships",
        "required": false,
        "description": "Comma-separated list of relationships to include in the response",
        "example": "opportunities,requirements,outcomes,feedback",
        "schema": {
          "type": "string"
        }
      }
    }
  }
}